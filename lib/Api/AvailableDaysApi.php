<?php
/**
 * AvailableDaysApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AvailableDaysApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AvailableDaysApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiCheckoutAvailableDays' => [
            'application/json',
        ],
        'xXDeprecatedApiCheckoutAvailableDays' => [
            'application/json',
        ],
        'xXDeprecatedApiCheckoutAvailableDaysDe' => [
            'application/json',
        ],
        'xXDeprecatedApiCheckoutAvailableDaysEn' => [
            'application/json',
        ],
        'xXDeprecatedApiCheckoutAvailableDaysFr' => [
            'application/json',
        ],
        'xXDeprecatedApiCheckoutAvailableDaysRu' => [
            'application/json',
        ],
        'xXDeprecatedApiCheckoutAvailableDaysUk' => [
            'application/json',
        ],
        'xXDeprecatedApiCheckoutAvailableDaysZh' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiCheckoutAvailableDays
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiCheckoutAvailableDays'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AvailableDays[]
     */
    public function apiCheckoutAvailableDays($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['apiCheckoutAvailableDays'][0])
    {
        list($response) = $this->apiCheckoutAvailableDaysWithHttpInfo($product_query, $location_query, $page, $contentType);
        return $response;
    }

    /**
     * Operation apiCheckoutAvailableDaysWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiCheckoutAvailableDays'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AvailableDays[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCheckoutAvailableDaysWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['apiCheckoutAvailableDays'][0])
    {
        $request = $this->apiCheckoutAvailableDaysRequest($product_query, $location_query, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AvailableDays[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AvailableDays[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AvailableDays[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AvailableDays[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiCheckoutAvailableDaysAsync
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiCheckoutAvailableDays'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCheckoutAvailableDaysAsync($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['apiCheckoutAvailableDays'][0])
    {
        return $this->apiCheckoutAvailableDaysAsyncWithHttpInfo($product_query, $location_query, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCheckoutAvailableDaysAsyncWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiCheckoutAvailableDays'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCheckoutAvailableDaysAsyncWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['apiCheckoutAvailableDays'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
        $request = $this->apiCheckoutAvailableDaysRequest($product_query, $location_query, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiCheckoutAvailableDays'
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiCheckoutAvailableDays'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiCheckoutAvailableDaysRequest($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['apiCheckoutAvailableDays'][0])
    {

        // verify the required parameter 'product_query' is set
        if ($product_query === null || (is_array($product_query) && count($product_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_query when calling apiCheckoutAvailableDays'
            );
        }

        // verify the required parameter 'location_query' is set
        if ($location_query === null || (is_array($location_query) && count($location_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_query when calling apiCheckoutAvailableDays'
            );
        }



        $resourcePath = '/api/v2/checkout/available-days/{productQuery}/{locationQuery}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product_query !== null) {
            $resourcePath = str_replace(
                '{' . 'productQuery' . '}',
                ObjectSerializer::toPathValue($product_query),
                $resourcePath
            );
        }
        // path params
        if ($location_query !== null) {
            $resourcePath = str_replace(
                '{' . 'locationQuery' . '}',
                ObjectSerializer::toPathValue($location_query),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDays
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDays'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AvailableDays[]
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDays($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDays'][0])
    {
        list($response) = $this->xXDeprecatedApiCheckoutAvailableDaysWithHttpInfo($product_query, $location_query, $page, $contentType);
        return $response;
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDays'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AvailableDays[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDays'][0])
    {
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysRequest($product_query, $location_query, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AvailableDays[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AvailableDays[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AvailableDays[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AvailableDays[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysAsync
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDays'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysAsync($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDays'][0])
    {
        return $this->xXDeprecatedApiCheckoutAvailableDaysAsyncWithHttpInfo($product_query, $location_query, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysAsyncWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDays'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysAsyncWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDays'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysRequest($product_query, $location_query, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xXDeprecatedApiCheckoutAvailableDays'
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDays'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysRequest($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDays'][0])
    {

        // verify the required parameter 'product_query' is set
        if ($product_query === null || (is_array($product_query) && count($product_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_query when calling xXDeprecatedApiCheckoutAvailableDays'
            );
        }

        // verify the required parameter 'location_query' is set
        if ($location_query === null || (is_array($location_query) && count($location_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_query when calling xXDeprecatedApiCheckoutAvailableDays'
            );
        }



        $resourcePath = '/available-days/{productQuery}/{locationQuery}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product_query !== null) {
            $resourcePath = str_replace(
                '{' . 'productQuery' . '}',
                ObjectSerializer::toPathValue($product_query),
                $resourcePath
            );
        }
        // path params
        if ($location_query !== null) {
            $resourcePath = str_replace(
                '{' . 'locationQuery' . '}',
                ObjectSerializer::toPathValue($location_query),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysDe
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysDe'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AvailableDays[]
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysDe($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysDe'][0])
    {
        list($response) = $this->xXDeprecatedApiCheckoutAvailableDaysDeWithHttpInfo($product_query, $location_query, $page, $contentType);
        return $response;
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysDeWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysDe'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AvailableDays[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysDeWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysDe'][0])
    {
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysDeRequest($product_query, $location_query, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AvailableDays[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AvailableDays[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AvailableDays[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AvailableDays[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysDeAsync
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysDeAsync($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysDe'][0])
    {
        return $this->xXDeprecatedApiCheckoutAvailableDaysDeAsyncWithHttpInfo($product_query, $location_query, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysDeAsyncWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysDeAsyncWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysDe'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysDeRequest($product_query, $location_query, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xXDeprecatedApiCheckoutAvailableDaysDe'
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysDeRequest($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysDe'][0])
    {

        // verify the required parameter 'product_query' is set
        if ($product_query === null || (is_array($product_query) && count($product_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_query when calling xXDeprecatedApiCheckoutAvailableDaysDe'
            );
        }

        // verify the required parameter 'location_query' is set
        if ($location_query === null || (is_array($location_query) && count($location_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_query when calling xXDeprecatedApiCheckoutAvailableDaysDe'
            );
        }



        $resourcePath = '/de/available-days/{productQuery}/{locationQuery}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product_query !== null) {
            $resourcePath = str_replace(
                '{' . 'productQuery' . '}',
                ObjectSerializer::toPathValue($product_query),
                $resourcePath
            );
        }
        // path params
        if ($location_query !== null) {
            $resourcePath = str_replace(
                '{' . 'locationQuery' . '}',
                ObjectSerializer::toPathValue($location_query),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysEn
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysEn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AvailableDays[]
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysEn($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysEn'][0])
    {
        list($response) = $this->xXDeprecatedApiCheckoutAvailableDaysEnWithHttpInfo($product_query, $location_query, $page, $contentType);
        return $response;
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysEnWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysEn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AvailableDays[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysEnWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysEn'][0])
    {
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysEnRequest($product_query, $location_query, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AvailableDays[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AvailableDays[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AvailableDays[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AvailableDays[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysEnAsync
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysEn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysEnAsync($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysEn'][0])
    {
        return $this->xXDeprecatedApiCheckoutAvailableDaysEnAsyncWithHttpInfo($product_query, $location_query, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysEnAsyncWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysEn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysEnAsyncWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysEn'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysEnRequest($product_query, $location_query, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xXDeprecatedApiCheckoutAvailableDaysEn'
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysEn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysEnRequest($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysEn'][0])
    {

        // verify the required parameter 'product_query' is set
        if ($product_query === null || (is_array($product_query) && count($product_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_query when calling xXDeprecatedApiCheckoutAvailableDaysEn'
            );
        }

        // verify the required parameter 'location_query' is set
        if ($location_query === null || (is_array($location_query) && count($location_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_query when calling xXDeprecatedApiCheckoutAvailableDaysEn'
            );
        }



        $resourcePath = '/en/available-days/{productQuery}/{locationQuery}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product_query !== null) {
            $resourcePath = str_replace(
                '{' . 'productQuery' . '}',
                ObjectSerializer::toPathValue($product_query),
                $resourcePath
            );
        }
        // path params
        if ($location_query !== null) {
            $resourcePath = str_replace(
                '{' . 'locationQuery' . '}',
                ObjectSerializer::toPathValue($location_query),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysFr
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysFr'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AvailableDays[]
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysFr($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysFr'][0])
    {
        list($response) = $this->xXDeprecatedApiCheckoutAvailableDaysFrWithHttpInfo($product_query, $location_query, $page, $contentType);
        return $response;
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysFrWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysFr'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AvailableDays[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysFrWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysFr'][0])
    {
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysFrRequest($product_query, $location_query, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AvailableDays[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AvailableDays[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AvailableDays[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AvailableDays[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysFrAsync
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysFr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysFrAsync($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysFr'][0])
    {
        return $this->xXDeprecatedApiCheckoutAvailableDaysFrAsyncWithHttpInfo($product_query, $location_query, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysFrAsyncWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysFr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysFrAsyncWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysFr'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysFrRequest($product_query, $location_query, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xXDeprecatedApiCheckoutAvailableDaysFr'
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysFr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysFrRequest($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysFr'][0])
    {

        // verify the required parameter 'product_query' is set
        if ($product_query === null || (is_array($product_query) && count($product_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_query when calling xXDeprecatedApiCheckoutAvailableDaysFr'
            );
        }

        // verify the required parameter 'location_query' is set
        if ($location_query === null || (is_array($location_query) && count($location_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_query when calling xXDeprecatedApiCheckoutAvailableDaysFr'
            );
        }



        $resourcePath = '/fr/available-days/{productQuery}/{locationQuery}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product_query !== null) {
            $resourcePath = str_replace(
                '{' . 'productQuery' . '}',
                ObjectSerializer::toPathValue($product_query),
                $resourcePath
            );
        }
        // path params
        if ($location_query !== null) {
            $resourcePath = str_replace(
                '{' . 'locationQuery' . '}',
                ObjectSerializer::toPathValue($location_query),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysRu
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysRu'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AvailableDays[]
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysRu($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysRu'][0])
    {
        list($response) = $this->xXDeprecatedApiCheckoutAvailableDaysRuWithHttpInfo($product_query, $location_query, $page, $contentType);
        return $response;
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysRuWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysRu'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AvailableDays[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysRuWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysRu'][0])
    {
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysRuRequest($product_query, $location_query, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AvailableDays[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AvailableDays[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AvailableDays[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AvailableDays[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysRuAsync
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysRu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysRuAsync($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysRu'][0])
    {
        return $this->xXDeprecatedApiCheckoutAvailableDaysRuAsyncWithHttpInfo($product_query, $location_query, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysRuAsyncWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysRu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysRuAsyncWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysRu'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysRuRequest($product_query, $location_query, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xXDeprecatedApiCheckoutAvailableDaysRu'
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysRu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysRuRequest($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysRu'][0])
    {

        // verify the required parameter 'product_query' is set
        if ($product_query === null || (is_array($product_query) && count($product_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_query when calling xXDeprecatedApiCheckoutAvailableDaysRu'
            );
        }

        // verify the required parameter 'location_query' is set
        if ($location_query === null || (is_array($location_query) && count($location_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_query when calling xXDeprecatedApiCheckoutAvailableDaysRu'
            );
        }



        $resourcePath = '/ru/available-days/{productQuery}/{locationQuery}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product_query !== null) {
            $resourcePath = str_replace(
                '{' . 'productQuery' . '}',
                ObjectSerializer::toPathValue($product_query),
                $resourcePath
            );
        }
        // path params
        if ($location_query !== null) {
            $resourcePath = str_replace(
                '{' . 'locationQuery' . '}',
                ObjectSerializer::toPathValue($location_query),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysUk
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysUk'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AvailableDays[]
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysUk($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysUk'][0])
    {
        list($response) = $this->xXDeprecatedApiCheckoutAvailableDaysUkWithHttpInfo($product_query, $location_query, $page, $contentType);
        return $response;
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysUkWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysUk'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AvailableDays[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysUkWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysUk'][0])
    {
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysUkRequest($product_query, $location_query, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AvailableDays[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AvailableDays[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AvailableDays[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AvailableDays[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysUkAsync
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysUk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysUkAsync($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysUk'][0])
    {
        return $this->xXDeprecatedApiCheckoutAvailableDaysUkAsyncWithHttpInfo($product_query, $location_query, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysUkAsyncWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysUk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysUkAsyncWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysUk'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysUkRequest($product_query, $location_query, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xXDeprecatedApiCheckoutAvailableDaysUk'
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysUk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysUkRequest($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysUk'][0])
    {

        // verify the required parameter 'product_query' is set
        if ($product_query === null || (is_array($product_query) && count($product_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_query when calling xXDeprecatedApiCheckoutAvailableDaysUk'
            );
        }

        // verify the required parameter 'location_query' is set
        if ($location_query === null || (is_array($location_query) && count($location_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_query when calling xXDeprecatedApiCheckoutAvailableDaysUk'
            );
        }



        $resourcePath = '/uk/available-days/{productQuery}/{locationQuery}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product_query !== null) {
            $resourcePath = str_replace(
                '{' . 'productQuery' . '}',
                ObjectSerializer::toPathValue($product_query),
                $resourcePath
            );
        }
        // path params
        if ($location_query !== null) {
            $resourcePath = str_replace(
                '{' . 'locationQuery' . '}',
                ObjectSerializer::toPathValue($location_query),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysZh
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysZh'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AvailableDays[]
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysZh($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysZh'][0])
    {
        list($response) = $this->xXDeprecatedApiCheckoutAvailableDaysZhWithHttpInfo($product_query, $location_query, $page, $contentType);
        return $response;
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysZhWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysZh'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AvailableDays[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysZhWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysZh'][0])
    {
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysZhRequest($product_query, $location_query, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AvailableDays[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AvailableDays[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AvailableDays[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AvailableDays[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysZhAsync
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysZh'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysZhAsync($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysZh'][0])
    {
        return $this->xXDeprecatedApiCheckoutAvailableDaysZhAsyncWithHttpInfo($product_query, $location_query, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation xXDeprecatedApiCheckoutAvailableDaysZhAsyncWithHttpInfo
     *
     * Retrieves the collection of AvailableDays resources.
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysZh'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysZhAsyncWithHttpInfo($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysZh'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AvailableDays[]';
        $request = $this->xXDeprecatedApiCheckoutAvailableDaysZhRequest($product_query, $location_query, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'xXDeprecatedApiCheckoutAvailableDaysZh'
     *
     * @param  string $product_query AvailableDayDto identifier (required)
     * @param  string $location_query AvailableDayDto identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysZh'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function xXDeprecatedApiCheckoutAvailableDaysZhRequest($product_query, $location_query, $page = 1, string $contentType = self::contentTypes['xXDeprecatedApiCheckoutAvailableDaysZh'][0])
    {

        // verify the required parameter 'product_query' is set
        if ($product_query === null || (is_array($product_query) && count($product_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_query when calling xXDeprecatedApiCheckoutAvailableDaysZh'
            );
        }

        // verify the required parameter 'location_query' is set
        if ($location_query === null || (is_array($location_query) && count($location_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_query when calling xXDeprecatedApiCheckoutAvailableDaysZh'
            );
        }



        $resourcePath = '/zh/available-days/{productQuery}/{locationQuery}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($product_query !== null) {
            $resourcePath = str_replace(
                '{' . 'productQuery' . '}',
                ObjectSerializer::toPathValue($product_query),
                $resourcePath
            );
        }
        // path params
        if ($location_query !== null) {
            $resourcePath = str_replace(
                '{' . 'locationQuery' . '}',
                ObjectSerializer::toPathValue($location_query),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
