<?php
/**
 * OrderApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiOrdersCheckoutCancelBookingItem' => [
            'application/json',
        ],
        'apiOrdersCheckoutCheckVoucherCollection' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersCheckoutGetStatusItem' => [
            'application/json',
        ],
        'apiOrdersCheckoutPlaceOrderCollection' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe' => [
            'application/json',
        ],
        'apiOrdersGetXXDeprecatedCheckoutGetStatusItem' => [
            'application/json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk' => [
            'application/json',
            'application/ld+json',
        ],
        'apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh' => [
            'application/json',
            'application/ld+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiOrdersCheckoutCancelBookingItem
     *
     * Cancel Order.
     *
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutCancelBookingItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiOrdersCheckoutCancelBookingItem($uuid, string $contentType = self::contentTypes['apiOrdersCheckoutCancelBookingItem'][0])
    {
        $this->apiOrdersCheckoutCancelBookingItemWithHttpInfo($uuid, $contentType);
    }

    /**
     * Operation apiOrdersCheckoutCancelBookingItemWithHttpInfo
     *
     * Cancel Order.
     *
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutCancelBookingItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOrdersCheckoutCancelBookingItemWithHttpInfo($uuid, string $contentType = self::contentTypes['apiOrdersCheckoutCancelBookingItem'][0])
    {
        $request = $this->apiOrdersCheckoutCancelBookingItemRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersCheckoutCancelBookingItemAsync
     *
     * Cancel Order.
     *
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutCancelBookingItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersCheckoutCancelBookingItemAsync($uuid, string $contentType = self::contentTypes['apiOrdersCheckoutCancelBookingItem'][0])
    {
        return $this->apiOrdersCheckoutCancelBookingItemAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersCheckoutCancelBookingItemAsyncWithHttpInfo
     *
     * Cancel Order.
     *
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutCancelBookingItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersCheckoutCancelBookingItemAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['apiOrdersCheckoutCancelBookingItem'][0])
    {
        $returnType = '';
        $request = $this->apiOrdersCheckoutCancelBookingItemRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersCheckoutCancelBookingItem'
     *
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutCancelBookingItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOrdersCheckoutCancelBookingItemRequest($uuid, string $contentType = self::contentTypes['apiOrdersCheckoutCancelBookingItem'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiOrdersCheckoutCancelBookingItem'
            );
        }


        $resourcePath = '/api/v2/checkout/order/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersCheckoutCheckVoucherCollection
     *
     * Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutCheckVoucherCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderOrderCheckDtoOrderRead
     */
    public function apiOrdersCheckoutCheckVoucherCollection($body, string $contentType = self::contentTypes['apiOrdersCheckoutCheckVoucherCollection'][0])
    {
        list($response) = $this->apiOrdersCheckoutCheckVoucherCollectionWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersCheckoutCheckVoucherCollectionWithHttpInfo
     *
     * Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutCheckVoucherCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderOrderCheckDtoOrderRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOrdersCheckoutCheckVoucherCollectionWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersCheckoutCheckVoucherCollection'][0])
    {
        $request = $this->apiOrdersCheckoutCheckVoucherCollectionRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderOrderCheckDtoOrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderOrderCheckDtoOrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderOrderCheckDtoOrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderOrderCheckDtoOrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderCheckDtoOrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersCheckoutCheckVoucherCollectionAsync
     *
     * Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutCheckVoucherCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersCheckoutCheckVoucherCollectionAsync($body, string $contentType = self::contentTypes['apiOrdersCheckoutCheckVoucherCollection'][0])
    {
        return $this->apiOrdersCheckoutCheckVoucherCollectionAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersCheckoutCheckVoucherCollectionAsyncWithHttpInfo
     *
     * Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutCheckVoucherCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersCheckoutCheckVoucherCollectionAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersCheckoutCheckVoucherCollection'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderOrderCheckDtoOrderRead';
        $request = $this->apiOrdersCheckoutCheckVoucherCollectionRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersCheckoutCheckVoucherCollection'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutCheckVoucherCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOrdersCheckoutCheckVoucherCollectionRequest($body, string $contentType = self::contentTypes['apiOrdersCheckoutCheckVoucherCollection'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersCheckoutCheckVoucherCollection'
            );
        }


        $resourcePath = '/api/v2/checkout/checkVoucher';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersCheckoutGetStatusItem
     *
     * Get Order status.
     *
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutGetStatusItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead
     */
    public function apiOrdersCheckoutGetStatusItem($uuid, string $contentType = self::contentTypes['apiOrdersCheckoutGetStatusItem'][0])
    {
        list($response) = $this->apiOrdersCheckoutGetStatusItemWithHttpInfo($uuid, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersCheckoutGetStatusItemWithHttpInfo
     *
     * Get Order status.
     *
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutGetStatusItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOrdersCheckoutGetStatusItemWithHttpInfo($uuid, string $contentType = self::contentTypes['apiOrdersCheckoutGetStatusItem'][0])
    {
        $request = $this->apiOrdersCheckoutGetStatusItemRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersCheckoutGetStatusItemAsync
     *
     * Get Order status.
     *
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutGetStatusItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersCheckoutGetStatusItemAsync($uuid, string $contentType = self::contentTypes['apiOrdersCheckoutGetStatusItem'][0])
    {
        return $this->apiOrdersCheckoutGetStatusItemAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersCheckoutGetStatusItemAsyncWithHttpInfo
     *
     * Get Order status.
     *
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutGetStatusItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersCheckoutGetStatusItemAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['apiOrdersCheckoutGetStatusItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
        $request = $this->apiOrdersCheckoutGetStatusItemRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersCheckoutGetStatusItem'
     *
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutGetStatusItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOrdersCheckoutGetStatusItemRequest($uuid, string $contentType = self::contentTypes['apiOrdersCheckoutGetStatusItem'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiOrdersCheckoutGetStatusItem'
            );
        }


        $resourcePath = '/api/v2/checkout/order/{uuid}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersCheckoutPlaceOrderCollection
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutPlaceOrderCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead
     */
    public function apiOrdersCheckoutPlaceOrderCollection($body, string $contentType = self::contentTypes['apiOrdersCheckoutPlaceOrderCollection'][0])
    {
        list($response) = $this->apiOrdersCheckoutPlaceOrderCollectionWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersCheckoutPlaceOrderCollectionWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutPlaceOrderCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOrdersCheckoutPlaceOrderCollectionWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersCheckoutPlaceOrderCollection'][0])
    {
        $request = $this->apiOrdersCheckoutPlaceOrderCollectionRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersCheckoutPlaceOrderCollectionAsync
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutPlaceOrderCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersCheckoutPlaceOrderCollectionAsync($body, string $contentType = self::contentTypes['apiOrdersCheckoutPlaceOrderCollection'][0])
    {
        return $this->apiOrdersCheckoutPlaceOrderCollectionAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersCheckoutPlaceOrderCollectionAsyncWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutPlaceOrderCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersCheckoutPlaceOrderCollectionAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersCheckoutPlaceOrderCollection'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
        $request = $this->apiOrdersCheckoutPlaceOrderCollectionRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersCheckoutPlaceOrderCollection'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersCheckoutPlaceOrderCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiOrdersCheckoutPlaceOrderCollectionRequest($body, string $contentType = self::contentTypes['apiOrdersCheckoutPlaceOrderCollection'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersCheckoutPlaceOrderCollection'
            );
        }


        $resourcePath = '/api/v2/checkout/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe
     *
     * DEPRECATED - Cancel Order.
     *
     * @param  string $_locale Order identifier (required)
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe($_locale, $uuid, string $contentType = self::contentTypes['apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'][0])
    {
        $this->apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeWithHttpInfo($_locale, $uuid, $contentType);
    }

    /**
     * Operation apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeWithHttpInfo
     *
     * DEPRECATED - Cancel Order.
     *
     * @param  string $_locale Order identifier (required)
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeWithHttpInfo($_locale, $uuid, string $contentType = self::contentTypes['apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'][0])
    {
        $request = $this->apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeRequest($_locale, $uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeAsync
     *
     * DEPRECATED - Cancel Order.
     *
     * @param  string $_locale Order identifier (required)
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeAsync($_locale, $uuid, string $contentType = self::contentTypes['apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'][0])
    {
        return $this->apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeAsyncWithHttpInfo($_locale, $uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeAsyncWithHttpInfo
     *
     * DEPRECATED - Cancel Order.
     *
     * @param  string $_locale Order identifier (required)
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeAsyncWithHttpInfo($_locale, $uuid, string $contentType = self::contentTypes['apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'][0])
    {
        $returnType = '';
        $request = $this->apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeRequest($_locale, $uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'
     *
     * @param  string $_locale Order identifier (required)
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDeRequest($_locale, $uuid, string $contentType = self::contentTypes['apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'][0])
    {

        // verify the required parameter '_locale' is set
        if ($_locale === null || (is_array($_locale) && count($_locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $_locale when calling apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiOrdersDeleteXXDeprecatedCheckoutCancelBookingItemDe'
            );
        }


        $resourcePath = '/{_locale}/api/v1/order/{uuid}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($_locale !== null) {
            $resourcePath = str_replace(
                '{' . '_locale' . '}',
                ObjectSerializer::toPathValue($_locale),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersGetXXDeprecatedCheckoutGetStatusItem
     *
     * DEPRECATED - Get Order status.
     *
     * @param  string $_locale Order identifier (required)
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersGetXXDeprecatedCheckoutGetStatusItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead
     * @deprecated
     */
    public function apiOrdersGetXXDeprecatedCheckoutGetStatusItem($_locale, $uuid, string $contentType = self::contentTypes['apiOrdersGetXXDeprecatedCheckoutGetStatusItem'][0])
    {
        list($response) = $this->apiOrdersGetXXDeprecatedCheckoutGetStatusItemWithHttpInfo($_locale, $uuid, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersGetXXDeprecatedCheckoutGetStatusItemWithHttpInfo
     *
     * DEPRECATED - Get Order status.
     *
     * @param  string $_locale Order identifier (required)
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersGetXXDeprecatedCheckoutGetStatusItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersGetXXDeprecatedCheckoutGetStatusItemWithHttpInfo($_locale, $uuid, string $contentType = self::contentTypes['apiOrdersGetXXDeprecatedCheckoutGetStatusItem'][0])
    {
        $request = $this->apiOrdersGetXXDeprecatedCheckoutGetStatusItemRequest($_locale, $uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersGetXXDeprecatedCheckoutGetStatusItemAsync
     *
     * DEPRECATED - Get Order status.
     *
     * @param  string $_locale Order identifier (required)
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersGetXXDeprecatedCheckoutGetStatusItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersGetXXDeprecatedCheckoutGetStatusItemAsync($_locale, $uuid, string $contentType = self::contentTypes['apiOrdersGetXXDeprecatedCheckoutGetStatusItem'][0])
    {
        return $this->apiOrdersGetXXDeprecatedCheckoutGetStatusItemAsyncWithHttpInfo($_locale, $uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersGetXXDeprecatedCheckoutGetStatusItemAsyncWithHttpInfo
     *
     * DEPRECATED - Get Order status.
     *
     * @param  string $_locale Order identifier (required)
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersGetXXDeprecatedCheckoutGetStatusItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersGetXXDeprecatedCheckoutGetStatusItemAsyncWithHttpInfo($_locale, $uuid, string $contentType = self::contentTypes['apiOrdersGetXXDeprecatedCheckoutGetStatusItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
        $request = $this->apiOrdersGetXXDeprecatedCheckoutGetStatusItemRequest($_locale, $uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersGetXXDeprecatedCheckoutGetStatusItem'
     *
     * @param  string $_locale Order identifier (required)
     * @param  string $uuid Order identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersGetXXDeprecatedCheckoutGetStatusItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersGetXXDeprecatedCheckoutGetStatusItemRequest($_locale, $uuid, string $contentType = self::contentTypes['apiOrdersGetXXDeprecatedCheckoutGetStatusItem'][0])
    {

        // verify the required parameter '_locale' is set
        if ($_locale === null || (is_array($_locale) && count($_locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $_locale when calling apiOrdersGetXXDeprecatedCheckoutGetStatusItem'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiOrdersGetXXDeprecatedCheckoutGetStatusItem'
            );
        }


        $resourcePath = '/{_locale}/api/v1/order/{uuid}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($_locale !== null) {
            $resourcePath = str_replace(
                '{' . '_locale' . '}',
                ObjectSerializer::toPathValue($_locale),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeAsync
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeAsyncWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'][0])
    {
        $returnType = 'object';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherDeRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutCheckVoucherDe'
            );
        }


        $resourcePath = '/de/api/v1/checkVoucher';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnAsync
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnAsyncWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'][0])
    {
        $returnType = 'object';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherEnRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutCheckVoucherEn'
            );
        }


        $resourcePath = '/en/api/v1/checkVoucher';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrAsync
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrAsyncWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'][0])
    {
        $returnType = 'object';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherFrRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutCheckVoucherFr'
            );
        }


        $resourcePath = '/fr/api/v1/checkVoucher';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuAsync
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuAsyncWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'][0])
    {
        $returnType = 'object';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherRuRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutCheckVoucherRu'
            );
        }


        $resourcePath = '/ru/api/v1/checkVoucher';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkAsync
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkAsyncWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'][0])
    {
        $returnType = 'object';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherUkRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutCheckVoucherUk'
            );
        }


        $resourcePath = '/uk/api/v1/checkVoucher';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhAsync
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhAsyncWithHttpInfo
     *
     * DEPRECATED - Check Voucher.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'][0])
    {
        $returnType = 'object';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutCheckVoucherZhRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutCheckVoucherZh'
            );
        }


        $resourcePath = '/zh/api/v1/checkVoucher';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeAsync
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeAsyncWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderDeRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutPlaceOrderDe'
            );
        }


        $resourcePath = '/de/api/v1/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnAsync
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnAsyncWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderEnRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutPlaceOrderEn'
            );
        }


        $resourcePath = '/en/api/v1/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrAsync
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrAsyncWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderFrRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutPlaceOrderFr'
            );
        }


        $resourcePath = '/fr/api/v1/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuAsync
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuAsyncWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderRuRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutPlaceOrderRu'
            );
        }


        $resourcePath = '/ru/api/v1/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkAsync
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkAsyncWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderUkRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutPlaceOrderUk'
            );
        }


        $resourcePath = '/uk/api/v1/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'][0])
    {
        list($response) = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'][0])
    {
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhAsync
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhAsync($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'][0])
    {
        return $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhAsyncWithHttpInfo
     *
     * Place Order.
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhAsyncWithHttpInfo($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderOrderOutputDtoOrderRead';
        $request = $this->apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'
     *
     * @param  object $body The new Order resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function apiOrdersPostXXDeprecatedCheckoutPlaceOrderZhRequest($body, string $contentType = self::contentTypes['apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiOrdersPostXXDeprecatedCheckoutPlaceOrderZh'
            );
        }


        $resourcePath = '/zh/api/v1/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/ld+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if ($apiKey !== null) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
