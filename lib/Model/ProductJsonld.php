<?php
/**
 * ProductJsonld
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductJsonld Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductJsonld implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product.jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_context' => '\OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext',
        'at_id' => 'string',
        'at_type' => 'string',
        'name' => 'string',
        'test_type' => 'string',
        'default' => 'bool',
        'test_duration_in_minutes' => 'int',
        'description' => 'string',
        'single_gross_amount' => 'int',
        'automatic_booking_confirmation' => 'bool',
        'automatic_results_notification' => 'bool',
        'url_key' => 'string',
        'tax_percentage' => 'int',
        'loinc' => 'string',
        'loinc_display' => 'string',
        'visibility' => 'string',
        'max_bookings_per_order' => 'int',
        'minimum_patient_age' => 'int',
        'show_comment_field_for_customers' => 'bool',
        'is_personal_id_required' => 'bool',
        'test_workflow_type' => 'string',
        'eligibility_reasons' => 'string[]',
        'internal_code_required' => 'bool',
        'health_insurance_policy_number_required' => 'bool',
        'health_insurance_company_number_required' => 'bool',
        '_locale' => 'mixed',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'uuid' => 'string',
        'tenant' => 'string',
        'enriched_description' => 'string',
        'vat_per_unit' => 'int',
        'single_net_amount' => 'int',
        'active' => 'bool',
        'visibility_public' => 'bool',
        'visibility_private' => 'bool',
        'visibility_archived' => 'bool',
        'personal_id_required' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_context' => null,
        'at_id' => null,
        'at_type' => null,
        'name' => null,
        'test_type' => null,
        'default' => null,
        'test_duration_in_minutes' => null,
        'description' => null,
        'single_gross_amount' => null,
        'automatic_booking_confirmation' => null,
        'automatic_results_notification' => null,
        'url_key' => null,
        'tax_percentage' => null,
        'loinc' => null,
        'loinc_display' => null,
        'visibility' => null,
        'max_bookings_per_order' => null,
        'minimum_patient_age' => null,
        'show_comment_field_for_customers' => null,
        'is_personal_id_required' => null,
        'test_workflow_type' => null,
        'eligibility_reasons' => null,
        'internal_code_required' => null,
        'health_insurance_policy_number_required' => null,
        'health_insurance_company_number_required' => null,
        '_locale' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'uuid' => null,
        'tenant' => 'iri-reference',
        'enriched_description' => null,
        'vat_per_unit' => null,
        'single_net_amount' => null,
        'active' => null,
        'visibility_public' => null,
        'visibility_private' => null,
        'visibility_archived' => null,
        'personal_id_required' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_context' => false,
		'at_id' => false,
		'at_type' => false,
		'name' => false,
		'test_type' => false,
		'default' => false,
		'test_duration_in_minutes' => false,
		'description' => true,
		'single_gross_amount' => false,
		'automatic_booking_confirmation' => false,
		'automatic_results_notification' => false,
		'url_key' => false,
		'tax_percentage' => false,
		'loinc' => true,
		'loinc_display' => true,
		'visibility' => false,
		'max_bookings_per_order' => true,
		'minimum_patient_age' => true,
		'show_comment_field_for_customers' => false,
		'is_personal_id_required' => false,
		'test_workflow_type' => false,
		'eligibility_reasons' => true,
		'internal_code_required' => false,
		'health_insurance_policy_number_required' => false,
		'health_insurance_company_number_required' => false,
		'_locale' => true,
		'created_at' => false,
		'updated_at' => true,
		'uuid' => false,
		'tenant' => true,
		'enriched_description' => true,
		'vat_per_unit' => true,
		'single_net_amount' => true,
		'active' => false,
		'visibility_public' => false,
		'visibility_private' => false,
		'visibility_archived' => false,
		'personal_id_required' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_context' => '@context',
        'at_id' => '@id',
        'at_type' => '@type',
        'name' => 'name',
        'test_type' => 'testType',
        'default' => 'default',
        'test_duration_in_minutes' => 'testDurationInMinutes',
        'description' => 'description',
        'single_gross_amount' => 'singleGrossAmount',
        'automatic_booking_confirmation' => 'automaticBookingConfirmation',
        'automatic_results_notification' => 'automaticResultsNotification',
        'url_key' => 'urlKey',
        'tax_percentage' => 'taxPercentage',
        'loinc' => 'loinc',
        'loinc_display' => 'loincDisplay',
        'visibility' => 'visibility',
        'max_bookings_per_order' => 'maxBookingsPerOrder',
        'minimum_patient_age' => 'minimumPatientAge',
        'show_comment_field_for_customers' => 'showCommentFieldForCustomers',
        'is_personal_id_required' => 'isPersonalIdRequired',
        'test_workflow_type' => 'testWorkflowType',
        'eligibility_reasons' => 'eligibilityReasons',
        'internal_code_required' => 'internalCodeRequired',
        'health_insurance_policy_number_required' => 'healthInsurancePolicyNumberRequired',
        'health_insurance_company_number_required' => 'healthInsuranceCompanyNumberRequired',
        '_locale' => '_locale',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'uuid' => 'uuid',
        'tenant' => 'tenant',
        'enriched_description' => 'enrichedDescription',
        'vat_per_unit' => 'vatPerUnit',
        'single_net_amount' => 'singleNetAmount',
        'active' => 'active',
        'visibility_public' => 'visibilityPublic',
        'visibility_private' => 'visibilityPrivate',
        'visibility_archived' => 'visibilityArchived',
        'personal_id_required' => 'personalIdRequired'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_context' => 'setAtContext',
        'at_id' => 'setAtId',
        'at_type' => 'setAtType',
        'name' => 'setName',
        'test_type' => 'setTestType',
        'default' => 'setDefault',
        'test_duration_in_minutes' => 'setTestDurationInMinutes',
        'description' => 'setDescription',
        'single_gross_amount' => 'setSingleGrossAmount',
        'automatic_booking_confirmation' => 'setAutomaticBookingConfirmation',
        'automatic_results_notification' => 'setAutomaticResultsNotification',
        'url_key' => 'setUrlKey',
        'tax_percentage' => 'setTaxPercentage',
        'loinc' => 'setLoinc',
        'loinc_display' => 'setLoincDisplay',
        'visibility' => 'setVisibility',
        'max_bookings_per_order' => 'setMaxBookingsPerOrder',
        'minimum_patient_age' => 'setMinimumPatientAge',
        'show_comment_field_for_customers' => 'setShowCommentFieldForCustomers',
        'is_personal_id_required' => 'setIsPersonalIdRequired',
        'test_workflow_type' => 'setTestWorkflowType',
        'eligibility_reasons' => 'setEligibilityReasons',
        'internal_code_required' => 'setInternalCodeRequired',
        'health_insurance_policy_number_required' => 'setHealthInsurancePolicyNumberRequired',
        'health_insurance_company_number_required' => 'setHealthInsuranceCompanyNumberRequired',
        '_locale' => 'setLocale',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'uuid' => 'setUuid',
        'tenant' => 'setTenant',
        'enriched_description' => 'setEnrichedDescription',
        'vat_per_unit' => 'setVatPerUnit',
        'single_net_amount' => 'setSingleNetAmount',
        'active' => 'setActive',
        'visibility_public' => 'setVisibilityPublic',
        'visibility_private' => 'setVisibilityPrivate',
        'visibility_archived' => 'setVisibilityArchived',
        'personal_id_required' => 'setPersonalIdRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_context' => 'getAtContext',
        'at_id' => 'getAtId',
        'at_type' => 'getAtType',
        'name' => 'getName',
        'test_type' => 'getTestType',
        'default' => 'getDefault',
        'test_duration_in_minutes' => 'getTestDurationInMinutes',
        'description' => 'getDescription',
        'single_gross_amount' => 'getSingleGrossAmount',
        'automatic_booking_confirmation' => 'getAutomaticBookingConfirmation',
        'automatic_results_notification' => 'getAutomaticResultsNotification',
        'url_key' => 'getUrlKey',
        'tax_percentage' => 'getTaxPercentage',
        'loinc' => 'getLoinc',
        'loinc_display' => 'getLoincDisplay',
        'visibility' => 'getVisibility',
        'max_bookings_per_order' => 'getMaxBookingsPerOrder',
        'minimum_patient_age' => 'getMinimumPatientAge',
        'show_comment_field_for_customers' => 'getShowCommentFieldForCustomers',
        'is_personal_id_required' => 'getIsPersonalIdRequired',
        'test_workflow_type' => 'getTestWorkflowType',
        'eligibility_reasons' => 'getEligibilityReasons',
        'internal_code_required' => 'getInternalCodeRequired',
        'health_insurance_policy_number_required' => 'getHealthInsurancePolicyNumberRequired',
        'health_insurance_company_number_required' => 'getHealthInsuranceCompanyNumberRequired',
        '_locale' => 'getLocale',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'uuid' => 'getUuid',
        'tenant' => 'getTenant',
        'enriched_description' => 'getEnrichedDescription',
        'vat_per_unit' => 'getVatPerUnit',
        'single_net_amount' => 'getSingleNetAmount',
        'active' => 'getActive',
        'visibility_public' => 'getVisibilityPublic',
        'visibility_private' => 'getVisibilityPrivate',
        'visibility_archived' => 'getVisibilityArchived',
        'personal_id_required' => 'getPersonalIdRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_context', $data ?? [], null);
        $this->setIfExists('at_id', $data ?? [], null);
        $this->setIfExists('at_type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('test_type', $data ?? [], null);
        $this->setIfExists('default', $data ?? [], null);
        $this->setIfExists('test_duration_in_minutes', $data ?? [], 15);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('single_gross_amount', $data ?? [], 1000);
        $this->setIfExists('automatic_booking_confirmation', $data ?? [], true);
        $this->setIfExists('automatic_results_notification', $data ?? [], true);
        $this->setIfExists('url_key', $data ?? [], null);
        $this->setIfExists('tax_percentage', $data ?? [], 1900);
        $this->setIfExists('loinc', $data ?? [], null);
        $this->setIfExists('loinc_display', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], 'PUBLIC');
        $this->setIfExists('max_bookings_per_order', $data ?? [], null);
        $this->setIfExists('minimum_patient_age', $data ?? [], null);
        $this->setIfExists('show_comment_field_for_customers', $data ?? [], null);
        $this->setIfExists('is_personal_id_required', $data ?? [], null);
        $this->setIfExists('test_workflow_type', $data ?? [], 'FULL');
        $this->setIfExists('eligibility_reasons', $data ?? [], null);
        $this->setIfExists('internal_code_required', $data ?? [], null);
        $this->setIfExists('health_insurance_policy_number_required', $data ?? [], null);
        $this->setIfExists('health_insurance_company_number_required', $data ?? [], null);
        $this->setIfExists('_locale', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('tenant', $data ?? [], null);
        $this->setIfExists('enriched_description', $data ?? [], null);
        $this->setIfExists('vat_per_unit', $data ?? [], null);
        $this->setIfExists('single_net_amount', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('visibility_public', $data ?? [], null);
        $this->setIfExists('visibility_private', $data ?? [], null);
        $this->setIfExists('visibility_archived', $data ?? [], null);
        $this->setIfExists('personal_id_required', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['loinc']) && (mb_strlen($this->container['loinc']) > 20)) {
            $invalidProperties[] = "invalid value for 'loinc', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['max_bookings_per_order']) && ($this->container['max_bookings_per_order'] <= 0)) {
            $invalidProperties[] = "invalid value for 'max_bookings_per_order', must be bigger than 0.";
        }

        if (!is_null($this->container['minimum_patient_age']) && ($this->container['minimum_patient_age'] < 0)) {
            $invalidProperties[] = "invalid value for 'minimum_patient_age', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_context
     *
     * @return \OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext|null
     */
    public function getAtContext()
    {
        return $this->container['at_context'];
    }

    /**
     * Sets at_context
     *
     * @param \OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext|null $at_context at_context
     *
     * @return self
     */
    public function setAtContext($at_context)
    {
        if (is_null($at_context)) {
            throw new \InvalidArgumentException('non-nullable at_context cannot be null');
        }
        $this->container['at_context'] = $at_context;

        return $this;
    }

    /**
     * Gets at_id
     *
     * @return string|null
     */
    public function getAtId()
    {
        return $this->container['at_id'];
    }

    /**
     * Sets at_id
     *
     * @param string|null $at_id at_id
     *
     * @return self
     */
    public function setAtId($at_id)
    {
        if (is_null($at_id)) {
            throw new \InvalidArgumentException('non-nullable at_id cannot be null');
        }
        $this->container['at_id'] = $at_id;

        return $this;
    }

    /**
     * Gets at_type
     *
     * @return string|null
     */
    public function getAtType()
    {
        return $this->container['at_type'];
    }

    /**
     * Sets at_type
     *
     * @param string|null $at_type at_type
     *
     * @return self
     */
    public function setAtType($at_type)
    {
        if (is_null($at_type)) {
            throw new \InvalidArgumentException('non-nullable at_type cannot be null');
        }
        $this->container['at_type'] = $at_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProductJsonld., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProductJsonld., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets test_type
     *
     * @return string|null
     */
    public function getTestType()
    {
        return $this->container['test_type'];
    }

    /**
     * Sets test_type
     *
     * @param string|null $test_type test_type
     *
     * @return self
     */
    public function setTestType($test_type)
    {
        if (is_null($test_type)) {
            throw new \InvalidArgumentException('non-nullable test_type cannot be null');
        }
        $this->container['test_type'] = $test_type;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool|null
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool|null $default default
     *
     * @return self
     */
    public function setDefault($default)
    {
        if (is_null($default)) {
            throw new \InvalidArgumentException('non-nullable default cannot be null');
        }
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets test_duration_in_minutes
     *
     * @return int|null
     */
    public function getTestDurationInMinutes()
    {
        return $this->container['test_duration_in_minutes'];
    }

    /**
     * Sets test_duration_in_minutes
     *
     * @param int|null $test_duration_in_minutes test_duration_in_minutes
     *
     * @return self
     */
    public function setTestDurationInMinutes($test_duration_in_minutes)
    {
        if (is_null($test_duration_in_minutes)) {
            throw new \InvalidArgumentException('non-nullable test_duration_in_minutes cannot be null');
        }
        $this->container['test_duration_in_minutes'] = $test_duration_in_minutes;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets single_gross_amount
     *
     * @return int|null
     */
    public function getSingleGrossAmount()
    {
        return $this->container['single_gross_amount'];
    }

    /**
     * Sets single_gross_amount
     *
     * @param int|null $single_gross_amount single_gross_amount
     *
     * @return self
     */
    public function setSingleGrossAmount($single_gross_amount)
    {
        if (is_null($single_gross_amount)) {
            throw new \InvalidArgumentException('non-nullable single_gross_amount cannot be null');
        }
        $this->container['single_gross_amount'] = $single_gross_amount;

        return $this;
    }

    /**
     * Gets automatic_booking_confirmation
     *
     * @return bool|null
     */
    public function getAutomaticBookingConfirmation()
    {
        return $this->container['automatic_booking_confirmation'];
    }

    /**
     * Sets automatic_booking_confirmation
     *
     * @param bool|null $automatic_booking_confirmation automatic_booking_confirmation
     *
     * @return self
     */
    public function setAutomaticBookingConfirmation($automatic_booking_confirmation)
    {
        if (is_null($automatic_booking_confirmation)) {
            throw new \InvalidArgumentException('non-nullable automatic_booking_confirmation cannot be null');
        }
        $this->container['automatic_booking_confirmation'] = $automatic_booking_confirmation;

        return $this;
    }

    /**
     * Gets automatic_results_notification
     *
     * @return bool|null
     */
    public function getAutomaticResultsNotification()
    {
        return $this->container['automatic_results_notification'];
    }

    /**
     * Sets automatic_results_notification
     *
     * @param bool|null $automatic_results_notification automatic_results_notification
     *
     * @return self
     */
    public function setAutomaticResultsNotification($automatic_results_notification)
    {
        if (is_null($automatic_results_notification)) {
            throw new \InvalidArgumentException('non-nullable automatic_results_notification cannot be null');
        }
        $this->container['automatic_results_notification'] = $automatic_results_notification;

        return $this;
    }

    /**
     * Gets url_key
     *
     * @return string|null
     */
    public function getUrlKey()
    {
        return $this->container['url_key'];
    }

    /**
     * Sets url_key
     *
     * @param string|null $url_key url_key
     *
     * @return self
     */
    public function setUrlKey($url_key)
    {
        if (is_null($url_key)) {
            throw new \InvalidArgumentException('non-nullable url_key cannot be null');
        }
        $this->container['url_key'] = $url_key;

        return $this;
    }

    /**
     * Gets tax_percentage
     *
     * @return int|null
     */
    public function getTaxPercentage()
    {
        return $this->container['tax_percentage'];
    }

    /**
     * Sets tax_percentage
     *
     * @param int|null $tax_percentage tax_percentage
     *
     * @return self
     */
    public function setTaxPercentage($tax_percentage)
    {
        if (is_null($tax_percentage)) {
            throw new \InvalidArgumentException('non-nullable tax_percentage cannot be null');
        }
        $this->container['tax_percentage'] = $tax_percentage;

        return $this;
    }

    /**
     * Gets loinc
     *
     * @return string|null
     */
    public function getLoinc()
    {
        return $this->container['loinc'];
    }

    /**
     * Sets loinc
     *
     * @param string|null $loinc loinc
     *
     * @return self
     */
    public function setLoinc($loinc)
    {
        if (is_null($loinc)) {
            array_push($this->openAPINullablesSetToNull, 'loinc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loinc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($loinc) && (mb_strlen($loinc) > 20)) {
            throw new \InvalidArgumentException('invalid length for $loinc when calling ProductJsonld., must be smaller than or equal to 20.');
        }

        $this->container['loinc'] = $loinc;

        return $this;
    }

    /**
     * Gets loinc_display
     *
     * @return string|null
     */
    public function getLoincDisplay()
    {
        return $this->container['loinc_display'];
    }

    /**
     * Sets loinc_display
     *
     * @param string|null $loinc_display loinc_display
     *
     * @return self
     */
    public function setLoincDisplay($loinc_display)
    {
        if (is_null($loinc_display)) {
            array_push($this->openAPINullablesSetToNull, 'loinc_display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loinc_display', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loinc_display'] = $loinc_display;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        if (is_null($visibility)) {
            throw new \InvalidArgumentException('non-nullable visibility cannot be null');
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets max_bookings_per_order
     *
     * @return int|null
     */
    public function getMaxBookingsPerOrder()
    {
        return $this->container['max_bookings_per_order'];
    }

    /**
     * Sets max_bookings_per_order
     *
     * @param int|null $max_bookings_per_order max_bookings_per_order
     *
     * @return self
     */
    public function setMaxBookingsPerOrder($max_bookings_per_order)
    {
        if (is_null($max_bookings_per_order)) {
            array_push($this->openAPINullablesSetToNull, 'max_bookings_per_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_bookings_per_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_bookings_per_order) && ($max_bookings_per_order <= 0)) {
            throw new \InvalidArgumentException('invalid value for $max_bookings_per_order when calling ProductJsonld., must be bigger than 0.');
        }

        $this->container['max_bookings_per_order'] = $max_bookings_per_order;

        return $this;
    }

    /**
     * Gets minimum_patient_age
     *
     * @return int|null
     */
    public function getMinimumPatientAge()
    {
        return $this->container['minimum_patient_age'];
    }

    /**
     * Sets minimum_patient_age
     *
     * @param int|null $minimum_patient_age minimum_patient_age
     *
     * @return self
     */
    public function setMinimumPatientAge($minimum_patient_age)
    {
        if (is_null($minimum_patient_age)) {
            array_push($this->openAPINullablesSetToNull, 'minimum_patient_age');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimum_patient_age', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($minimum_patient_age) && ($minimum_patient_age < 0)) {
            throw new \InvalidArgumentException('invalid value for $minimum_patient_age when calling ProductJsonld., must be bigger than or equal to 0.');
        }

        $this->container['minimum_patient_age'] = $minimum_patient_age;

        return $this;
    }

    /**
     * Gets show_comment_field_for_customers
     *
     * @return bool|null
     */
    public function getShowCommentFieldForCustomers()
    {
        return $this->container['show_comment_field_for_customers'];
    }

    /**
     * Sets show_comment_field_for_customers
     *
     * @param bool|null $show_comment_field_for_customers show_comment_field_for_customers
     *
     * @return self
     */
    public function setShowCommentFieldForCustomers($show_comment_field_for_customers)
    {
        if (is_null($show_comment_field_for_customers)) {
            throw new \InvalidArgumentException('non-nullable show_comment_field_for_customers cannot be null');
        }
        $this->container['show_comment_field_for_customers'] = $show_comment_field_for_customers;

        return $this;
    }

    /**
     * Gets is_personal_id_required
     *
     * @return bool|null
     */
    public function getIsPersonalIdRequired()
    {
        return $this->container['is_personal_id_required'];
    }

    /**
     * Sets is_personal_id_required
     *
     * @param bool|null $is_personal_id_required is_personal_id_required
     *
     * @return self
     */
    public function setIsPersonalIdRequired($is_personal_id_required)
    {
        if (is_null($is_personal_id_required)) {
            throw new \InvalidArgumentException('non-nullable is_personal_id_required cannot be null');
        }
        $this->container['is_personal_id_required'] = $is_personal_id_required;

        return $this;
    }

    /**
     * Gets test_workflow_type
     *
     * @return string|null
     */
    public function getTestWorkflowType()
    {
        return $this->container['test_workflow_type'];
    }

    /**
     * Sets test_workflow_type
     *
     * @param string|null $test_workflow_type test_workflow_type
     *
     * @return self
     */
    public function setTestWorkflowType($test_workflow_type)
    {
        if (is_null($test_workflow_type)) {
            throw new \InvalidArgumentException('non-nullable test_workflow_type cannot be null');
        }
        $this->container['test_workflow_type'] = $test_workflow_type;

        return $this;
    }

    /**
     * Gets eligibility_reasons
     *
     * @return string[]|null
     */
    public function getEligibilityReasons()
    {
        return $this->container['eligibility_reasons'];
    }

    /**
     * Sets eligibility_reasons
     *
     * @param string[]|null $eligibility_reasons eligibility_reasons
     *
     * @return self
     */
    public function setEligibilityReasons($eligibility_reasons)
    {
        if (is_null($eligibility_reasons)) {
            array_push($this->openAPINullablesSetToNull, 'eligibility_reasons');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligibility_reasons', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eligibility_reasons'] = $eligibility_reasons;

        return $this;
    }

    /**
     * Gets internal_code_required
     *
     * @return bool|null
     */
    public function getInternalCodeRequired()
    {
        return $this->container['internal_code_required'];
    }

    /**
     * Sets internal_code_required
     *
     * @param bool|null $internal_code_required internal_code_required
     *
     * @return self
     */
    public function setInternalCodeRequired($internal_code_required)
    {
        if (is_null($internal_code_required)) {
            throw new \InvalidArgumentException('non-nullable internal_code_required cannot be null');
        }
        $this->container['internal_code_required'] = $internal_code_required;

        return $this;
    }

    /**
     * Gets health_insurance_policy_number_required
     *
     * @return bool|null
     */
    public function getHealthInsurancePolicyNumberRequired()
    {
        return $this->container['health_insurance_policy_number_required'];
    }

    /**
     * Sets health_insurance_policy_number_required
     *
     * @param bool|null $health_insurance_policy_number_required health_insurance_policy_number_required
     *
     * @return self
     */
    public function setHealthInsurancePolicyNumberRequired($health_insurance_policy_number_required)
    {
        if (is_null($health_insurance_policy_number_required)) {
            throw new \InvalidArgumentException('non-nullable health_insurance_policy_number_required cannot be null');
        }
        $this->container['health_insurance_policy_number_required'] = $health_insurance_policy_number_required;

        return $this;
    }

    /**
     * Gets health_insurance_company_number_required
     *
     * @return bool|null
     */
    public function getHealthInsuranceCompanyNumberRequired()
    {
        return $this->container['health_insurance_company_number_required'];
    }

    /**
     * Sets health_insurance_company_number_required
     *
     * @param bool|null $health_insurance_company_number_required health_insurance_company_number_required
     *
     * @return self
     */
    public function setHealthInsuranceCompanyNumberRequired($health_insurance_company_number_required)
    {
        if (is_null($health_insurance_company_number_required)) {
            throw new \InvalidArgumentException('non-nullable health_insurance_company_number_required cannot be null');
        }
        $this->container['health_insurance_company_number_required'] = $health_insurance_company_number_required;

        return $this;
    }

    /**
     * Gets _locale
     *
     * @return mixed|null
     */
    public function getLocale()
    {
        return $this->container['_locale'];
    }

    /**
     * Sets _locale
     *
     * @param mixed|null $_locale _locale
     *
     * @return self
     */
    public function setLocale($_locale)
    {
        if (is_null($_locale)) {
            array_push($this->openAPINullablesSetToNull, '_locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('_locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['_locale'] = $_locale;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return string|null
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param string|null $tenant tenant
     *
     * @return self
     */
    public function setTenant($tenant)
    {
        if (is_null($tenant)) {
            array_push($this->openAPINullablesSetToNull, 'tenant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets enriched_description
     *
     * @return string|null
     */
    public function getEnrichedDescription()
    {
        return $this->container['enriched_description'];
    }

    /**
     * Sets enriched_description
     *
     * @param string|null $enriched_description enriched_description
     *
     * @return self
     */
    public function setEnrichedDescription($enriched_description)
    {
        if (is_null($enriched_description)) {
            array_push($this->openAPINullablesSetToNull, 'enriched_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enriched_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enriched_description'] = $enriched_description;

        return $this;
    }

    /**
     * Gets vat_per_unit
     *
     * @return int|null
     */
    public function getVatPerUnit()
    {
        return $this->container['vat_per_unit'];
    }

    /**
     * Sets vat_per_unit
     *
     * @param int|null $vat_per_unit vat_per_unit
     *
     * @return self
     */
    public function setVatPerUnit($vat_per_unit)
    {
        if (is_null($vat_per_unit)) {
            array_push($this->openAPINullablesSetToNull, 'vat_per_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_per_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vat_per_unit'] = $vat_per_unit;

        return $this;
    }

    /**
     * Gets single_net_amount
     *
     * @return int|null
     */
    public function getSingleNetAmount()
    {
        return $this->container['single_net_amount'];
    }

    /**
     * Sets single_net_amount
     *
     * @param int|null $single_net_amount single_net_amount
     *
     * @return self
     */
    public function setSingleNetAmount($single_net_amount)
    {
        if (is_null($single_net_amount)) {
            array_push($this->openAPINullablesSetToNull, 'single_net_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('single_net_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['single_net_amount'] = $single_net_amount;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets visibility_public
     *
     * @return bool|null
     */
    public function getVisibilityPublic()
    {
        return $this->container['visibility_public'];
    }

    /**
     * Sets visibility_public
     *
     * @param bool|null $visibility_public visibility_public
     *
     * @return self
     */
    public function setVisibilityPublic($visibility_public)
    {
        if (is_null($visibility_public)) {
            throw new \InvalidArgumentException('non-nullable visibility_public cannot be null');
        }
        $this->container['visibility_public'] = $visibility_public;

        return $this;
    }

    /**
     * Gets visibility_private
     *
     * @return bool|null
     */
    public function getVisibilityPrivate()
    {
        return $this->container['visibility_private'];
    }

    /**
     * Sets visibility_private
     *
     * @param bool|null $visibility_private visibility_private
     *
     * @return self
     */
    public function setVisibilityPrivate($visibility_private)
    {
        if (is_null($visibility_private)) {
            throw new \InvalidArgumentException('non-nullable visibility_private cannot be null');
        }
        $this->container['visibility_private'] = $visibility_private;

        return $this;
    }

    /**
     * Gets visibility_archived
     *
     * @return bool|null
     */
    public function getVisibilityArchived()
    {
        return $this->container['visibility_archived'];
    }

    /**
     * Sets visibility_archived
     *
     * @param bool|null $visibility_archived visibility_archived
     *
     * @return self
     */
    public function setVisibilityArchived($visibility_archived)
    {
        if (is_null($visibility_archived)) {
            throw new \InvalidArgumentException('non-nullable visibility_archived cannot be null');
        }
        $this->container['visibility_archived'] = $visibility_archived;

        return $this;
    }

    /**
     * Gets personal_id_required
     *
     * @return bool|null
     */
    public function getPersonalIdRequired()
    {
        return $this->container['personal_id_required'];
    }

    /**
     * Sets personal_id_required
     *
     * @param bool|null $personal_id_required personal_id_required
     *
     * @return self
     */
    public function setPersonalIdRequired($personal_id_required)
    {
        if (is_null($personal_id_required)) {
            throw new \InvalidArgumentException('non-nullable personal_id_required cannot be null');
        }
        $this->container['personal_id_required'] = $personal_id_required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


