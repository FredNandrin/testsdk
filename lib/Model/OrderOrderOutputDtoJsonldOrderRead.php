<?php
/**
 * OrderOrderOutputDtoJsonldOrderRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderOrderOutputDtoJsonldOrderRead Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderOrderOutputDtoJsonldOrderRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order.OrderOutputDto.jsonld-order.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_context' => '\OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext',
        'at_id' => 'string',
        'at_type' => 'string',
        'uuid' => 'string',
        'order_code' => 'string',
        'redirect_url' => 'string',
        'payment_status' => 'string',
        'status' => 'string',
        'order_status' => 'string',
        'selected_payment_option' => 'string',
        'payment_options' => 'string[]',
        'time' => '\DateTime',
        'total_product_gross_amount' => 'int',
        'product_name' => 'string',
        'product_single_gross_amount' => 'int',
        'customer_first_name' => 'string',
        'voucher_code' => 'string',
        'total_gross_amount' => 'int',
        'ical' => 'string',
        'patient_events' => '\OpenAPI\Client\Model\PatientEventStatusDtoJsonldOrderRead[]',
        'corona_tests' => '\OpenAPI\Client\Model\PatientEventStatusDtoJsonldOrderRead[]',
        'draft_expire_in' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_context' => null,
        'at_id' => null,
        'at_type' => null,
        'uuid' => null,
        'order_code' => null,
        'redirect_url' => null,
        'payment_status' => null,
        'status' => null,
        'order_status' => null,
        'selected_payment_option' => null,
        'payment_options' => null,
        'time' => 'date-time',
        'total_product_gross_amount' => null,
        'product_name' => null,
        'product_single_gross_amount' => null,
        'customer_first_name' => null,
        'voucher_code' => null,
        'total_gross_amount' => null,
        'ical' => null,
        'patient_events' => null,
        'corona_tests' => null,
        'draft_expire_in' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_context' => false,
		'at_id' => false,
		'at_type' => false,
		'uuid' => false,
		'order_code' => false,
		'redirect_url' => true,
		'payment_status' => false,
		'status' => false,
		'order_status' => true,
		'selected_payment_option' => true,
		'payment_options' => false,
		'time' => false,
		'total_product_gross_amount' => false,
		'product_name' => false,
		'product_single_gross_amount' => false,
		'customer_first_name' => false,
		'voucher_code' => false,
		'total_gross_amount' => false,
		'ical' => true,
		'patient_events' => false,
		'corona_tests' => false,
		'draft_expire_in' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_context' => '@context',
        'at_id' => '@id',
        'at_type' => '@type',
        'uuid' => 'uuid',
        'order_code' => 'orderCode',
        'redirect_url' => 'redirectUrl',
        'payment_status' => 'paymentStatus',
        'status' => 'status',
        'order_status' => 'orderStatus',
        'selected_payment_option' => 'selectedPaymentOption',
        'payment_options' => 'paymentOptions',
        'time' => 'time',
        'total_product_gross_amount' => 'TotalProductGrossAmount',
        'product_name' => 'productName',
        'product_single_gross_amount' => 'productSingleGrossAmount',
        'customer_first_name' => 'customerFirstName',
        'voucher_code' => 'voucherCode',
        'total_gross_amount' => 'TotalGrossAmount',
        'ical' => 'ical',
        'patient_events' => 'patientEvents',
        'corona_tests' => 'coronaTests',
        'draft_expire_in' => 'draftExpireIn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_context' => 'setAtContext',
        'at_id' => 'setAtId',
        'at_type' => 'setAtType',
        'uuid' => 'setUuid',
        'order_code' => 'setOrderCode',
        'redirect_url' => 'setRedirectUrl',
        'payment_status' => 'setPaymentStatus',
        'status' => 'setStatus',
        'order_status' => 'setOrderStatus',
        'selected_payment_option' => 'setSelectedPaymentOption',
        'payment_options' => 'setPaymentOptions',
        'time' => 'setTime',
        'total_product_gross_amount' => 'setTotalProductGrossAmount',
        'product_name' => 'setProductName',
        'product_single_gross_amount' => 'setProductSingleGrossAmount',
        'customer_first_name' => 'setCustomerFirstName',
        'voucher_code' => 'setVoucherCode',
        'total_gross_amount' => 'setTotalGrossAmount',
        'ical' => 'setIcal',
        'patient_events' => 'setPatientEvents',
        'corona_tests' => 'setCoronaTests',
        'draft_expire_in' => 'setDraftExpireIn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_context' => 'getAtContext',
        'at_id' => 'getAtId',
        'at_type' => 'getAtType',
        'uuid' => 'getUuid',
        'order_code' => 'getOrderCode',
        'redirect_url' => 'getRedirectUrl',
        'payment_status' => 'getPaymentStatus',
        'status' => 'getStatus',
        'order_status' => 'getOrderStatus',
        'selected_payment_option' => 'getSelectedPaymentOption',
        'payment_options' => 'getPaymentOptions',
        'time' => 'getTime',
        'total_product_gross_amount' => 'getTotalProductGrossAmount',
        'product_name' => 'getProductName',
        'product_single_gross_amount' => 'getProductSingleGrossAmount',
        'customer_first_name' => 'getCustomerFirstName',
        'voucher_code' => 'getVoucherCode',
        'total_gross_amount' => 'getTotalGrossAmount',
        'ical' => 'getIcal',
        'patient_events' => 'getPatientEvents',
        'corona_tests' => 'getCoronaTests',
        'draft_expire_in' => 'getDraftExpireIn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_context', $data ?? [], null);
        $this->setIfExists('at_id', $data ?? [], null);
        $this->setIfExists('at_type', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('order_code', $data ?? [], null);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('selected_payment_option', $data ?? [], null);
        $this->setIfExists('payment_options', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('total_product_gross_amount', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('product_single_gross_amount', $data ?? [], null);
        $this->setIfExists('customer_first_name', $data ?? [], null);
        $this->setIfExists('voucher_code', $data ?? [], null);
        $this->setIfExists('total_gross_amount', $data ?? [], null);
        $this->setIfExists('ical', $data ?? [], null);
        $this->setIfExists('patient_events', $data ?? [], null);
        $this->setIfExists('corona_tests', $data ?? [], null);
        $this->setIfExists('draft_expire_in', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_context
     *
     * @return \OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext|null
     */
    public function getAtContext()
    {
        return $this->container['at_context'];
    }

    /**
     * Sets at_context
     *
     * @param \OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext|null $at_context at_context
     *
     * @return self
     */
    public function setAtContext($at_context)
    {
        if (is_null($at_context)) {
            throw new \InvalidArgumentException('non-nullable at_context cannot be null');
        }
        $this->container['at_context'] = $at_context;

        return $this;
    }

    /**
     * Gets at_id
     *
     * @return string|null
     */
    public function getAtId()
    {
        return $this->container['at_id'];
    }

    /**
     * Sets at_id
     *
     * @param string|null $at_id at_id
     *
     * @return self
     */
    public function setAtId($at_id)
    {
        if (is_null($at_id)) {
            throw new \InvalidArgumentException('non-nullable at_id cannot be null');
        }
        $this->container['at_id'] = $at_id;

        return $this;
    }

    /**
     * Gets at_type
     *
     * @return string|null
     */
    public function getAtType()
    {
        return $this->container['at_type'];
    }

    /**
     * Sets at_type
     *
     * @param string|null $at_type at_type
     *
     * @return self
     */
    public function setAtType($at_type)
    {
        if (is_null($at_type)) {
            throw new \InvalidArgumentException('non-nullable at_type cannot be null');
        }
        $this->container['at_type'] = $at_type;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets order_code
     *
     * @return string|null
     */
    public function getOrderCode()
    {
        return $this->container['order_code'];
    }

    /**
     * Sets order_code
     *
     * @param string|null $order_code order_code
     *
     * @return self
     */
    public function setOrderCode($order_code)
    {
        if (is_null($order_code)) {
            throw new \InvalidArgumentException('non-nullable order_code cannot be null');
        }
        $this->container['order_code'] = $order_code;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string|null $redirect_url redirect_url
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status payment_status
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string|null $order_status order_status
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            array_push($this->openAPINullablesSetToNull, 'order_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets selected_payment_option
     *
     * @return string|null
     */
    public function getSelectedPaymentOption()
    {
        return $this->container['selected_payment_option'];
    }

    /**
     * Sets selected_payment_option
     *
     * @param string|null $selected_payment_option selected_payment_option
     *
     * @return self
     */
    public function setSelectedPaymentOption($selected_payment_option)
    {
        if (is_null($selected_payment_option)) {
            array_push($this->openAPINullablesSetToNull, 'selected_payment_option');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('selected_payment_option', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['selected_payment_option'] = $selected_payment_option;

        return $this;
    }

    /**
     * Gets payment_options
     *
     * @return string[]|null
     */
    public function getPaymentOptions()
    {
        return $this->container['payment_options'];
    }

    /**
     * Sets payment_options
     *
     * @param string[]|null $payment_options payment_options
     *
     * @return self
     */
    public function setPaymentOptions($payment_options)
    {
        if (is_null($payment_options)) {
            throw new \InvalidArgumentException('non-nullable payment_options cannot be null');
        }
        $this->container['payment_options'] = $payment_options;

        return $this;
    }

    /**
     * Gets time
     *
     * @return \DateTime|null
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param \DateTime|null $time time
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets total_product_gross_amount
     *
     * @return int|null
     */
    public function getTotalProductGrossAmount()
    {
        return $this->container['total_product_gross_amount'];
    }

    /**
     * Sets total_product_gross_amount
     *
     * @param int|null $total_product_gross_amount total_product_gross_amount
     *
     * @return self
     */
    public function setTotalProductGrossAmount($total_product_gross_amount)
    {
        if (is_null($total_product_gross_amount)) {
            throw new \InvalidArgumentException('non-nullable total_product_gross_amount cannot be null');
        }
        $this->container['total_product_gross_amount'] = $total_product_gross_amount;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name product_name
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            throw new \InvalidArgumentException('non-nullable product_name cannot be null');
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_single_gross_amount
     *
     * @return int|null
     */
    public function getProductSingleGrossAmount()
    {
        return $this->container['product_single_gross_amount'];
    }

    /**
     * Sets product_single_gross_amount
     *
     * @param int|null $product_single_gross_amount product_single_gross_amount
     *
     * @return self
     */
    public function setProductSingleGrossAmount($product_single_gross_amount)
    {
        if (is_null($product_single_gross_amount)) {
            throw new \InvalidArgumentException('non-nullable product_single_gross_amount cannot be null');
        }
        $this->container['product_single_gross_amount'] = $product_single_gross_amount;

        return $this;
    }

    /**
     * Gets customer_first_name
     *
     * @return string|null
     */
    public function getCustomerFirstName()
    {
        return $this->container['customer_first_name'];
    }

    /**
     * Sets customer_first_name
     *
     * @param string|null $customer_first_name customer_first_name
     *
     * @return self
     */
    public function setCustomerFirstName($customer_first_name)
    {
        if (is_null($customer_first_name)) {
            throw new \InvalidArgumentException('non-nullable customer_first_name cannot be null');
        }
        $this->container['customer_first_name'] = $customer_first_name;

        return $this;
    }

    /**
     * Gets voucher_code
     *
     * @return string|null
     */
    public function getVoucherCode()
    {
        return $this->container['voucher_code'];
    }

    /**
     * Sets voucher_code
     *
     * @param string|null $voucher_code voucher_code
     *
     * @return self
     */
    public function setVoucherCode($voucher_code)
    {
        if (is_null($voucher_code)) {
            throw new \InvalidArgumentException('non-nullable voucher_code cannot be null');
        }
        $this->container['voucher_code'] = $voucher_code;

        return $this;
    }

    /**
     * Gets total_gross_amount
     *
     * @return int|null
     */
    public function getTotalGrossAmount()
    {
        return $this->container['total_gross_amount'];
    }

    /**
     * Sets total_gross_amount
     *
     * @param int|null $total_gross_amount total_gross_amount
     *
     * @return self
     */
    public function setTotalGrossAmount($total_gross_amount)
    {
        if (is_null($total_gross_amount)) {
            throw new \InvalidArgumentException('non-nullable total_gross_amount cannot be null');
        }
        $this->container['total_gross_amount'] = $total_gross_amount;

        return $this;
    }

    /**
     * Gets ical
     *
     * @return string|null
     */
    public function getIcal()
    {
        return $this->container['ical'];
    }

    /**
     * Sets ical
     *
     * @param string|null $ical ical
     *
     * @return self
     */
    public function setIcal($ical)
    {
        if (is_null($ical)) {
            array_push($this->openAPINullablesSetToNull, 'ical');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ical', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ical'] = $ical;

        return $this;
    }

    /**
     * Gets patient_events
     *
     * @return \OpenAPI\Client\Model\PatientEventStatusDtoJsonldOrderRead[]|null
     */
    public function getPatientEvents()
    {
        return $this->container['patient_events'];
    }

    /**
     * Sets patient_events
     *
     * @param \OpenAPI\Client\Model\PatientEventStatusDtoJsonldOrderRead[]|null $patient_events patient_events
     *
     * @return self
     */
    public function setPatientEvents($patient_events)
    {
        if (is_null($patient_events)) {
            throw new \InvalidArgumentException('non-nullable patient_events cannot be null');
        }
        $this->container['patient_events'] = $patient_events;

        return $this;
    }

    /**
     * Gets corona_tests
     *
     * @return \OpenAPI\Client\Model\PatientEventStatusDtoJsonldOrderRead[]|null
     */
    public function getCoronaTests()
    {
        return $this->container['corona_tests'];
    }

    /**
     * Sets corona_tests
     *
     * @param \OpenAPI\Client\Model\PatientEventStatusDtoJsonldOrderRead[]|null $corona_tests corona_tests
     *
     * @return self
     */
    public function setCoronaTests($corona_tests)
    {
        if (is_null($corona_tests)) {
            throw new \InvalidArgumentException('non-nullable corona_tests cannot be null');
        }
        $this->container['corona_tests'] = $corona_tests;

        return $this;
    }

    /**
     * Gets draft_expire_in
     *
     * @return int|null
     */
    public function getDraftExpireIn()
    {
        return $this->container['draft_expire_in'];
    }

    /**
     * Sets draft_expire_in
     *
     * @param int|null $draft_expire_in draft_expire_in
     *
     * @return self
     */
    public function setDraftExpireIn($draft_expire_in)
    {
        if (is_null($draft_expire_in)) {
            throw new \InvalidArgumentException('non-nullable draft_expire_in cannot be null');
        }
        $this->container['draft_expire_in'] = $draft_expire_in;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


