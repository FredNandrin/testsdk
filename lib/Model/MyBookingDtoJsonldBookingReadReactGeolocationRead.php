<?php
/**
 * MyBookingDtoJsonldBookingReadReactGeolocationRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MyBookingDtoJsonldBookingReadReactGeolocationRead Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MyBookingDtoJsonldBookingReadReactGeolocationRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MyBookingDto.jsonld-booking.read_react_geolocation.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_context' => '\OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext',
        'at_id' => 'string',
        'at_type' => 'string',
        'uuid' => 'string',
        'status' => 'string',
        'booking_time' => '\DateTime',
        'appointment_time' => '\DateTime',
        'product' => '\OpenAPI\Client\Model\ProductDtoJsonldBookingReadReactGeolocationRead',
        'biomarkers' => 'string[]',
        'test_code' => 'string',
        'location' => '\OpenAPI\Client\Model\LocationOutputDtoJsonldBookingReadReactGeolocationRead',
        'results' => 'string[]',
        'test_type' => 'string',
        'test_start_time' => '\DateTime',
        'test_end_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_context' => null,
        'at_id' => null,
        'at_type' => null,
        'uuid' => null,
        'status' => null,
        'booking_time' => 'date-time',
        'appointment_time' => 'date-time',
        'product' => null,
        'biomarkers' => null,
        'test_code' => null,
        'location' => null,
        'results' => null,
        'test_type' => null,
        'test_start_time' => 'date-time',
        'test_end_time' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_context' => false,
		'at_id' => false,
		'at_type' => false,
		'uuid' => true,
		'status' => true,
		'booking_time' => true,
		'appointment_time' => true,
		'product' => true,
		'biomarkers' => true,
		'test_code' => true,
		'location' => true,
		'results' => false,
		'test_type' => false,
		'test_start_time' => true,
		'test_end_time' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_context' => '@context',
        'at_id' => '@id',
        'at_type' => '@type',
        'uuid' => 'uuid',
        'status' => 'status',
        'booking_time' => 'bookingTime',
        'appointment_time' => 'appointmentTime',
        'product' => 'product',
        'biomarkers' => 'biomarkers',
        'test_code' => 'testCode',
        'location' => 'location',
        'results' => 'results',
        'test_type' => 'testType',
        'test_start_time' => 'testStartTime',
        'test_end_time' => 'testEndTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_context' => 'setAtContext',
        'at_id' => 'setAtId',
        'at_type' => 'setAtType',
        'uuid' => 'setUuid',
        'status' => 'setStatus',
        'booking_time' => 'setBookingTime',
        'appointment_time' => 'setAppointmentTime',
        'product' => 'setProduct',
        'biomarkers' => 'setBiomarkers',
        'test_code' => 'setTestCode',
        'location' => 'setLocation',
        'results' => 'setResults',
        'test_type' => 'setTestType',
        'test_start_time' => 'setTestStartTime',
        'test_end_time' => 'setTestEndTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_context' => 'getAtContext',
        'at_id' => 'getAtId',
        'at_type' => 'getAtType',
        'uuid' => 'getUuid',
        'status' => 'getStatus',
        'booking_time' => 'getBookingTime',
        'appointment_time' => 'getAppointmentTime',
        'product' => 'getProduct',
        'biomarkers' => 'getBiomarkers',
        'test_code' => 'getTestCode',
        'location' => 'getLocation',
        'results' => 'getResults',
        'test_type' => 'getTestType',
        'test_start_time' => 'getTestStartTime',
        'test_end_time' => 'getTestEndTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_context', $data ?? [], null);
        $this->setIfExists('at_id', $data ?? [], null);
        $this->setIfExists('at_type', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('booking_time', $data ?? [], null);
        $this->setIfExists('appointment_time', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('biomarkers', $data ?? [], null);
        $this->setIfExists('test_code', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('results', $data ?? [], null);
        $this->setIfExists('test_type', $data ?? [], null);
        $this->setIfExists('test_start_time', $data ?? [], null);
        $this->setIfExists('test_end_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_context
     *
     * @return \OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext|null
     */
    public function getAtContext()
    {
        return $this->container['at_context'];
    }

    /**
     * Sets at_context
     *
     * @param \OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext|null $at_context at_context
     *
     * @return self
     */
    public function setAtContext($at_context)
    {
        if (is_null($at_context)) {
            throw new \InvalidArgumentException('non-nullable at_context cannot be null');
        }
        $this->container['at_context'] = $at_context;

        return $this;
    }

    /**
     * Gets at_id
     *
     * @return string|null
     */
    public function getAtId()
    {
        return $this->container['at_id'];
    }

    /**
     * Sets at_id
     *
     * @param string|null $at_id at_id
     *
     * @return self
     */
    public function setAtId($at_id)
    {
        if (is_null($at_id)) {
            throw new \InvalidArgumentException('non-nullable at_id cannot be null');
        }
        $this->container['at_id'] = $at_id;

        return $this;
    }

    /**
     * Gets at_type
     *
     * @return string|null
     */
    public function getAtType()
    {
        return $this->container['at_type'];
    }

    /**
     * Sets at_type
     *
     * @param string|null $at_type at_type
     *
     * @return self
     */
    public function setAtType($at_type)
    {
        if (is_null($at_type)) {
            throw new \InvalidArgumentException('non-nullable at_type cannot be null');
        }
        $this->container['at_type'] = $at_type;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            array_push($this->openAPINullablesSetToNull, 'uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets booking_time
     *
     * @return \DateTime|null
     */
    public function getBookingTime()
    {
        return $this->container['booking_time'];
    }

    /**
     * Sets booking_time
     *
     * @param \DateTime|null $booking_time booking_time
     *
     * @return self
     */
    public function setBookingTime($booking_time)
    {
        if (is_null($booking_time)) {
            array_push($this->openAPINullablesSetToNull, 'booking_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('booking_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['booking_time'] = $booking_time;

        return $this;
    }

    /**
     * Gets appointment_time
     *
     * @return \DateTime|null
     */
    public function getAppointmentTime()
    {
        return $this->container['appointment_time'];
    }

    /**
     * Sets appointment_time
     *
     * @param \DateTime|null $appointment_time appointment_time
     *
     * @return self
     */
    public function setAppointmentTime($appointment_time)
    {
        if (is_null($appointment_time)) {
            array_push($this->openAPINullablesSetToNull, 'appointment_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appointment_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appointment_time'] = $appointment_time;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \OpenAPI\Client\Model\ProductDtoJsonldBookingReadReactGeolocationRead|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \OpenAPI\Client\Model\ProductDtoJsonldBookingReadReactGeolocationRead|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            array_push($this->openAPINullablesSetToNull, 'product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets biomarkers
     *
     * @return string[]|null
     */
    public function getBiomarkers()
    {
        return $this->container['biomarkers'];
    }

    /**
     * Sets biomarkers
     *
     * @param string[]|null $biomarkers biomarkers
     *
     * @return self
     */
    public function setBiomarkers($biomarkers)
    {
        if (is_null($biomarkers)) {
            array_push($this->openAPINullablesSetToNull, 'biomarkers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('biomarkers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['biomarkers'] = $biomarkers;

        return $this;
    }

    /**
     * Gets test_code
     *
     * @return string|null
     */
    public function getTestCode()
    {
        return $this->container['test_code'];
    }

    /**
     * Sets test_code
     *
     * @param string|null $test_code test_code
     *
     * @return self
     */
    public function setTestCode($test_code)
    {
        if (is_null($test_code)) {
            array_push($this->openAPINullablesSetToNull, 'test_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_code'] = $test_code;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\LocationOutputDtoJsonldBookingReadReactGeolocationRead|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\LocationOutputDtoJsonldBookingReadReactGeolocationRead|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets results
     *
     * @return string[]|null
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param string[]|null $results results
     *
     * @return self
     */
    public function setResults($results)
    {
        if (is_null($results)) {
            throw new \InvalidArgumentException('non-nullable results cannot be null');
        }
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets test_type
     *
     * @return string|null
     */
    public function getTestType()
    {
        return $this->container['test_type'];
    }

    /**
     * Sets test_type
     *
     * @param string|null $test_type test_type
     *
     * @return self
     */
    public function setTestType($test_type)
    {
        if (is_null($test_type)) {
            throw new \InvalidArgumentException('non-nullable test_type cannot be null');
        }
        $this->container['test_type'] = $test_type;

        return $this;
    }

    /**
     * Gets test_start_time
     *
     * @return \DateTime|null
     */
    public function getTestStartTime()
    {
        return $this->container['test_start_time'];
    }

    /**
     * Sets test_start_time
     *
     * @param \DateTime|null $test_start_time test_start_time
     *
     * @return self
     */
    public function setTestStartTime($test_start_time)
    {
        if (is_null($test_start_time)) {
            array_push($this->openAPINullablesSetToNull, 'test_start_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_start_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_start_time'] = $test_start_time;

        return $this;
    }

    /**
     * Gets test_end_time
     *
     * @return \DateTime|null
     */
    public function getTestEndTime()
    {
        return $this->container['test_end_time'];
    }

    /**
     * Sets test_end_time
     *
     * @param \DateTime|null $test_end_time test_end_time
     *
     * @return self
     */
    public function setTestEndTime($test_end_time)
    {
        if (is_null($test_end_time)) {
            array_push($this->openAPINullablesSetToNull, 'test_end_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_end_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_end_time'] = $test_end_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


