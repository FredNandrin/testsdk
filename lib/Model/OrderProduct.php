<?php
/**
 * OrderProduct
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderProduct Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product' => 'string',
        'order' => 'string',
        'name' => 'string',
        'vat_per_unit' => 'int',
        'test_type' => 'string',
        'test_duration_in_minutes' => 'int',
        'patient_events' => 'string[]',
        'description' => 'string',
        'single_gross_amount' => 'int',
        'uuid' => 'string',
        'tenant' => 'string',
        'quantity' => 'int',
        'total_gross_amount' => 'int',
        'total_net_amount' => 'int',
        'single_net_amount' => 'int',
        'total_vat_amount' => 'int',
        'order_uuid' => 'string',
        'tax_percentage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product' => 'iri-reference',
        'order' => 'iri-reference',
        'name' => null,
        'vat_per_unit' => null,
        'test_type' => null,
        'test_duration_in_minutes' => null,
        'patient_events' => 'iri-reference',
        'description' => null,
        'single_gross_amount' => null,
        'uuid' => null,
        'tenant' => 'iri-reference',
        'quantity' => null,
        'total_gross_amount' => null,
        'total_net_amount' => null,
        'single_net_amount' => null,
        'total_vat_amount' => null,
        'order_uuid' => null,
        'tax_percentage' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product' => true,
		'order' => true,
		'name' => false,
		'vat_per_unit' => true,
		'test_type' => false,
		'test_duration_in_minutes' => true,
		'patient_events' => false,
		'description' => true,
		'single_gross_amount' => true,
		'uuid' => false,
		'tenant' => true,
		'quantity' => false,
		'total_gross_amount' => true,
		'total_net_amount' => true,
		'single_net_amount' => false,
		'total_vat_amount' => false,
		'order_uuid' => true,
		'tax_percentage' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product' => 'product',
        'order' => 'order',
        'name' => 'name',
        'vat_per_unit' => 'vatPerUnit',
        'test_type' => 'testType',
        'test_duration_in_minutes' => 'testDurationInMinutes',
        'patient_events' => 'patientEvents',
        'description' => 'description',
        'single_gross_amount' => 'singleGrossAmount',
        'uuid' => 'uuid',
        'tenant' => 'tenant',
        'quantity' => 'quantity',
        'total_gross_amount' => 'totalGrossAmount',
        'total_net_amount' => 'totalNetAmount',
        'single_net_amount' => 'singleNetAmount',
        'total_vat_amount' => 'totalVatAmount',
        'order_uuid' => 'orderUuid',
        'tax_percentage' => 'taxPercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product' => 'setProduct',
        'order' => 'setOrder',
        'name' => 'setName',
        'vat_per_unit' => 'setVatPerUnit',
        'test_type' => 'setTestType',
        'test_duration_in_minutes' => 'setTestDurationInMinutes',
        'patient_events' => 'setPatientEvents',
        'description' => 'setDescription',
        'single_gross_amount' => 'setSingleGrossAmount',
        'uuid' => 'setUuid',
        'tenant' => 'setTenant',
        'quantity' => 'setQuantity',
        'total_gross_amount' => 'setTotalGrossAmount',
        'total_net_amount' => 'setTotalNetAmount',
        'single_net_amount' => 'setSingleNetAmount',
        'total_vat_amount' => 'setTotalVatAmount',
        'order_uuid' => 'setOrderUuid',
        'tax_percentage' => 'setTaxPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product' => 'getProduct',
        'order' => 'getOrder',
        'name' => 'getName',
        'vat_per_unit' => 'getVatPerUnit',
        'test_type' => 'getTestType',
        'test_duration_in_minutes' => 'getTestDurationInMinutes',
        'patient_events' => 'getPatientEvents',
        'description' => 'getDescription',
        'single_gross_amount' => 'getSingleGrossAmount',
        'uuid' => 'getUuid',
        'tenant' => 'getTenant',
        'quantity' => 'getQuantity',
        'total_gross_amount' => 'getTotalGrossAmount',
        'total_net_amount' => 'getTotalNetAmount',
        'single_net_amount' => 'getSingleNetAmount',
        'total_vat_amount' => 'getTotalVatAmount',
        'order_uuid' => 'getOrderUuid',
        'tax_percentage' => 'getTaxPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('vat_per_unit', $data ?? [], null);
        $this->setIfExists('test_type', $data ?? [], null);
        $this->setIfExists('test_duration_in_minutes', $data ?? [], null);
        $this->setIfExists('patient_events', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('single_gross_amount', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('tenant', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('total_gross_amount', $data ?? [], null);
        $this->setIfExists('total_net_amount', $data ?? [], null);
        $this->setIfExists('single_net_amount', $data ?? [], null);
        $this->setIfExists('total_vat_amount', $data ?? [], null);
        $this->setIfExists('order_uuid', $data ?? [], null);
        $this->setIfExists('tax_percentage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            array_push($this->openAPINullablesSetToNull, 'product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vat_per_unit
     *
     * @return int|null
     */
    public function getVatPerUnit()
    {
        return $this->container['vat_per_unit'];
    }

    /**
     * Sets vat_per_unit
     *
     * @param int|null $vat_per_unit vat_per_unit
     *
     * @return self
     */
    public function setVatPerUnit($vat_per_unit)
    {
        if (is_null($vat_per_unit)) {
            array_push($this->openAPINullablesSetToNull, 'vat_per_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_per_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vat_per_unit'] = $vat_per_unit;

        return $this;
    }

    /**
     * Gets test_type
     *
     * @return string|null
     */
    public function getTestType()
    {
        return $this->container['test_type'];
    }

    /**
     * Sets test_type
     *
     * @param string|null $test_type test_type
     *
     * @return self
     */
    public function setTestType($test_type)
    {
        if (is_null($test_type)) {
            throw new \InvalidArgumentException('non-nullable test_type cannot be null');
        }
        $this->container['test_type'] = $test_type;

        return $this;
    }

    /**
     * Gets test_duration_in_minutes
     *
     * @return int|null
     */
    public function getTestDurationInMinutes()
    {
        return $this->container['test_duration_in_minutes'];
    }

    /**
     * Sets test_duration_in_minutes
     *
     * @param int|null $test_duration_in_minutes test_duration_in_minutes
     *
     * @return self
     */
    public function setTestDurationInMinutes($test_duration_in_minutes)
    {
        if (is_null($test_duration_in_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'test_duration_in_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_duration_in_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_duration_in_minutes'] = $test_duration_in_minutes;

        return $this;
    }

    /**
     * Gets patient_events
     *
     * @return string[]|null
     */
    public function getPatientEvents()
    {
        return $this->container['patient_events'];
    }

    /**
     * Sets patient_events
     *
     * @param string[]|null $patient_events patient_events
     *
     * @return self
     */
    public function setPatientEvents($patient_events)
    {
        if (is_null($patient_events)) {
            throw new \InvalidArgumentException('non-nullable patient_events cannot be null');
        }
        $this->container['patient_events'] = $patient_events;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets single_gross_amount
     *
     * @return int|null
     */
    public function getSingleGrossAmount()
    {
        return $this->container['single_gross_amount'];
    }

    /**
     * Sets single_gross_amount
     *
     * @param int|null $single_gross_amount single_gross_amount
     *
     * @return self
     */
    public function setSingleGrossAmount($single_gross_amount)
    {
        if (is_null($single_gross_amount)) {
            array_push($this->openAPINullablesSetToNull, 'single_gross_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('single_gross_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['single_gross_amount'] = $single_gross_amount;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return string|null
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param string|null $tenant tenant
     *
     * @return self
     */
    public function setTenant($tenant)
    {
        if (is_null($tenant)) {
            array_push($this->openAPINullablesSetToNull, 'tenant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets total_gross_amount
     *
     * @return int|null
     */
    public function getTotalGrossAmount()
    {
        return $this->container['total_gross_amount'];
    }

    /**
     * Sets total_gross_amount
     *
     * @param int|null $total_gross_amount total_gross_amount
     *
     * @return self
     */
    public function setTotalGrossAmount($total_gross_amount)
    {
        if (is_null($total_gross_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_gross_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_gross_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_gross_amount'] = $total_gross_amount;

        return $this;
    }

    /**
     * Gets total_net_amount
     *
     * @return int|null
     */
    public function getTotalNetAmount()
    {
        return $this->container['total_net_amount'];
    }

    /**
     * Sets total_net_amount
     *
     * @param int|null $total_net_amount total_net_amount
     *
     * @return self
     */
    public function setTotalNetAmount($total_net_amount)
    {
        if (is_null($total_net_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_net_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_net_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_net_amount'] = $total_net_amount;

        return $this;
    }

    /**
     * Gets single_net_amount
     *
     * @return int|null
     */
    public function getSingleNetAmount()
    {
        return $this->container['single_net_amount'];
    }

    /**
     * Sets single_net_amount
     *
     * @param int|null $single_net_amount single_net_amount
     *
     * @return self
     */
    public function setSingleNetAmount($single_net_amount)
    {
        if (is_null($single_net_amount)) {
            throw new \InvalidArgumentException('non-nullable single_net_amount cannot be null');
        }
        $this->container['single_net_amount'] = $single_net_amount;

        return $this;
    }

    /**
     * Gets total_vat_amount
     *
     * @return int|null
     */
    public function getTotalVatAmount()
    {
        return $this->container['total_vat_amount'];
    }

    /**
     * Sets total_vat_amount
     *
     * @param int|null $total_vat_amount total_vat_amount
     *
     * @return self
     */
    public function setTotalVatAmount($total_vat_amount)
    {
        if (is_null($total_vat_amount)) {
            throw new \InvalidArgumentException('non-nullable total_vat_amount cannot be null');
        }
        $this->container['total_vat_amount'] = $total_vat_amount;

        return $this;
    }

    /**
     * Gets order_uuid
     *
     * @return string|null
     */
    public function getOrderUuid()
    {
        return $this->container['order_uuid'];
    }

    /**
     * Sets order_uuid
     *
     * @param string|null $order_uuid order_uuid
     *
     * @return self
     */
    public function setOrderUuid($order_uuid)
    {
        if (is_null($order_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'order_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_uuid'] = $order_uuid;

        return $this;
    }

    /**
     * Gets tax_percentage
     *
     * @return float|null
     */
    public function getTaxPercentage()
    {
        return $this->container['tax_percentage'];
    }

    /**
     * Sets tax_percentage
     *
     * @param float|null $tax_percentage tax_percentage
     *
     * @return self
     */
    public function setTaxPercentage($tax_percentage)
    {
        if (is_null($tax_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'tax_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_percentage'] = $tax_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


