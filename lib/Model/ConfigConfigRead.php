<?php
/**
 * ConfigConfigRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConfigConfigRead Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConfigConfigRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Config-config.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_url' => 'string',
        'url_imprint' => 'string',
        'url_homepage' => 'string',
        'url_privacy' => 'string',
        'provider_name' => 'string',
        'background_image_path' => 'string',
        'logo_path' => 'string',
        'primary_color' => 'string',
        'secondary_color' => 'string',
        'font_family' => 'string',
        'header_font_family' => 'string',
        'button_color' => 'string',
        'is_personal_id_required' => 'bool',
        'punchline' => 'string',
        'google_tag_manager' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_url' => null,
        'url_imprint' => null,
        'url_homepage' => null,
        'url_privacy' => null,
        'provider_name' => null,
        'background_image_path' => null,
        'logo_path' => null,
        'primary_color' => null,
        'secondary_color' => null,
        'font_family' => null,
        'header_font_family' => null,
        'button_color' => null,
        'is_personal_id_required' => null,
        'punchline' => null,
        'google_tag_manager' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base_url' => true,
		'url_imprint' => true,
		'url_homepage' => true,
		'url_privacy' => true,
		'provider_name' => true,
		'background_image_path' => true,
		'logo_path' => true,
		'primary_color' => true,
		'secondary_color' => true,
		'font_family' => true,
		'header_font_family' => true,
		'button_color' => true,
		'is_personal_id_required' => false,
		'punchline' => true,
		'google_tag_manager' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_url' => 'baseUrl',
        'url_imprint' => 'urlImprint',
        'url_homepage' => 'urlHomepage',
        'url_privacy' => 'urlPrivacy',
        'provider_name' => 'providerName',
        'background_image_path' => 'backgroundImagePath',
        'logo_path' => 'logoPath',
        'primary_color' => 'primaryColor',
        'secondary_color' => 'secondaryColor',
        'font_family' => 'fontFamily',
        'header_font_family' => 'headerFontFamily',
        'button_color' => 'buttonColor',
        'is_personal_id_required' => 'isPersonalIdRequired',
        'punchline' => 'punchline',
        'google_tag_manager' => 'googleTagManager'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_url' => 'setBaseUrl',
        'url_imprint' => 'setUrlImprint',
        'url_homepage' => 'setUrlHomepage',
        'url_privacy' => 'setUrlPrivacy',
        'provider_name' => 'setProviderName',
        'background_image_path' => 'setBackgroundImagePath',
        'logo_path' => 'setLogoPath',
        'primary_color' => 'setPrimaryColor',
        'secondary_color' => 'setSecondaryColor',
        'font_family' => 'setFontFamily',
        'header_font_family' => 'setHeaderFontFamily',
        'button_color' => 'setButtonColor',
        'is_personal_id_required' => 'setIsPersonalIdRequired',
        'punchline' => 'setPunchline',
        'google_tag_manager' => 'setGoogleTagManager'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_url' => 'getBaseUrl',
        'url_imprint' => 'getUrlImprint',
        'url_homepage' => 'getUrlHomepage',
        'url_privacy' => 'getUrlPrivacy',
        'provider_name' => 'getProviderName',
        'background_image_path' => 'getBackgroundImagePath',
        'logo_path' => 'getLogoPath',
        'primary_color' => 'getPrimaryColor',
        'secondary_color' => 'getSecondaryColor',
        'font_family' => 'getFontFamily',
        'header_font_family' => 'getHeaderFontFamily',
        'button_color' => 'getButtonColor',
        'is_personal_id_required' => 'getIsPersonalIdRequired',
        'punchline' => 'getPunchline',
        'google_tag_manager' => 'getGoogleTagManager'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('base_url', $data ?? [], null);
        $this->setIfExists('url_imprint', $data ?? [], null);
        $this->setIfExists('url_homepage', $data ?? [], null);
        $this->setIfExists('url_privacy', $data ?? [], null);
        $this->setIfExists('provider_name', $data ?? [], null);
        $this->setIfExists('background_image_path', $data ?? [], null);
        $this->setIfExists('logo_path', $data ?? [], null);
        $this->setIfExists('primary_color', $data ?? [], null);
        $this->setIfExists('secondary_color', $data ?? [], null);
        $this->setIfExists('font_family', $data ?? [], null);
        $this->setIfExists('header_font_family', $data ?? [], null);
        $this->setIfExists('button_color', $data ?? [], null);
        $this->setIfExists('is_personal_id_required', $data ?? [], null);
        $this->setIfExists('punchline', $data ?? [], null);
        $this->setIfExists('google_tag_manager', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_url
     *
     * @return string|null
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string|null $base_url base_url
     *
     * @return self
     */
    public function setBaseUrl($base_url)
    {
        if (is_null($base_url)) {
            array_push($this->openAPINullablesSetToNull, 'base_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets url_imprint
     *
     * @return string|null
     */
    public function getUrlImprint()
    {
        return $this->container['url_imprint'];
    }

    /**
     * Sets url_imprint
     *
     * @param string|null $url_imprint url_imprint
     *
     * @return self
     */
    public function setUrlImprint($url_imprint)
    {
        if (is_null($url_imprint)) {
            array_push($this->openAPINullablesSetToNull, 'url_imprint');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url_imprint', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url_imprint'] = $url_imprint;

        return $this;
    }

    /**
     * Gets url_homepage
     *
     * @return string|null
     */
    public function getUrlHomepage()
    {
        return $this->container['url_homepage'];
    }

    /**
     * Sets url_homepage
     *
     * @param string|null $url_homepage url_homepage
     *
     * @return self
     */
    public function setUrlHomepage($url_homepage)
    {
        if (is_null($url_homepage)) {
            array_push($this->openAPINullablesSetToNull, 'url_homepage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url_homepage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url_homepage'] = $url_homepage;

        return $this;
    }

    /**
     * Gets url_privacy
     *
     * @return string|null
     */
    public function getUrlPrivacy()
    {
        return $this->container['url_privacy'];
    }

    /**
     * Sets url_privacy
     *
     * @param string|null $url_privacy url_privacy
     *
     * @return self
     */
    public function setUrlPrivacy($url_privacy)
    {
        if (is_null($url_privacy)) {
            array_push($this->openAPINullablesSetToNull, 'url_privacy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url_privacy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url_privacy'] = $url_privacy;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string|null
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string|null $provider_name provider_name
     *
     * @return self
     */
    public function setProviderName($provider_name)
    {
        if (is_null($provider_name)) {
            array_push($this->openAPINullablesSetToNull, 'provider_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets background_image_path
     *
     * @return string|null
     */
    public function getBackgroundImagePath()
    {
        return $this->container['background_image_path'];
    }

    /**
     * Sets background_image_path
     *
     * @param string|null $background_image_path background_image_path
     *
     * @return self
     */
    public function setBackgroundImagePath($background_image_path)
    {
        if (is_null($background_image_path)) {
            array_push($this->openAPINullablesSetToNull, 'background_image_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_image_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_image_path'] = $background_image_path;

        return $this;
    }

    /**
     * Gets logo_path
     *
     * @return string|null
     */
    public function getLogoPath()
    {
        return $this->container['logo_path'];
    }

    /**
     * Sets logo_path
     *
     * @param string|null $logo_path logo_path
     *
     * @return self
     */
    public function setLogoPath($logo_path)
    {
        if (is_null($logo_path)) {
            array_push($this->openAPINullablesSetToNull, 'logo_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo_path'] = $logo_path;

        return $this;
    }

    /**
     * Gets primary_color
     *
     * @return string|null
     */
    public function getPrimaryColor()
    {
        return $this->container['primary_color'];
    }

    /**
     * Sets primary_color
     *
     * @param string|null $primary_color primary_color
     *
     * @return self
     */
    public function setPrimaryColor($primary_color)
    {
        if (is_null($primary_color)) {
            array_push($this->openAPINullablesSetToNull, 'primary_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_color'] = $primary_color;

        return $this;
    }

    /**
     * Gets secondary_color
     *
     * @return string|null
     */
    public function getSecondaryColor()
    {
        return $this->container['secondary_color'];
    }

    /**
     * Sets secondary_color
     *
     * @param string|null $secondary_color secondary_color
     *
     * @return self
     */
    public function setSecondaryColor($secondary_color)
    {
        if (is_null($secondary_color)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondary_color'] = $secondary_color;

        return $this;
    }

    /**
     * Gets font_family
     *
     * @return string|null
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     *
     * @param string|null $font_family font_family
     *
     * @return self
     */
    public function setFontFamily($font_family)
    {
        if (is_null($font_family)) {
            array_push($this->openAPINullablesSetToNull, 'font_family');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('font_family', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets header_font_family
     *
     * @return string|null
     */
    public function getHeaderFontFamily()
    {
        return $this->container['header_font_family'];
    }

    /**
     * Sets header_font_family
     *
     * @param string|null $header_font_family header_font_family
     *
     * @return self
     */
    public function setHeaderFontFamily($header_font_family)
    {
        if (is_null($header_font_family)) {
            array_push($this->openAPINullablesSetToNull, 'header_font_family');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_font_family', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['header_font_family'] = $header_font_family;

        return $this;
    }

    /**
     * Gets button_color
     *
     * @return string|null
     */
    public function getButtonColor()
    {
        return $this->container['button_color'];
    }

    /**
     * Sets button_color
     *
     * @param string|null $button_color button_color
     *
     * @return self
     */
    public function setButtonColor($button_color)
    {
        if (is_null($button_color)) {
            array_push($this->openAPINullablesSetToNull, 'button_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('button_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['button_color'] = $button_color;

        return $this;
    }

    /**
     * Gets is_personal_id_required
     *
     * @return bool|null
     */
    public function getIsPersonalIdRequired()
    {
        return $this->container['is_personal_id_required'];
    }

    /**
     * Sets is_personal_id_required
     *
     * @param bool|null $is_personal_id_required is_personal_id_required
     *
     * @return self
     */
    public function setIsPersonalIdRequired($is_personal_id_required)
    {
        if (is_null($is_personal_id_required)) {
            throw new \InvalidArgumentException('non-nullable is_personal_id_required cannot be null');
        }
        $this->container['is_personal_id_required'] = $is_personal_id_required;

        return $this;
    }

    /**
     * Gets punchline
     *
     * @return string|null
     */
    public function getPunchline()
    {
        return $this->container['punchline'];
    }

    /**
     * Sets punchline
     *
     * @param string|null $punchline punchline
     *
     * @return self
     */
    public function setPunchline($punchline)
    {
        if (is_null($punchline)) {
            array_push($this->openAPINullablesSetToNull, 'punchline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('punchline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['punchline'] = $punchline;

        return $this;
    }

    /**
     * Gets google_tag_manager
     *
     * @return string|null
     */
    public function getGoogleTagManager()
    {
        return $this->container['google_tag_manager'];
    }

    /**
     * Sets google_tag_manager
     *
     * @param string|null $google_tag_manager google_tag_manager
     *
     * @return self
     */
    public function setGoogleTagManager($google_tag_manager)
    {
        if (is_null($google_tag_manager)) {
            array_push($this->openAPINullablesSetToNull, 'google_tag_manager');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('google_tag_manager', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['google_tag_manager'] = $google_tag_manager;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


