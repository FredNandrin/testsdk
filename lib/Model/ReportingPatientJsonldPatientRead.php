<?php
/**
 * ReportingPatientJsonldPatientRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReportingPatientJsonldPatientRead Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportingPatientJsonldPatientRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportingPatient.jsonld-patient.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_id' => 'string',
        'at_type' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'company' => 'string',
        'email' => 'string',
        'gender' => 'string',
        'personal_id_number' => 'string',
        'phone_number' => 'string',
        'date_of_birth' => '\DateTime',
        'address_street_and_house_number' => 'string',
        'address_zip_code' => 'string',
        'address_city' => 'string',
        'address_country' => 'string',
        'my_probatix_user_uuid' => 'string',
        'hash_signature' => 'string',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_id' => null,
        'at_type' => null,
        'first_name' => null,
        'last_name' => null,
        'company' => null,
        'email' => 'email',
        'gender' => null,
        'personal_id_number' => null,
        'phone_number' => null,
        'date_of_birth' => 'date-time',
        'address_street_and_house_number' => null,
        'address_zip_code' => null,
        'address_city' => null,
        'address_country' => null,
        'my_probatix_user_uuid' => null,
        'hash_signature' => null,
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_id' => false,
		'at_type' => false,
		'first_name' => false,
		'last_name' => false,
		'company' => true,
		'email' => false,
		'gender' => true,
		'personal_id_number' => true,
		'phone_number' => true,
		'date_of_birth' => true,
		'address_street_and_house_number' => true,
		'address_zip_code' => true,
		'address_city' => true,
		'address_country' => true,
		'my_probatix_user_uuid' => true,
		'hash_signature' => true,
		'updated_at' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_id' => '@id',
        'at_type' => '@type',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'company' => 'company',
        'email' => 'email',
        'gender' => 'gender',
        'personal_id_number' => 'personalIdNumber',
        'phone_number' => 'phoneNumber',
        'date_of_birth' => 'dateOfBirth',
        'address_street_and_house_number' => 'addressStreetAndHouseNumber',
        'address_zip_code' => 'addressZipCode',
        'address_city' => 'addressCity',
        'address_country' => 'addressCountry',
        'my_probatix_user_uuid' => 'myProbatixUserUuid',
        'hash_signature' => 'hashSignature',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_id' => 'setAtId',
        'at_type' => 'setAtType',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'company' => 'setCompany',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'personal_id_number' => 'setPersonalIdNumber',
        'phone_number' => 'setPhoneNumber',
        'date_of_birth' => 'setDateOfBirth',
        'address_street_and_house_number' => 'setAddressStreetAndHouseNumber',
        'address_zip_code' => 'setAddressZipCode',
        'address_city' => 'setAddressCity',
        'address_country' => 'setAddressCountry',
        'my_probatix_user_uuid' => 'setMyProbatixUserUuid',
        'hash_signature' => 'setHashSignature',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_id' => 'getAtId',
        'at_type' => 'getAtType',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'company' => 'getCompany',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'personal_id_number' => 'getPersonalIdNumber',
        'phone_number' => 'getPhoneNumber',
        'date_of_birth' => 'getDateOfBirth',
        'address_street_and_house_number' => 'getAddressStreetAndHouseNumber',
        'address_zip_code' => 'getAddressZipCode',
        'address_city' => 'getAddressCity',
        'address_country' => 'getAddressCountry',
        'my_probatix_user_uuid' => 'getMyProbatixUserUuid',
        'hash_signature' => 'getHashSignature',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_id', $data ?? [], null);
        $this->setIfExists('at_type', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('personal_id_number', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('address_street_and_house_number', $data ?? [], null);
        $this->setIfExists('address_zip_code', $data ?? [], null);
        $this->setIfExists('address_city', $data ?? [], null);
        $this->setIfExists('address_country', $data ?? [], null);
        $this->setIfExists('my_probatix_user_uuid', $data ?? [], null);
        $this->setIfExists('hash_signature', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 200)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['gender']) && (mb_strlen($this->container['gender']) > 20)) {
            $invalidProperties[] = "invalid value for 'gender', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['personal_id_number']) && (mb_strlen($this->container['personal_id_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'personal_id_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['address_zip_code']) && (mb_strlen($this->container['address_zip_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'address_zip_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['address_city']) && (mb_strlen($this->container['address_city']) > 100)) {
            $invalidProperties[] = "invalid value for 'address_city', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['address_country']) && (mb_strlen($this->container['address_country']) > 100)) {
            $invalidProperties[] = "invalid value for 'address_country', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_id
     *
     * @return string|null
     */
    public function getAtId()
    {
        return $this->container['at_id'];
    }

    /**
     * Sets at_id
     *
     * @param string|null $at_id at_id
     *
     * @return self
     */
    public function setAtId($at_id)
    {
        if (is_null($at_id)) {
            throw new \InvalidArgumentException('non-nullable at_id cannot be null');
        }
        $this->container['at_id'] = $at_id;

        return $this;
    }

    /**
     * Gets at_type
     *
     * @return string|null
     */
    public function getAtType()
    {
        return $this->container['at_type'];
    }

    /**
     * Sets at_type
     *
     * @param string|null $at_type at_type
     *
     * @return self
     */
    public function setAtType($at_type)
    {
        if (is_null($at_type)) {
            throw new \InvalidArgumentException('non-nullable at_type cannot be null');
        }
        $this->container['at_type'] = $at_type;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling ReportingPatientJsonldPatientRead., must be smaller than or equal to 100.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling ReportingPatientJsonldPatientRead., must be smaller than or equal to 100.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            array_push($this->openAPINullablesSetToNull, 'company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company) && (mb_strlen($company) > 200)) {
            throw new \InvalidArgumentException('invalid length for $company when calling ReportingPatientJsonldPatientRead., must be smaller than or equal to 200.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling ReportingPatientJsonldPatientRead., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gender) && (mb_strlen($gender) > 20)) {
            throw new \InvalidArgumentException('invalid length for $gender when calling ReportingPatientJsonldPatientRead., must be smaller than or equal to 20.');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets personal_id_number
     *
     * @return string|null
     */
    public function getPersonalIdNumber()
    {
        return $this->container['personal_id_number'];
    }

    /**
     * Sets personal_id_number
     *
     * @param string|null $personal_id_number personal_id_number
     *
     * @return self
     */
    public function setPersonalIdNumber($personal_id_number)
    {
        if (is_null($personal_id_number)) {
            array_push($this->openAPINullablesSetToNull, 'personal_id_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personal_id_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($personal_id_number) && (mb_strlen($personal_id_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $personal_id_number when calling ReportingPatientJsonldPatientRead., must be smaller than or equal to 100.');
        }

        $this->container['personal_id_number'] = $personal_id_number;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling ReportingPatientJsonldPatientRead., must be smaller than or equal to 100.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth date_of_birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            array_push($this->openAPINullablesSetToNull, 'date_of_birth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_of_birth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets address_street_and_house_number
     *
     * @return string|null
     */
    public function getAddressStreetAndHouseNumber()
    {
        return $this->container['address_street_and_house_number'];
    }

    /**
     * Sets address_street_and_house_number
     *
     * @param string|null $address_street_and_house_number address_street_and_house_number
     *
     * @return self
     */
    public function setAddressStreetAndHouseNumber($address_street_and_house_number)
    {
        if (is_null($address_street_and_house_number)) {
            array_push($this->openAPINullablesSetToNull, 'address_street_and_house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_street_and_house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_street_and_house_number'] = $address_street_and_house_number;

        return $this;
    }

    /**
     * Gets address_zip_code
     *
     * @return string|null
     */
    public function getAddressZipCode()
    {
        return $this->container['address_zip_code'];
    }

    /**
     * Sets address_zip_code
     *
     * @param string|null $address_zip_code address_zip_code
     *
     * @return self
     */
    public function setAddressZipCode($address_zip_code)
    {
        if (is_null($address_zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'address_zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_zip_code) && (mb_strlen($address_zip_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $address_zip_code when calling ReportingPatientJsonldPatientRead., must be smaller than or equal to 10.');
        }

        $this->container['address_zip_code'] = $address_zip_code;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string|null
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string|null $address_city address_city
     *
     * @return self
     */
    public function setAddressCity($address_city)
    {
        if (is_null($address_city)) {
            array_push($this->openAPINullablesSetToNull, 'address_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_city) && (mb_strlen($address_city) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address_city when calling ReportingPatientJsonldPatientRead., must be smaller than or equal to 100.');
        }

        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return string|null
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string|null $address_country address_country
     *
     * @return self
     */
    public function setAddressCountry($address_country)
    {
        if (is_null($address_country)) {
            array_push($this->openAPINullablesSetToNull, 'address_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_country) && (mb_strlen($address_country) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address_country when calling ReportingPatientJsonldPatientRead., must be smaller than or equal to 100.');
        }

        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets my_probatix_user_uuid
     *
     * @return string|null
     */
    public function getMyProbatixUserUuid()
    {
        return $this->container['my_probatix_user_uuid'];
    }

    /**
     * Sets my_probatix_user_uuid
     *
     * @param string|null $my_probatix_user_uuid my_probatix_user_uuid
     *
     * @return self
     */
    public function setMyProbatixUserUuid($my_probatix_user_uuid)
    {
        if (is_null($my_probatix_user_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'my_probatix_user_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('my_probatix_user_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['my_probatix_user_uuid'] = $my_probatix_user_uuid;

        return $this;
    }

    /**
     * Gets hash_signature
     *
     * @return string|null
     */
    public function getHashSignature()
    {
        return $this->container['hash_signature'];
    }

    /**
     * Sets hash_signature
     *
     * @param string|null $hash_signature Has of relevant values to uniquely identify the Patient/Customer in order to avoid complicated indices.
     *
     * @return self
     */
    public function setHashSignature($hash_signature)
    {
        if (is_null($hash_signature)) {
            array_push($this->openAPINullablesSetToNull, 'hash_signature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hash_signature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hash_signature'] = $hash_signature;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


