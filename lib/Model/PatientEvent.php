<?php
/**
 * PatientEvent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PatientEvent Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PatientEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PatientEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'responsible_user' => 'string',
        'patient_index' => 'int',
        'test_code' => 'string',
        'test_type' => 'string',
        'appointment_time' => '\DateTime',
        'comment' => 'string',
        'doctor_comment' => 'string',
        'loinc' => 'string',
        'test_result_pdf' => 'string',
        'cabin_number' => 'string',
        'internal_code' => 'string',
        'location' => 'string',
        'test_password' => 'string',
        'number_of_access_denied_events' => 'int',
        'is_label_printed' => 'bool',
        'reminder_sent_at' => '\DateTime',
        'documents' => 'string[]',
        'available_for_free_test_confirmed_at' => '\DateTime',
        'test_paid_confirmed_at' => '\DateTime',
        'order_product' => 'string',
        'order_uuid' => 'string',
        'sent_result_date' => '\DateTime',
        'loinc_display' => 'string',
        'updated_via' => 'string',
        'created_via' => 'string',
        'validated_at' => '\DateTime',
        'test_workflow_type' => 'string',
        'patient' => 'string',
        'probe_identifiers' => 'string[]',
        'location_name' => 'string',
        'results' => 'string[]',
        'decision' => 'string',
        'test_start_time' => '\DateTime',
        'test_end_time' => '\DateTime',
        'status' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'company' => 'string',
        'email' => 'string',
        'gender' => 'string',
        'personal_id_number' => 'string',
        'health_insurance_policy_number' => 'string',
        'health_insurance_company_number' => 'string',
        'phone_number' => 'string',
        'date_of_birth' => '\DateTime',
        'address_street_and_house_number' => 'string',
        'address_zip_code' => 'string',
        'address_city' => 'string',
        'address_country' => 'string',
        'my_probatix_user_uuid' => 'string',
        'internal_patient_comment' => 'string',
        'age' => 'int',
        'hash_signature' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'uuid' => 'string',
        'tenant' => 'string',
        'booking_time' => '\DateTime',
        'test_status_started_or_finished' => 'bool',
        'test_ended_regularly' => 'bool',
        'responsible_user_uuid' => 'string',
        'order' => 'string',
        'test_type_vaccination' => 'bool',
        'test_type_vitamin_d' => 'bool',
        'test_type_vital_test' => 'bool',
        'test_type_small_blood_count' => 'bool',
        'test_type_basic_blood_test' => 'bool',
        'label_printed' => 'bool',
        'checked_in' => 'bool',
        'product' => 'string',
        'product_uuid' => 'string',
        'product_name' => 'string',
        'documents_sorted_by_created_at' => '\OpenAPI\Client\Model\Collection',
        'product_gross_price' => 'int',
        'show_payment_status' => 'bool',
        'test_free' => 'bool',
        'appointment_time_date_format' => 'string',
        'test_center_location_name' => 'string',
        'test_center_location_address' => 'string',
        'test_center_location_description' => 'string',
        'sent_result' => 'bool',
        'google_maps_url_for_test_location' => 'string',
        'certificate_downloadable' => 'bool',
        'product_description' => 'string',
        'updated_via_unknown' => 'bool',
        'not_updated_via_lab_api' => 'bool',
        'test_workflow_lab_evaluation_only' => 'bool',
        'test_workflow_full' => 'bool',
        'laboratory_trait' => 'mixed',
        'external_id_trait' => 'mixed',
        'weird_positive_value_trait' => 'mixed',
        'result_trait' => 'mixed',
        'trait' => 'mixed',
        'method' => 'mixed',
        'computed_hash_signature' => 'string',
        'probe_identifiers_ids' => 'string[]',
        'roles' => 'string[]',
        'password' => 'string',
        'salt' => 'string',
        'username' => 'string',
        'user_identifier' => 'string',
        'result_values' => '\OpenAPI\Client\Model\ResultValue[]',
        'decision_invalid' => 'bool',
        'decision_ambiguous' => 'bool',
        'decision_positive' => 'bool',
        'decision_negative' => 'bool',
        'decision_unknown' => 'bool',
        'decision_insufficient' => 'bool',
        'decision_optimal' => 'bool',
        'decision_oversupply' => 'bool',
        'result_value' => 'string',
        'multiple_biomarker_result' => 'bool',
        'decision_from_single_result_value' => '\OpenAPI\Client\Model\ResultValue',
        'status_finished' => 'bool',
        'status_conducted' => 'bool',
        'status_cancelled' => 'bool',
        'status_new' => 'bool',
        'status_draft' => 'bool',
        'status_started' => 'bool',
        'full_name' => 'string',
        'underage' => 'bool',
        'email_address_dummy' => 'bool',
        'full_address' => 'string',
        'personal_string' => 'string',
        'patient_address' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'responsible_user' => 'iri-reference',
        'patient_index' => null,
        'test_code' => null,
        'test_type' => null,
        'appointment_time' => 'date-time',
        'comment' => null,
        'doctor_comment' => null,
        'loinc' => null,
        'test_result_pdf' => null,
        'cabin_number' => null,
        'internal_code' => null,
        'location' => 'iri-reference',
        'test_password' => null,
        'number_of_access_denied_events' => null,
        'is_label_printed' => null,
        'reminder_sent_at' => 'date-time',
        'documents' => 'iri-reference',
        'available_for_free_test_confirmed_at' => 'date-time',
        'test_paid_confirmed_at' => 'date-time',
        'order_product' => 'iri-reference',
        'order_uuid' => null,
        'sent_result_date' => 'date-time',
        'loinc_display' => null,
        'updated_via' => null,
        'created_via' => null,
        'validated_at' => 'date-time',
        'test_workflow_type' => null,
        'patient' => 'iri-reference',
        'probe_identifiers' => 'iri-reference',
        'location_name' => null,
        'results' => null,
        'decision' => null,
        'test_start_time' => 'date-time',
        'test_end_time' => 'date-time',
        'status' => null,
        'first_name' => null,
        'last_name' => null,
        'company' => null,
        'email' => 'email',
        'gender' => null,
        'personal_id_number' => null,
        'health_insurance_policy_number' => null,
        'health_insurance_company_number' => null,
        'phone_number' => null,
        'date_of_birth' => 'date-time',
        'address_street_and_house_number' => null,
        'address_zip_code' => null,
        'address_city' => null,
        'address_country' => null,
        'my_probatix_user_uuid' => null,
        'internal_patient_comment' => null,
        'age' => null,
        'hash_signature' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'uuid' => null,
        'tenant' => 'iri-reference',
        'booking_time' => 'date-time',
        'test_status_started_or_finished' => null,
        'test_ended_regularly' => null,
        'responsible_user_uuid' => null,
        'order' => 'iri-reference',
        'test_type_vaccination' => null,
        'test_type_vitamin_d' => null,
        'test_type_vital_test' => null,
        'test_type_small_blood_count' => null,
        'test_type_basic_blood_test' => null,
        'label_printed' => null,
        'checked_in' => null,
        'product' => 'iri-reference',
        'product_uuid' => null,
        'product_name' => null,
        'documents_sorted_by_created_at' => null,
        'product_gross_price' => null,
        'show_payment_status' => null,
        'test_free' => null,
        'appointment_time_date_format' => null,
        'test_center_location_name' => null,
        'test_center_location_address' => null,
        'test_center_location_description' => null,
        'sent_result' => null,
        'google_maps_url_for_test_location' => null,
        'certificate_downloadable' => null,
        'product_description' => null,
        'updated_via_unknown' => null,
        'not_updated_via_lab_api' => null,
        'test_workflow_lab_evaluation_only' => null,
        'test_workflow_full' => null,
        'laboratory_trait' => null,
        'external_id_trait' => null,
        'weird_positive_value_trait' => null,
        'result_trait' => null,
        'trait' => null,
        'method' => null,
        'computed_hash_signature' => null,
        'probe_identifiers_ids' => null,
        'roles' => null,
        'password' => null,
        'salt' => null,
        'username' => null,
        'user_identifier' => null,
        'result_values' => null,
        'decision_invalid' => null,
        'decision_ambiguous' => null,
        'decision_positive' => null,
        'decision_negative' => null,
        'decision_unknown' => null,
        'decision_insufficient' => null,
        'decision_optimal' => null,
        'decision_oversupply' => null,
        'result_value' => null,
        'multiple_biomarker_result' => null,
        'decision_from_single_result_value' => null,
        'status_finished' => null,
        'status_conducted' => null,
        'status_cancelled' => null,
        'status_new' => null,
        'status_draft' => null,
        'status_started' => null,
        'full_name' => null,
        'underage' => null,
        'email_address_dummy' => null,
        'full_address' => null,
        'personal_string' => null,
        'patient_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'responsible_user' => true,
		'patient_index' => false,
		'test_code' => false,
		'test_type' => false,
		'appointment_time' => false,
		'comment' => true,
		'doctor_comment' => true,
		'loinc' => true,
		'test_result_pdf' => true,
		'cabin_number' => true,
		'internal_code' => false,
		'location' => true,
		'test_password' => true,
		'number_of_access_denied_events' => false,
		'is_label_printed' => false,
		'reminder_sent_at' => true,
		'documents' => false,
		'available_for_free_test_confirmed_at' => true,
		'test_paid_confirmed_at' => true,
		'order_product' => true,
		'order_uuid' => true,
		'sent_result_date' => true,
		'loinc_display' => true,
		'updated_via' => true,
		'created_via' => true,
		'validated_at' => true,
		'test_workflow_type' => true,
		'patient' => true,
		'probe_identifiers' => false,
		'location_name' => true,
		'results' => true,
		'decision' => true,
		'test_start_time' => true,
		'test_end_time' => true,
		'status' => false,
		'first_name' => false,
		'last_name' => false,
		'company' => true,
		'email' => false,
		'gender' => true,
		'personal_id_number' => true,
		'health_insurance_policy_number' => true,
		'health_insurance_company_number' => true,
		'phone_number' => true,
		'date_of_birth' => true,
		'address_street_and_house_number' => true,
		'address_zip_code' => true,
		'address_city' => true,
		'address_country' => true,
		'my_probatix_user_uuid' => true,
		'internal_patient_comment' => true,
		'age' => true,
		'hash_signature' => true,
		'created_at' => false,
		'updated_at' => true,
		'uuid' => false,
		'tenant' => true,
		'booking_time' => false,
		'test_status_started_or_finished' => false,
		'test_ended_regularly' => false,
		'responsible_user_uuid' => true,
		'order' => true,
		'test_type_vaccination' => false,
		'test_type_vitamin_d' => false,
		'test_type_vital_test' => false,
		'test_type_small_blood_count' => false,
		'test_type_basic_blood_test' => false,
		'label_printed' => false,
		'checked_in' => false,
		'product' => true,
		'product_uuid' => true,
		'product_name' => true,
		'documents_sorted_by_created_at' => false,
		'product_gross_price' => true,
		'show_payment_status' => false,
		'test_free' => false,
		'appointment_time_date_format' => true,
		'test_center_location_name' => true,
		'test_center_location_address' => true,
		'test_center_location_description' => true,
		'sent_result' => false,
		'google_maps_url_for_test_location' => true,
		'certificate_downloadable' => false,
		'product_description' => true,
		'updated_via_unknown' => false,
		'not_updated_via_lab_api' => false,
		'test_workflow_lab_evaluation_only' => false,
		'test_workflow_full' => false,
		'laboratory_trait' => true,
		'external_id_trait' => true,
		'weird_positive_value_trait' => true,
		'result_trait' => true,
		'trait' => true,
		'method' => true,
		'computed_hash_signature' => false,
		'probe_identifiers_ids' => false,
		'roles' => false,
		'password' => false,
		'salt' => false,
		'username' => false,
		'user_identifier' => false,
		'result_values' => true,
		'decision_invalid' => false,
		'decision_ambiguous' => false,
		'decision_positive' => false,
		'decision_negative' => false,
		'decision_unknown' => false,
		'decision_insufficient' => false,
		'decision_optimal' => false,
		'decision_oversupply' => false,
		'result_value' => false,
		'multiple_biomarker_result' => false,
		'decision_from_single_result_value' => true,
		'status_finished' => false,
		'status_conducted' => false,
		'status_cancelled' => false,
		'status_new' => false,
		'status_draft' => false,
		'status_started' => false,
		'full_name' => false,
		'underage' => false,
		'email_address_dummy' => false,
		'full_address' => false,
		'personal_string' => false,
		'patient_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'responsible_user' => 'responsibleUser',
        'patient_index' => 'patientIndex',
        'test_code' => 'testCode',
        'test_type' => 'testType',
        'appointment_time' => 'appointmentTime',
        'comment' => 'comment',
        'doctor_comment' => 'doctorComment',
        'loinc' => 'loinc',
        'test_result_pdf' => 'testResultPdf',
        'cabin_number' => 'cabinNumber',
        'internal_code' => 'internalCode',
        'location' => 'location',
        'test_password' => 'testPassword',
        'number_of_access_denied_events' => 'numberOfAccessDeniedEvents',
        'is_label_printed' => 'isLabelPrinted',
        'reminder_sent_at' => 'reminderSentAt',
        'documents' => 'documents',
        'available_for_free_test_confirmed_at' => 'availableForFreeTestConfirmedAt',
        'test_paid_confirmed_at' => 'testPaidConfirmedAt',
        'order_product' => 'orderProduct',
        'order_uuid' => 'orderUuid',
        'sent_result_date' => 'sentResultDate',
        'loinc_display' => 'loincDisplay',
        'updated_via' => 'updatedVia',
        'created_via' => 'createdVia',
        'validated_at' => 'validatedAt',
        'test_workflow_type' => 'testWorkflowType',
        'patient' => 'patient',
        'probe_identifiers' => 'probeIdentifiers',
        'location_name' => 'locationName',
        'results' => 'results',
        'decision' => 'decision',
        'test_start_time' => 'testStartTime',
        'test_end_time' => 'testEndTime',
        'status' => 'status',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'company' => 'company',
        'email' => 'email',
        'gender' => 'gender',
        'personal_id_number' => 'personalIdNumber',
        'health_insurance_policy_number' => 'healthInsurancePolicyNumber',
        'health_insurance_company_number' => 'healthInsuranceCompanyNumber',
        'phone_number' => 'phoneNumber',
        'date_of_birth' => 'dateOfBirth',
        'address_street_and_house_number' => 'addressStreetAndHouseNumber',
        'address_zip_code' => 'addressZipCode',
        'address_city' => 'addressCity',
        'address_country' => 'addressCountry',
        'my_probatix_user_uuid' => 'myProbatixUserUuid',
        'internal_patient_comment' => 'internalPatientComment',
        'age' => 'age',
        'hash_signature' => 'hashSignature',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'uuid' => 'uuid',
        'tenant' => 'tenant',
        'booking_time' => 'bookingTime',
        'test_status_started_or_finished' => 'testStatusStartedOrFinished',
        'test_ended_regularly' => 'testEndedRegularly',
        'responsible_user_uuid' => 'responsibleUserUuid',
        'order' => 'order',
        'test_type_vaccination' => 'testTypeVaccination',
        'test_type_vitamin_d' => 'testTypeVitaminD',
        'test_type_vital_test' => 'testTypeVitalTest',
        'test_type_small_blood_count' => 'testTypeSmallBloodCount',
        'test_type_basic_blood_test' => 'testTypeBasicBloodTest',
        'label_printed' => 'labelPrinted',
        'checked_in' => 'checkedIn',
        'product' => 'product',
        'product_uuid' => 'productUuid',
        'product_name' => 'productName',
        'documents_sorted_by_created_at' => 'documentsSortedByCreatedAt',
        'product_gross_price' => 'productGrossPrice',
        'show_payment_status' => 'showPaymentStatus',
        'test_free' => 'testFree',
        'appointment_time_date_format' => 'appointmentTimeDateFormat',
        'test_center_location_name' => 'testCenterLocationName',
        'test_center_location_address' => 'testCenterLocationAddress',
        'test_center_location_description' => 'testCenterLocationDescription',
        'sent_result' => 'sentResult',
        'google_maps_url_for_test_location' => 'googleMapsUrlForTestLocation',
        'certificate_downloadable' => 'certificateDownloadable',
        'product_description' => 'productDescription',
        'updated_via_unknown' => 'updatedViaUnknown',
        'not_updated_via_lab_api' => 'notUpdatedViaLabApi',
        'test_workflow_lab_evaluation_only' => 'testWorkflowLabEvaluationOnly',
        'test_workflow_full' => 'testWorkflowFull',
        'laboratory_trait' => 'laboratoryTrait',
        'external_id_trait' => 'externalIdTrait',
        'weird_positive_value_trait' => 'weirdPositiveValueTrait',
        'result_trait' => 'resultTrait',
        'trait' => 'trait',
        'method' => 'method',
        'computed_hash_signature' => 'computedHashSignature',
        'probe_identifiers_ids' => 'probeIdentifiersIds',
        'roles' => 'roles',
        'password' => 'password',
        'salt' => 'salt',
        'username' => 'username',
        'user_identifier' => 'userIdentifier',
        'result_values' => 'resultValues',
        'decision_invalid' => 'decisionInvalid',
        'decision_ambiguous' => 'decisionAmbiguous',
        'decision_positive' => 'decisionPositive',
        'decision_negative' => 'decisionNegative',
        'decision_unknown' => 'decisionUnknown',
        'decision_insufficient' => 'decisionInsufficient',
        'decision_optimal' => 'decisionOptimal',
        'decision_oversupply' => 'decisionOversupply',
        'result_value' => 'resultValue',
        'multiple_biomarker_result' => 'multipleBiomarkerResult',
        'decision_from_single_result_value' => 'decisionFromSingleResultValue',
        'status_finished' => 'statusFinished',
        'status_conducted' => 'statusConducted',
        'status_cancelled' => 'statusCancelled',
        'status_new' => 'statusNew',
        'status_draft' => 'statusDraft',
        'status_started' => 'statusStarted',
        'full_name' => 'fullName',
        'underage' => 'underage',
        'email_address_dummy' => 'emailAddressDummy',
        'full_address' => 'fullAddress',
        'personal_string' => 'personalString',
        'patient_address' => 'patientAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'responsible_user' => 'setResponsibleUser',
        'patient_index' => 'setPatientIndex',
        'test_code' => 'setTestCode',
        'test_type' => 'setTestType',
        'appointment_time' => 'setAppointmentTime',
        'comment' => 'setComment',
        'doctor_comment' => 'setDoctorComment',
        'loinc' => 'setLoinc',
        'test_result_pdf' => 'setTestResultPdf',
        'cabin_number' => 'setCabinNumber',
        'internal_code' => 'setInternalCode',
        'location' => 'setLocation',
        'test_password' => 'setTestPassword',
        'number_of_access_denied_events' => 'setNumberOfAccessDeniedEvents',
        'is_label_printed' => 'setIsLabelPrinted',
        'reminder_sent_at' => 'setReminderSentAt',
        'documents' => 'setDocuments',
        'available_for_free_test_confirmed_at' => 'setAvailableForFreeTestConfirmedAt',
        'test_paid_confirmed_at' => 'setTestPaidConfirmedAt',
        'order_product' => 'setOrderProduct',
        'order_uuid' => 'setOrderUuid',
        'sent_result_date' => 'setSentResultDate',
        'loinc_display' => 'setLoincDisplay',
        'updated_via' => 'setUpdatedVia',
        'created_via' => 'setCreatedVia',
        'validated_at' => 'setValidatedAt',
        'test_workflow_type' => 'setTestWorkflowType',
        'patient' => 'setPatient',
        'probe_identifiers' => 'setProbeIdentifiers',
        'location_name' => 'setLocationName',
        'results' => 'setResults',
        'decision' => 'setDecision',
        'test_start_time' => 'setTestStartTime',
        'test_end_time' => 'setTestEndTime',
        'status' => 'setStatus',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'company' => 'setCompany',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'personal_id_number' => 'setPersonalIdNumber',
        'health_insurance_policy_number' => 'setHealthInsurancePolicyNumber',
        'health_insurance_company_number' => 'setHealthInsuranceCompanyNumber',
        'phone_number' => 'setPhoneNumber',
        'date_of_birth' => 'setDateOfBirth',
        'address_street_and_house_number' => 'setAddressStreetAndHouseNumber',
        'address_zip_code' => 'setAddressZipCode',
        'address_city' => 'setAddressCity',
        'address_country' => 'setAddressCountry',
        'my_probatix_user_uuid' => 'setMyProbatixUserUuid',
        'internal_patient_comment' => 'setInternalPatientComment',
        'age' => 'setAge',
        'hash_signature' => 'setHashSignature',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'uuid' => 'setUuid',
        'tenant' => 'setTenant',
        'booking_time' => 'setBookingTime',
        'test_status_started_or_finished' => 'setTestStatusStartedOrFinished',
        'test_ended_regularly' => 'setTestEndedRegularly',
        'responsible_user_uuid' => 'setResponsibleUserUuid',
        'order' => 'setOrder',
        'test_type_vaccination' => 'setTestTypeVaccination',
        'test_type_vitamin_d' => 'setTestTypeVitaminD',
        'test_type_vital_test' => 'setTestTypeVitalTest',
        'test_type_small_blood_count' => 'setTestTypeSmallBloodCount',
        'test_type_basic_blood_test' => 'setTestTypeBasicBloodTest',
        'label_printed' => 'setLabelPrinted',
        'checked_in' => 'setCheckedIn',
        'product' => 'setProduct',
        'product_uuid' => 'setProductUuid',
        'product_name' => 'setProductName',
        'documents_sorted_by_created_at' => 'setDocumentsSortedByCreatedAt',
        'product_gross_price' => 'setProductGrossPrice',
        'show_payment_status' => 'setShowPaymentStatus',
        'test_free' => 'setTestFree',
        'appointment_time_date_format' => 'setAppointmentTimeDateFormat',
        'test_center_location_name' => 'setTestCenterLocationName',
        'test_center_location_address' => 'setTestCenterLocationAddress',
        'test_center_location_description' => 'setTestCenterLocationDescription',
        'sent_result' => 'setSentResult',
        'google_maps_url_for_test_location' => 'setGoogleMapsUrlForTestLocation',
        'certificate_downloadable' => 'setCertificateDownloadable',
        'product_description' => 'setProductDescription',
        'updated_via_unknown' => 'setUpdatedViaUnknown',
        'not_updated_via_lab_api' => 'setNotUpdatedViaLabApi',
        'test_workflow_lab_evaluation_only' => 'setTestWorkflowLabEvaluationOnly',
        'test_workflow_full' => 'setTestWorkflowFull',
        'laboratory_trait' => 'setLaboratoryTrait',
        'external_id_trait' => 'setExternalIdTrait',
        'weird_positive_value_trait' => 'setWeirdPositiveValueTrait',
        'result_trait' => 'setResultTrait',
        'trait' => 'setTrait',
        'method' => 'setMethod',
        'computed_hash_signature' => 'setComputedHashSignature',
        'probe_identifiers_ids' => 'setProbeIdentifiersIds',
        'roles' => 'setRoles',
        'password' => 'setPassword',
        'salt' => 'setSalt',
        'username' => 'setUsername',
        'user_identifier' => 'setUserIdentifier',
        'result_values' => 'setResultValues',
        'decision_invalid' => 'setDecisionInvalid',
        'decision_ambiguous' => 'setDecisionAmbiguous',
        'decision_positive' => 'setDecisionPositive',
        'decision_negative' => 'setDecisionNegative',
        'decision_unknown' => 'setDecisionUnknown',
        'decision_insufficient' => 'setDecisionInsufficient',
        'decision_optimal' => 'setDecisionOptimal',
        'decision_oversupply' => 'setDecisionOversupply',
        'result_value' => 'setResultValue',
        'multiple_biomarker_result' => 'setMultipleBiomarkerResult',
        'decision_from_single_result_value' => 'setDecisionFromSingleResultValue',
        'status_finished' => 'setStatusFinished',
        'status_conducted' => 'setStatusConducted',
        'status_cancelled' => 'setStatusCancelled',
        'status_new' => 'setStatusNew',
        'status_draft' => 'setStatusDraft',
        'status_started' => 'setStatusStarted',
        'full_name' => 'setFullName',
        'underage' => 'setUnderage',
        'email_address_dummy' => 'setEmailAddressDummy',
        'full_address' => 'setFullAddress',
        'personal_string' => 'setPersonalString',
        'patient_address' => 'setPatientAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'responsible_user' => 'getResponsibleUser',
        'patient_index' => 'getPatientIndex',
        'test_code' => 'getTestCode',
        'test_type' => 'getTestType',
        'appointment_time' => 'getAppointmentTime',
        'comment' => 'getComment',
        'doctor_comment' => 'getDoctorComment',
        'loinc' => 'getLoinc',
        'test_result_pdf' => 'getTestResultPdf',
        'cabin_number' => 'getCabinNumber',
        'internal_code' => 'getInternalCode',
        'location' => 'getLocation',
        'test_password' => 'getTestPassword',
        'number_of_access_denied_events' => 'getNumberOfAccessDeniedEvents',
        'is_label_printed' => 'getIsLabelPrinted',
        'reminder_sent_at' => 'getReminderSentAt',
        'documents' => 'getDocuments',
        'available_for_free_test_confirmed_at' => 'getAvailableForFreeTestConfirmedAt',
        'test_paid_confirmed_at' => 'getTestPaidConfirmedAt',
        'order_product' => 'getOrderProduct',
        'order_uuid' => 'getOrderUuid',
        'sent_result_date' => 'getSentResultDate',
        'loinc_display' => 'getLoincDisplay',
        'updated_via' => 'getUpdatedVia',
        'created_via' => 'getCreatedVia',
        'validated_at' => 'getValidatedAt',
        'test_workflow_type' => 'getTestWorkflowType',
        'patient' => 'getPatient',
        'probe_identifiers' => 'getProbeIdentifiers',
        'location_name' => 'getLocationName',
        'results' => 'getResults',
        'decision' => 'getDecision',
        'test_start_time' => 'getTestStartTime',
        'test_end_time' => 'getTestEndTime',
        'status' => 'getStatus',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'company' => 'getCompany',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'personal_id_number' => 'getPersonalIdNumber',
        'health_insurance_policy_number' => 'getHealthInsurancePolicyNumber',
        'health_insurance_company_number' => 'getHealthInsuranceCompanyNumber',
        'phone_number' => 'getPhoneNumber',
        'date_of_birth' => 'getDateOfBirth',
        'address_street_and_house_number' => 'getAddressStreetAndHouseNumber',
        'address_zip_code' => 'getAddressZipCode',
        'address_city' => 'getAddressCity',
        'address_country' => 'getAddressCountry',
        'my_probatix_user_uuid' => 'getMyProbatixUserUuid',
        'internal_patient_comment' => 'getInternalPatientComment',
        'age' => 'getAge',
        'hash_signature' => 'getHashSignature',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'uuid' => 'getUuid',
        'tenant' => 'getTenant',
        'booking_time' => 'getBookingTime',
        'test_status_started_or_finished' => 'getTestStatusStartedOrFinished',
        'test_ended_regularly' => 'getTestEndedRegularly',
        'responsible_user_uuid' => 'getResponsibleUserUuid',
        'order' => 'getOrder',
        'test_type_vaccination' => 'getTestTypeVaccination',
        'test_type_vitamin_d' => 'getTestTypeVitaminD',
        'test_type_vital_test' => 'getTestTypeVitalTest',
        'test_type_small_blood_count' => 'getTestTypeSmallBloodCount',
        'test_type_basic_blood_test' => 'getTestTypeBasicBloodTest',
        'label_printed' => 'getLabelPrinted',
        'checked_in' => 'getCheckedIn',
        'product' => 'getProduct',
        'product_uuid' => 'getProductUuid',
        'product_name' => 'getProductName',
        'documents_sorted_by_created_at' => 'getDocumentsSortedByCreatedAt',
        'product_gross_price' => 'getProductGrossPrice',
        'show_payment_status' => 'getShowPaymentStatus',
        'test_free' => 'getTestFree',
        'appointment_time_date_format' => 'getAppointmentTimeDateFormat',
        'test_center_location_name' => 'getTestCenterLocationName',
        'test_center_location_address' => 'getTestCenterLocationAddress',
        'test_center_location_description' => 'getTestCenterLocationDescription',
        'sent_result' => 'getSentResult',
        'google_maps_url_for_test_location' => 'getGoogleMapsUrlForTestLocation',
        'certificate_downloadable' => 'getCertificateDownloadable',
        'product_description' => 'getProductDescription',
        'updated_via_unknown' => 'getUpdatedViaUnknown',
        'not_updated_via_lab_api' => 'getNotUpdatedViaLabApi',
        'test_workflow_lab_evaluation_only' => 'getTestWorkflowLabEvaluationOnly',
        'test_workflow_full' => 'getTestWorkflowFull',
        'laboratory_trait' => 'getLaboratoryTrait',
        'external_id_trait' => 'getExternalIdTrait',
        'weird_positive_value_trait' => 'getWeirdPositiveValueTrait',
        'result_trait' => 'getResultTrait',
        'trait' => 'getTrait',
        'method' => 'getMethod',
        'computed_hash_signature' => 'getComputedHashSignature',
        'probe_identifiers_ids' => 'getProbeIdentifiersIds',
        'roles' => 'getRoles',
        'password' => 'getPassword',
        'salt' => 'getSalt',
        'username' => 'getUsername',
        'user_identifier' => 'getUserIdentifier',
        'result_values' => 'getResultValues',
        'decision_invalid' => 'getDecisionInvalid',
        'decision_ambiguous' => 'getDecisionAmbiguous',
        'decision_positive' => 'getDecisionPositive',
        'decision_negative' => 'getDecisionNegative',
        'decision_unknown' => 'getDecisionUnknown',
        'decision_insufficient' => 'getDecisionInsufficient',
        'decision_optimal' => 'getDecisionOptimal',
        'decision_oversupply' => 'getDecisionOversupply',
        'result_value' => 'getResultValue',
        'multiple_biomarker_result' => 'getMultipleBiomarkerResult',
        'decision_from_single_result_value' => 'getDecisionFromSingleResultValue',
        'status_finished' => 'getStatusFinished',
        'status_conducted' => 'getStatusConducted',
        'status_cancelled' => 'getStatusCancelled',
        'status_new' => 'getStatusNew',
        'status_draft' => 'getStatusDraft',
        'status_started' => 'getStatusStarted',
        'full_name' => 'getFullName',
        'underage' => 'getUnderage',
        'email_address_dummy' => 'getEmailAddressDummy',
        'full_address' => 'getFullAddress',
        'personal_string' => 'getPersonalString',
        'patient_address' => 'getPatientAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('responsible_user', $data ?? [], null);
        $this->setIfExists('patient_index', $data ?? [], null);
        $this->setIfExists('test_code', $data ?? [], null);
        $this->setIfExists('test_type', $data ?? [], 'vitamin_d');
        $this->setIfExists('appointment_time', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('doctor_comment', $data ?? [], null);
        $this->setIfExists('loinc', $data ?? [], null);
        $this->setIfExists('test_result_pdf', $data ?? [], null);
        $this->setIfExists('cabin_number', $data ?? [], null);
        $this->setIfExists('internal_code', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('test_password', $data ?? [], null);
        $this->setIfExists('number_of_access_denied_events', $data ?? [], null);
        $this->setIfExists('is_label_printed', $data ?? [], null);
        $this->setIfExists('reminder_sent_at', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('available_for_free_test_confirmed_at', $data ?? [], null);
        $this->setIfExists('test_paid_confirmed_at', $data ?? [], null);
        $this->setIfExists('order_product', $data ?? [], null);
        $this->setIfExists('order_uuid', $data ?? [], null);
        $this->setIfExists('sent_result_date', $data ?? [], null);
        $this->setIfExists('loinc_display', $data ?? [], null);
        $this->setIfExists('updated_via', $data ?? [], 'unknown');
        $this->setIfExists('created_via', $data ?? [], 'unknown');
        $this->setIfExists('validated_at', $data ?? [], null);
        $this->setIfExists('test_workflow_type', $data ?? [], 'FULL');
        $this->setIfExists('patient', $data ?? [], null);
        $this->setIfExists('probe_identifiers', $data ?? [], null);
        $this->setIfExists('location_name', $data ?? [], null);
        $this->setIfExists('results', $data ?? [], null);
        $this->setIfExists('decision', $data ?? [], 'unknown');
        $this->setIfExists('test_start_time', $data ?? [], null);
        $this->setIfExists('test_end_time', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('personal_id_number', $data ?? [], null);
        $this->setIfExists('health_insurance_policy_number', $data ?? [], null);
        $this->setIfExists('health_insurance_company_number', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('address_street_and_house_number', $data ?? [], null);
        $this->setIfExists('address_zip_code', $data ?? [], null);
        $this->setIfExists('address_city', $data ?? [], null);
        $this->setIfExists('address_country', $data ?? [], null);
        $this->setIfExists('my_probatix_user_uuid', $data ?? [], null);
        $this->setIfExists('internal_patient_comment', $data ?? [], null);
        $this->setIfExists('age', $data ?? [], null);
        $this->setIfExists('hash_signature', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('tenant', $data ?? [], null);
        $this->setIfExists('booking_time', $data ?? [], null);
        $this->setIfExists('test_status_started_or_finished', $data ?? [], null);
        $this->setIfExists('test_ended_regularly', $data ?? [], null);
        $this->setIfExists('responsible_user_uuid', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('test_type_vaccination', $data ?? [], null);
        $this->setIfExists('test_type_vitamin_d', $data ?? [], null);
        $this->setIfExists('test_type_vital_test', $data ?? [], null);
        $this->setIfExists('test_type_small_blood_count', $data ?? [], null);
        $this->setIfExists('test_type_basic_blood_test', $data ?? [], null);
        $this->setIfExists('label_printed', $data ?? [], null);
        $this->setIfExists('checked_in', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('product_uuid', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('documents_sorted_by_created_at', $data ?? [], null);
        $this->setIfExists('product_gross_price', $data ?? [], null);
        $this->setIfExists('show_payment_status', $data ?? [], null);
        $this->setIfExists('test_free', $data ?? [], null);
        $this->setIfExists('appointment_time_date_format', $data ?? [], null);
        $this->setIfExists('test_center_location_name', $data ?? [], null);
        $this->setIfExists('test_center_location_address', $data ?? [], null);
        $this->setIfExists('test_center_location_description', $data ?? [], null);
        $this->setIfExists('sent_result', $data ?? [], null);
        $this->setIfExists('google_maps_url_for_test_location', $data ?? [], null);
        $this->setIfExists('certificate_downloadable', $data ?? [], null);
        $this->setIfExists('product_description', $data ?? [], null);
        $this->setIfExists('updated_via_unknown', $data ?? [], null);
        $this->setIfExists('not_updated_via_lab_api', $data ?? [], null);
        $this->setIfExists('test_workflow_lab_evaluation_only', $data ?? [], null);
        $this->setIfExists('test_workflow_full', $data ?? [], null);
        $this->setIfExists('laboratory_trait', $data ?? [], null);
        $this->setIfExists('external_id_trait', $data ?? [], null);
        $this->setIfExists('weird_positive_value_trait', $data ?? [], null);
        $this->setIfExists('result_trait', $data ?? [], null);
        $this->setIfExists('trait', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('computed_hash_signature', $data ?? [], null);
        $this->setIfExists('probe_identifiers_ids', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('salt', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('user_identifier', $data ?? [], null);
        $this->setIfExists('result_values', $data ?? [], null);
        $this->setIfExists('decision_invalid', $data ?? [], null);
        $this->setIfExists('decision_ambiguous', $data ?? [], null);
        $this->setIfExists('decision_positive', $data ?? [], null);
        $this->setIfExists('decision_negative', $data ?? [], null);
        $this->setIfExists('decision_unknown', $data ?? [], null);
        $this->setIfExists('decision_insufficient', $data ?? [], null);
        $this->setIfExists('decision_optimal', $data ?? [], null);
        $this->setIfExists('decision_oversupply', $data ?? [], null);
        $this->setIfExists('result_value', $data ?? [], null);
        $this->setIfExists('multiple_biomarker_result', $data ?? [], null);
        $this->setIfExists('decision_from_single_result_value', $data ?? [], null);
        $this->setIfExists('status_finished', $data ?? [], null);
        $this->setIfExists('status_conducted', $data ?? [], null);
        $this->setIfExists('status_cancelled', $data ?? [], null);
        $this->setIfExists('status_new', $data ?? [], null);
        $this->setIfExists('status_draft', $data ?? [], null);
        $this->setIfExists('status_started', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('underage', $data ?? [], null);
        $this->setIfExists('email_address_dummy', $data ?? [], null);
        $this->setIfExists('full_address', $data ?? [], null);
        $this->setIfExists('personal_string', $data ?? [], null);
        $this->setIfExists('patient_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['doctor_comment']) && (mb_strlen($this->container['doctor_comment']) > 280)) {
            $invalidProperties[] = "invalid value for 'doctor_comment', the character length must be smaller than or equal to 280.";
        }

        if (!is_null($this->container['loinc']) && (mb_strlen($this->container['loinc']) > 20)) {
            $invalidProperties[] = "invalid value for 'loinc', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 200)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['gender']) && (mb_strlen($this->container['gender']) > 20)) {
            $invalidProperties[] = "invalid value for 'gender', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['personal_id_number']) && (mb_strlen($this->container['personal_id_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'personal_id_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['health_insurance_policy_number']) && (mb_strlen($this->container['health_insurance_policy_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'health_insurance_policy_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['health_insurance_company_number']) && (mb_strlen($this->container['health_insurance_company_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'health_insurance_company_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['address_zip_code']) && (mb_strlen($this->container['address_zip_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'address_zip_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['address_city']) && (mb_strlen($this->container['address_city']) > 100)) {
            $invalidProperties[] = "invalid value for 'address_city', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['address_country']) && (mb_strlen($this->container['address_country']) > 100)) {
            $invalidProperties[] = "invalid value for 'address_country', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets responsible_user
     *
     * @return string|null
     */
    public function getResponsibleUser()
    {
        return $this->container['responsible_user'];
    }

    /**
     * Sets responsible_user
     *
     * @param string|null $responsible_user responsible_user
     *
     * @return self
     */
    public function setResponsibleUser($responsible_user)
    {
        if (is_null($responsible_user)) {
            array_push($this->openAPINullablesSetToNull, 'responsible_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responsible_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['responsible_user'] = $responsible_user;

        return $this;
    }

    /**
     * Gets patient_index
     *
     * @return int|null
     */
    public function getPatientIndex()
    {
        return $this->container['patient_index'];
    }

    /**
     * Sets patient_index
     *
     * @param int|null $patient_index patient_index
     *
     * @return self
     */
    public function setPatientIndex($patient_index)
    {
        if (is_null($patient_index)) {
            throw new \InvalidArgumentException('non-nullable patient_index cannot be null');
        }
        $this->container['patient_index'] = $patient_index;

        return $this;
    }

    /**
     * Gets test_code
     *
     * @return string|null
     */
    public function getTestCode()
    {
        return $this->container['test_code'];
    }

    /**
     * Sets test_code
     *
     * @param string|null $test_code test_code
     *
     * @return self
     */
    public function setTestCode($test_code)
    {
        if (is_null($test_code)) {
            throw new \InvalidArgumentException('non-nullable test_code cannot be null');
        }
        $this->container['test_code'] = $test_code;

        return $this;
    }

    /**
     * Gets test_type
     *
     * @return string|null
     */
    public function getTestType()
    {
        return $this->container['test_type'];
    }

    /**
     * Sets test_type
     *
     * @param string|null $test_type test_type
     *
     * @return self
     */
    public function setTestType($test_type)
    {
        if (is_null($test_type)) {
            throw new \InvalidArgumentException('non-nullable test_type cannot be null');
        }
        $this->container['test_type'] = $test_type;

        return $this;
    }

    /**
     * Gets appointment_time
     *
     * @return \DateTime|null
     */
    public function getAppointmentTime()
    {
        return $this->container['appointment_time'];
    }

    /**
     * Sets appointment_time
     *
     * @param \DateTime|null $appointment_time appointment_time
     *
     * @return self
     */
    public function setAppointmentTime($appointment_time)
    {
        if (is_null($appointment_time)) {
            throw new \InvalidArgumentException('non-nullable appointment_time cannot be null');
        }
        $this->container['appointment_time'] = $appointment_time;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets doctor_comment
     *
     * @return string|null
     */
    public function getDoctorComment()
    {
        return $this->container['doctor_comment'];
    }

    /**
     * Sets doctor_comment
     *
     * @param string|null $doctor_comment doctor_comment
     *
     * @return self
     */
    public function setDoctorComment($doctor_comment)
    {
        if (is_null($doctor_comment)) {
            array_push($this->openAPINullablesSetToNull, 'doctor_comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('doctor_comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($doctor_comment) && (mb_strlen($doctor_comment) > 280)) {
            throw new \InvalidArgumentException('invalid length for $doctor_comment when calling PatientEvent., must be smaller than or equal to 280.');
        }

        $this->container['doctor_comment'] = $doctor_comment;

        return $this;
    }

    /**
     * Gets loinc
     *
     * @return string|null
     */
    public function getLoinc()
    {
        return $this->container['loinc'];
    }

    /**
     * Sets loinc
     *
     * @param string|null $loinc loinc
     *
     * @return self
     */
    public function setLoinc($loinc)
    {
        if (is_null($loinc)) {
            array_push($this->openAPINullablesSetToNull, 'loinc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loinc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($loinc) && (mb_strlen($loinc) > 20)) {
            throw new \InvalidArgumentException('invalid length for $loinc when calling PatientEvent., must be smaller than or equal to 20.');
        }

        $this->container['loinc'] = $loinc;

        return $this;
    }

    /**
     * Gets test_result_pdf
     *
     * @return string|null
     */
    public function getTestResultPdf()
    {
        return $this->container['test_result_pdf'];
    }

    /**
     * Sets test_result_pdf
     *
     * @param string|null $test_result_pdf test_result_pdf
     *
     * @return self
     */
    public function setTestResultPdf($test_result_pdf)
    {
        if (is_null($test_result_pdf)) {
            array_push($this->openAPINullablesSetToNull, 'test_result_pdf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_result_pdf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_result_pdf'] = $test_result_pdf;

        return $this;
    }

    /**
     * Gets cabin_number
     *
     * @return string|null
     */
    public function getCabinNumber()
    {
        return $this->container['cabin_number'];
    }

    /**
     * Sets cabin_number
     *
     * @param string|null $cabin_number cabin_number
     *
     * @return self
     */
    public function setCabinNumber($cabin_number)
    {
        if (is_null($cabin_number)) {
            array_push($this->openAPINullablesSetToNull, 'cabin_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cabin_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cabin_number'] = $cabin_number;

        return $this;
    }

    /**
     * Gets internal_code
     *
     * @return string|null
     */
    public function getInternalCode()
    {
        return $this->container['internal_code'];
    }

    /**
     * Sets internal_code
     *
     * @param string|null $internal_code internal_code
     *
     * @return self
     */
    public function setInternalCode($internal_code)
    {
        if (is_null($internal_code)) {
            throw new \InvalidArgumentException('non-nullable internal_code cannot be null');
        }
        $this->container['internal_code'] = $internal_code;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets test_password
     *
     * @return string|null
     */
    public function getTestPassword()
    {
        return $this->container['test_password'];
    }

    /**
     * Sets test_password
     *
     * @param string|null $test_password test_password
     *
     * @return self
     */
    public function setTestPassword($test_password)
    {
        if (is_null($test_password)) {
            array_push($this->openAPINullablesSetToNull, 'test_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_password'] = $test_password;

        return $this;
    }

    /**
     * Gets number_of_access_denied_events
     *
     * @return int|null
     */
    public function getNumberOfAccessDeniedEvents()
    {
        return $this->container['number_of_access_denied_events'];
    }

    /**
     * Sets number_of_access_denied_events
     *
     * @param int|null $number_of_access_denied_events number_of_access_denied_events
     *
     * @return self
     */
    public function setNumberOfAccessDeniedEvents($number_of_access_denied_events)
    {
        if (is_null($number_of_access_denied_events)) {
            throw new \InvalidArgumentException('non-nullable number_of_access_denied_events cannot be null');
        }
        $this->container['number_of_access_denied_events'] = $number_of_access_denied_events;

        return $this;
    }

    /**
     * Gets is_label_printed
     *
     * @return bool|null
     */
    public function getIsLabelPrinted()
    {
        return $this->container['is_label_printed'];
    }

    /**
     * Sets is_label_printed
     *
     * @param bool|null $is_label_printed is_label_printed
     *
     * @return self
     */
    public function setIsLabelPrinted($is_label_printed)
    {
        if (is_null($is_label_printed)) {
            throw new \InvalidArgumentException('non-nullable is_label_printed cannot be null');
        }
        $this->container['is_label_printed'] = $is_label_printed;

        return $this;
    }

    /**
     * Gets reminder_sent_at
     *
     * @return \DateTime|null
     */
    public function getReminderSentAt()
    {
        return $this->container['reminder_sent_at'];
    }

    /**
     * Sets reminder_sent_at
     *
     * @param \DateTime|null $reminder_sent_at reminder_sent_at
     *
     * @return self
     */
    public function setReminderSentAt($reminder_sent_at)
    {
        if (is_null($reminder_sent_at)) {
            array_push($this->openAPINullablesSetToNull, 'reminder_sent_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reminder_sent_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reminder_sent_at'] = $reminder_sent_at;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return string[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param string[]|null $documents documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets available_for_free_test_confirmed_at
     *
     * @return \DateTime|null
     */
    public function getAvailableForFreeTestConfirmedAt()
    {
        return $this->container['available_for_free_test_confirmed_at'];
    }

    /**
     * Sets available_for_free_test_confirmed_at
     *
     * @param \DateTime|null $available_for_free_test_confirmed_at available_for_free_test_confirmed_at
     *
     * @return self
     */
    public function setAvailableForFreeTestConfirmedAt($available_for_free_test_confirmed_at)
    {
        if (is_null($available_for_free_test_confirmed_at)) {
            array_push($this->openAPINullablesSetToNull, 'available_for_free_test_confirmed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_for_free_test_confirmed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['available_for_free_test_confirmed_at'] = $available_for_free_test_confirmed_at;

        return $this;
    }

    /**
     * Gets test_paid_confirmed_at
     *
     * @return \DateTime|null
     */
    public function getTestPaidConfirmedAt()
    {
        return $this->container['test_paid_confirmed_at'];
    }

    /**
     * Sets test_paid_confirmed_at
     *
     * @param \DateTime|null $test_paid_confirmed_at test_paid_confirmed_at
     *
     * @return self
     */
    public function setTestPaidConfirmedAt($test_paid_confirmed_at)
    {
        if (is_null($test_paid_confirmed_at)) {
            array_push($this->openAPINullablesSetToNull, 'test_paid_confirmed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_paid_confirmed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_paid_confirmed_at'] = $test_paid_confirmed_at;

        return $this;
    }

    /**
     * Gets order_product
     *
     * @return string|null
     */
    public function getOrderProduct()
    {
        return $this->container['order_product'];
    }

    /**
     * Sets order_product
     *
     * @param string|null $order_product order_product
     *
     * @return self
     */
    public function setOrderProduct($order_product)
    {
        if (is_null($order_product)) {
            array_push($this->openAPINullablesSetToNull, 'order_product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_product'] = $order_product;

        return $this;
    }

    /**
     * Gets order_uuid
     *
     * @return string|null
     */
    public function getOrderUuid()
    {
        return $this->container['order_uuid'];
    }

    /**
     * Sets order_uuid
     *
     * @param string|null $order_uuid order_uuid
     *
     * @return self
     */
    public function setOrderUuid($order_uuid)
    {
        if (is_null($order_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'order_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_uuid'] = $order_uuid;

        return $this;
    }

    /**
     * Gets sent_result_date
     *
     * @return \DateTime|null
     */
    public function getSentResultDate()
    {
        return $this->container['sent_result_date'];
    }

    /**
     * Sets sent_result_date
     *
     * @param \DateTime|null $sent_result_date sent_result_date
     *
     * @return self
     */
    public function setSentResultDate($sent_result_date)
    {
        if (is_null($sent_result_date)) {
            array_push($this->openAPINullablesSetToNull, 'sent_result_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sent_result_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sent_result_date'] = $sent_result_date;

        return $this;
    }

    /**
     * Gets loinc_display
     *
     * @return string|null
     */
    public function getLoincDisplay()
    {
        return $this->container['loinc_display'];
    }

    /**
     * Sets loinc_display
     *
     * @param string|null $loinc_display loinc_display
     *
     * @return self
     */
    public function setLoincDisplay($loinc_display)
    {
        if (is_null($loinc_display)) {
            array_push($this->openAPINullablesSetToNull, 'loinc_display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loinc_display', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loinc_display'] = $loinc_display;

        return $this;
    }

    /**
     * Gets updated_via
     *
     * @return string|null
     */
    public function getUpdatedVia()
    {
        return $this->container['updated_via'];
    }

    /**
     * Sets updated_via
     *
     * @param string|null $updated_via updated_via
     *
     * @return self
     */
    public function setUpdatedVia($updated_via)
    {
        if (is_null($updated_via)) {
            array_push($this->openAPINullablesSetToNull, 'updated_via');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_via', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_via'] = $updated_via;

        return $this;
    }

    /**
     * Gets created_via
     *
     * @return string|null
     */
    public function getCreatedVia()
    {
        return $this->container['created_via'];
    }

    /**
     * Sets created_via
     *
     * @param string|null $created_via created_via
     *
     * @return self
     */
    public function setCreatedVia($created_via)
    {
        if (is_null($created_via)) {
            array_push($this->openAPINullablesSetToNull, 'created_via');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_via', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_via'] = $created_via;

        return $this;
    }

    /**
     * Gets validated_at
     *
     * @return \DateTime|null
     */
    public function getValidatedAt()
    {
        return $this->container['validated_at'];
    }

    /**
     * Sets validated_at
     *
     * @param \DateTime|null $validated_at validated_at
     *
     * @return self
     */
    public function setValidatedAt($validated_at)
    {
        if (is_null($validated_at)) {
            array_push($this->openAPINullablesSetToNull, 'validated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validated_at'] = $validated_at;

        return $this;
    }

    /**
     * Gets test_workflow_type
     *
     * @return string|null
     */
    public function getTestWorkflowType()
    {
        return $this->container['test_workflow_type'];
    }

    /**
     * Sets test_workflow_type
     *
     * @param string|null $test_workflow_type test_workflow_type
     *
     * @return self
     */
    public function setTestWorkflowType($test_workflow_type)
    {
        if (is_null($test_workflow_type)) {
            array_push($this->openAPINullablesSetToNull, 'test_workflow_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_workflow_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_workflow_type'] = $test_workflow_type;

        return $this;
    }

    /**
     * Gets patient
     *
     * @return string|null
     */
    public function getPatient()
    {
        return $this->container['patient'];
    }

    /**
     * Sets patient
     *
     * @param string|null $patient patient
     *
     * @return self
     */
    public function setPatient($patient)
    {
        if (is_null($patient)) {
            array_push($this->openAPINullablesSetToNull, 'patient');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('patient', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['patient'] = $patient;

        return $this;
    }

    /**
     * Gets probe_identifiers
     *
     * @return string[]|null
     */
    public function getProbeIdentifiers()
    {
        return $this->container['probe_identifiers'];
    }

    /**
     * Sets probe_identifiers
     *
     * @param string[]|null $probe_identifiers probe_identifiers
     *
     * @return self
     */
    public function setProbeIdentifiers($probe_identifiers)
    {
        if (is_null($probe_identifiers)) {
            throw new \InvalidArgumentException('non-nullable probe_identifiers cannot be null');
        }
        $this->container['probe_identifiers'] = $probe_identifiers;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string|null
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string|null $location_name location_name
     *
     * @return self
     */
    public function setLocationName($location_name)
    {
        if (is_null($location_name)) {
            array_push($this->openAPINullablesSetToNull, 'location_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets results
     *
     * @return string[]|null
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param string[]|null $results results
     *
     * @return self
     */
    public function setResults($results)
    {
        if (is_null($results)) {
            array_push($this->openAPINullablesSetToNull, 'results');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('results', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets decision
     *
     * @return string|null
     */
    public function getDecision()
    {
        return $this->container['decision'];
    }

    /**
     * Sets decision
     *
     * @param string|null $decision decision
     *
     * @return self
     */
    public function setDecision($decision)
    {
        if (is_null($decision)) {
            array_push($this->openAPINullablesSetToNull, 'decision');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('decision', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['decision'] = $decision;

        return $this;
    }

    /**
     * Gets test_start_time
     *
     * @return \DateTime|null
     */
    public function getTestStartTime()
    {
        return $this->container['test_start_time'];
    }

    /**
     * Sets test_start_time
     *
     * @param \DateTime|null $test_start_time test_start_time
     *
     * @return self
     */
    public function setTestStartTime($test_start_time)
    {
        if (is_null($test_start_time)) {
            array_push($this->openAPINullablesSetToNull, 'test_start_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_start_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_start_time'] = $test_start_time;

        return $this;
    }

    /**
     * Gets test_end_time
     *
     * @return \DateTime|null
     */
    public function getTestEndTime()
    {
        return $this->container['test_end_time'];
    }

    /**
     * Sets test_end_time
     *
     * @param \DateTime|null $test_end_time test_end_time
     *
     * @return self
     */
    public function setTestEndTime($test_end_time)
    {
        if (is_null($test_end_time)) {
            array_push($this->openAPINullablesSetToNull, 'test_end_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_end_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_end_time'] = $test_end_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling PatientEvent., must be smaller than or equal to 100.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling PatientEvent., must be smaller than or equal to 100.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            array_push($this->openAPINullablesSetToNull, 'company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company) && (mb_strlen($company) > 200)) {
            throw new \InvalidArgumentException('invalid length for $company when calling PatientEvent., must be smaller than or equal to 200.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling PatientEvent., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gender) && (mb_strlen($gender) > 20)) {
            throw new \InvalidArgumentException('invalid length for $gender when calling PatientEvent., must be smaller than or equal to 20.');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets personal_id_number
     *
     * @return string|null
     */
    public function getPersonalIdNumber()
    {
        return $this->container['personal_id_number'];
    }

    /**
     * Sets personal_id_number
     *
     * @param string|null $personal_id_number personal_id_number
     *
     * @return self
     */
    public function setPersonalIdNumber($personal_id_number)
    {
        if (is_null($personal_id_number)) {
            array_push($this->openAPINullablesSetToNull, 'personal_id_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personal_id_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($personal_id_number) && (mb_strlen($personal_id_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $personal_id_number when calling PatientEvent., must be smaller than or equal to 100.');
        }

        $this->container['personal_id_number'] = $personal_id_number;

        return $this;
    }

    /**
     * Gets health_insurance_policy_number
     *
     * @return string|null
     */
    public function getHealthInsurancePolicyNumber()
    {
        return $this->container['health_insurance_policy_number'];
    }

    /**
     * Sets health_insurance_policy_number
     *
     * @param string|null $health_insurance_policy_number health_insurance_policy_number
     *
     * @return self
     */
    public function setHealthInsurancePolicyNumber($health_insurance_policy_number)
    {
        if (is_null($health_insurance_policy_number)) {
            array_push($this->openAPINullablesSetToNull, 'health_insurance_policy_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('health_insurance_policy_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($health_insurance_policy_number) && (mb_strlen($health_insurance_policy_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $health_insurance_policy_number when calling PatientEvent., must be smaller than or equal to 50.');
        }

        $this->container['health_insurance_policy_number'] = $health_insurance_policy_number;

        return $this;
    }

    /**
     * Gets health_insurance_company_number
     *
     * @return string|null
     */
    public function getHealthInsuranceCompanyNumber()
    {
        return $this->container['health_insurance_company_number'];
    }

    /**
     * Sets health_insurance_company_number
     *
     * @param string|null $health_insurance_company_number health_insurance_company_number
     *
     * @return self
     */
    public function setHealthInsuranceCompanyNumber($health_insurance_company_number)
    {
        if (is_null($health_insurance_company_number)) {
            array_push($this->openAPINullablesSetToNull, 'health_insurance_company_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('health_insurance_company_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($health_insurance_company_number) && (mb_strlen($health_insurance_company_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $health_insurance_company_number when calling PatientEvent., must be smaller than or equal to 50.');
        }

        $this->container['health_insurance_company_number'] = $health_insurance_company_number;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling PatientEvent., must be smaller than or equal to 100.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth date_of_birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            array_push($this->openAPINullablesSetToNull, 'date_of_birth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_of_birth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets address_street_and_house_number
     *
     * @return string|null
     */
    public function getAddressStreetAndHouseNumber()
    {
        return $this->container['address_street_and_house_number'];
    }

    /**
     * Sets address_street_and_house_number
     *
     * @param string|null $address_street_and_house_number address_street_and_house_number
     *
     * @return self
     */
    public function setAddressStreetAndHouseNumber($address_street_and_house_number)
    {
        if (is_null($address_street_and_house_number)) {
            array_push($this->openAPINullablesSetToNull, 'address_street_and_house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_street_and_house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_street_and_house_number'] = $address_street_and_house_number;

        return $this;
    }

    /**
     * Gets address_zip_code
     *
     * @return string|null
     */
    public function getAddressZipCode()
    {
        return $this->container['address_zip_code'];
    }

    /**
     * Sets address_zip_code
     *
     * @param string|null $address_zip_code address_zip_code
     *
     * @return self
     */
    public function setAddressZipCode($address_zip_code)
    {
        if (is_null($address_zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'address_zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_zip_code) && (mb_strlen($address_zip_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $address_zip_code when calling PatientEvent., must be smaller than or equal to 10.');
        }

        $this->container['address_zip_code'] = $address_zip_code;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string|null
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string|null $address_city address_city
     *
     * @return self
     */
    public function setAddressCity($address_city)
    {
        if (is_null($address_city)) {
            array_push($this->openAPINullablesSetToNull, 'address_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_city) && (mb_strlen($address_city) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address_city when calling PatientEvent., must be smaller than or equal to 100.');
        }

        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return string|null
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string|null $address_country address_country
     *
     * @return self
     */
    public function setAddressCountry($address_country)
    {
        if (is_null($address_country)) {
            array_push($this->openAPINullablesSetToNull, 'address_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_country) && (mb_strlen($address_country) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address_country when calling PatientEvent., must be smaller than or equal to 100.');
        }

        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets my_probatix_user_uuid
     *
     * @return string|null
     */
    public function getMyProbatixUserUuid()
    {
        return $this->container['my_probatix_user_uuid'];
    }

    /**
     * Sets my_probatix_user_uuid
     *
     * @param string|null $my_probatix_user_uuid my_probatix_user_uuid
     *
     * @return self
     */
    public function setMyProbatixUserUuid($my_probatix_user_uuid)
    {
        if (is_null($my_probatix_user_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'my_probatix_user_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('my_probatix_user_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['my_probatix_user_uuid'] = $my_probatix_user_uuid;

        return $this;
    }

    /**
     * Gets internal_patient_comment
     *
     * @return string|null
     */
    public function getInternalPatientComment()
    {
        return $this->container['internal_patient_comment'];
    }

    /**
     * Sets internal_patient_comment
     *
     * @param string|null $internal_patient_comment internal_patient_comment
     *
     * @return self
     */
    public function setInternalPatientComment($internal_patient_comment)
    {
        if (is_null($internal_patient_comment)) {
            array_push($this->openAPINullablesSetToNull, 'internal_patient_comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_patient_comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_patient_comment'] = $internal_patient_comment;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int|null
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int|null $age age
     *
     * @return self
     */
    public function setAge($age)
    {
        if (is_null($age)) {
            array_push($this->openAPINullablesSetToNull, 'age');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('age', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets hash_signature
     *
     * @return string|null
     */
    public function getHashSignature()
    {
        return $this->container['hash_signature'];
    }

    /**
     * Sets hash_signature
     *
     * @param string|null $hash_signature Has of relevant values to uniquely identify the Patient/Customer in order to avoid complicated indices.
     *
     * @return self
     */
    public function setHashSignature($hash_signature)
    {
        if (is_null($hash_signature)) {
            array_push($this->openAPINullablesSetToNull, 'hash_signature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hash_signature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hash_signature'] = $hash_signature;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return string|null
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param string|null $tenant tenant
     *
     * @return self
     */
    public function setTenant($tenant)
    {
        if (is_null($tenant)) {
            array_push($this->openAPINullablesSetToNull, 'tenant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets booking_time
     *
     * @return \DateTime|null
     */
    public function getBookingTime()
    {
        return $this->container['booking_time'];
    }

    /**
     * Sets booking_time
     *
     * @param \DateTime|null $booking_time required for APIPlatform deserialization, need to rename bookingTime on Frontend to remove this.
     *
     * @return self
     */
    public function setBookingTime($booking_time)
    {
        if (is_null($booking_time)) {
            throw new \InvalidArgumentException('non-nullable booking_time cannot be null');
        }
        $this->container['booking_time'] = $booking_time;

        return $this;
    }

    /**
     * Gets test_status_started_or_finished
     *
     * @return bool|null
     */
    public function getTestStatusStartedOrFinished()
    {
        return $this->container['test_status_started_or_finished'];
    }

    /**
     * Sets test_status_started_or_finished
     *
     * @param bool|null $test_status_started_or_finished test_status_started_or_finished
     *
     * @return self
     */
    public function setTestStatusStartedOrFinished($test_status_started_or_finished)
    {
        if (is_null($test_status_started_or_finished)) {
            throw new \InvalidArgumentException('non-nullable test_status_started_or_finished cannot be null');
        }
        $this->container['test_status_started_or_finished'] = $test_status_started_or_finished;

        return $this;
    }

    /**
     * Gets test_ended_regularly
     *
     * @return bool|null
     */
    public function getTestEndedRegularly()
    {
        return $this->container['test_ended_regularly'];
    }

    /**
     * Sets test_ended_regularly
     *
     * @param bool|null $test_ended_regularly test_ended_regularly
     *
     * @return self
     */
    public function setTestEndedRegularly($test_ended_regularly)
    {
        if (is_null($test_ended_regularly)) {
            throw new \InvalidArgumentException('non-nullable test_ended_regularly cannot be null');
        }
        $this->container['test_ended_regularly'] = $test_ended_regularly;

        return $this;
    }

    /**
     * Gets responsible_user_uuid
     *
     * @return string|null
     */
    public function getResponsibleUserUuid()
    {
        return $this->container['responsible_user_uuid'];
    }

    /**
     * Sets responsible_user_uuid
     *
     * @param string|null $responsible_user_uuid responsible_user_uuid
     *
     * @return self
     */
    public function setResponsibleUserUuid($responsible_user_uuid)
    {
        if (is_null($responsible_user_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'responsible_user_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responsible_user_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['responsible_user_uuid'] = $responsible_user_uuid;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets test_type_vaccination
     *
     * @return bool|null
     */
    public function getTestTypeVaccination()
    {
        return $this->container['test_type_vaccination'];
    }

    /**
     * Sets test_type_vaccination
     *
     * @param bool|null $test_type_vaccination test_type_vaccination
     *
     * @return self
     */
    public function setTestTypeVaccination($test_type_vaccination)
    {
        if (is_null($test_type_vaccination)) {
            throw new \InvalidArgumentException('non-nullable test_type_vaccination cannot be null');
        }
        $this->container['test_type_vaccination'] = $test_type_vaccination;

        return $this;
    }

    /**
     * Gets test_type_vitamin_d
     *
     * @return bool|null
     */
    public function getTestTypeVitaminD()
    {
        return $this->container['test_type_vitamin_d'];
    }

    /**
     * Sets test_type_vitamin_d
     *
     * @param bool|null $test_type_vitamin_d test_type_vitamin_d
     *
     * @return self
     */
    public function setTestTypeVitaminD($test_type_vitamin_d)
    {
        if (is_null($test_type_vitamin_d)) {
            throw new \InvalidArgumentException('non-nullable test_type_vitamin_d cannot be null');
        }
        $this->container['test_type_vitamin_d'] = $test_type_vitamin_d;

        return $this;
    }

    /**
     * Gets test_type_vital_test
     *
     * @return bool|null
     */
    public function getTestTypeVitalTest()
    {
        return $this->container['test_type_vital_test'];
    }

    /**
     * Sets test_type_vital_test
     *
     * @param bool|null $test_type_vital_test test_type_vital_test
     *
     * @return self
     */
    public function setTestTypeVitalTest($test_type_vital_test)
    {
        if (is_null($test_type_vital_test)) {
            throw new \InvalidArgumentException('non-nullable test_type_vital_test cannot be null');
        }
        $this->container['test_type_vital_test'] = $test_type_vital_test;

        return $this;
    }

    /**
     * Gets test_type_small_blood_count
     *
     * @return bool|null
     */
    public function getTestTypeSmallBloodCount()
    {
        return $this->container['test_type_small_blood_count'];
    }

    /**
     * Sets test_type_small_blood_count
     *
     * @param bool|null $test_type_small_blood_count test_type_small_blood_count
     *
     * @return self
     */
    public function setTestTypeSmallBloodCount($test_type_small_blood_count)
    {
        if (is_null($test_type_small_blood_count)) {
            throw new \InvalidArgumentException('non-nullable test_type_small_blood_count cannot be null');
        }
        $this->container['test_type_small_blood_count'] = $test_type_small_blood_count;

        return $this;
    }

    /**
     * Gets test_type_basic_blood_test
     *
     * @return bool|null
     */
    public function getTestTypeBasicBloodTest()
    {
        return $this->container['test_type_basic_blood_test'];
    }

    /**
     * Sets test_type_basic_blood_test
     *
     * @param bool|null $test_type_basic_blood_test test_type_basic_blood_test
     *
     * @return self
     */
    public function setTestTypeBasicBloodTest($test_type_basic_blood_test)
    {
        if (is_null($test_type_basic_blood_test)) {
            throw new \InvalidArgumentException('non-nullable test_type_basic_blood_test cannot be null');
        }
        $this->container['test_type_basic_blood_test'] = $test_type_basic_blood_test;

        return $this;
    }

    /**
     * Gets label_printed
     *
     * @return bool|null
     */
    public function getLabelPrinted()
    {
        return $this->container['label_printed'];
    }

    /**
     * Sets label_printed
     *
     * @param bool|null $label_printed label_printed
     *
     * @return self
     */
    public function setLabelPrinted($label_printed)
    {
        if (is_null($label_printed)) {
            throw new \InvalidArgumentException('non-nullable label_printed cannot be null');
        }
        $this->container['label_printed'] = $label_printed;

        return $this;
    }

    /**
     * Gets checked_in
     *
     * @return bool|null
     */
    public function getCheckedIn()
    {
        return $this->container['checked_in'];
    }

    /**
     * Sets checked_in
     *
     * @param bool|null $checked_in checked_in
     *
     * @return self
     */
    public function setCheckedIn($checked_in)
    {
        if (is_null($checked_in)) {
            throw new \InvalidArgumentException('non-nullable checked_in cannot be null');
        }
        $this->container['checked_in'] = $checked_in;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            array_push($this->openAPINullablesSetToNull, 'product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets product_uuid
     *
     * @return string|null
     */
    public function getProductUuid()
    {
        return $this->container['product_uuid'];
    }

    /**
     * Sets product_uuid
     *
     * @param string|null $product_uuid product_uuid
     *
     * @return self
     */
    public function setProductUuid($product_uuid)
    {
        if (is_null($product_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'product_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_uuid'] = $product_uuid;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name product_name
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            array_push($this->openAPINullablesSetToNull, 'product_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets documents_sorted_by_created_at
     *
     * @return \OpenAPI\Client\Model\Collection|null
     */
    public function getDocumentsSortedByCreatedAt()
    {
        return $this->container['documents_sorted_by_created_at'];
    }

    /**
     * Sets documents_sorted_by_created_at
     *
     * @param \OpenAPI\Client\Model\Collection|null $documents_sorted_by_created_at documents_sorted_by_created_at
     *
     * @return self
     */
    public function setDocumentsSortedByCreatedAt($documents_sorted_by_created_at)
    {
        if (is_null($documents_sorted_by_created_at)) {
            throw new \InvalidArgumentException('non-nullable documents_sorted_by_created_at cannot be null');
        }
        $this->container['documents_sorted_by_created_at'] = $documents_sorted_by_created_at;

        return $this;
    }

    /**
     * Gets product_gross_price
     *
     * @return int|null
     */
    public function getProductGrossPrice()
    {
        return $this->container['product_gross_price'];
    }

    /**
     * Sets product_gross_price
     *
     * @param int|null $product_gross_price product_gross_price
     *
     * @return self
     */
    public function setProductGrossPrice($product_gross_price)
    {
        if (is_null($product_gross_price)) {
            array_push($this->openAPINullablesSetToNull, 'product_gross_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_gross_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_gross_price'] = $product_gross_price;

        return $this;
    }

    /**
     * Gets show_payment_status
     *
     * @return bool|null
     */
    public function getShowPaymentStatus()
    {
        return $this->container['show_payment_status'];
    }

    /**
     * Sets show_payment_status
     *
     * @param bool|null $show_payment_status used in Twig
     *
     * @return self
     */
    public function setShowPaymentStatus($show_payment_status)
    {
        if (is_null($show_payment_status)) {
            throw new \InvalidArgumentException('non-nullable show_payment_status cannot be null');
        }
        $this->container['show_payment_status'] = $show_payment_status;

        return $this;
    }

    /**
     * Gets test_free
     *
     * @return bool|null
     */
    public function getTestFree()
    {
        return $this->container['test_free'];
    }

    /**
     * Sets test_free
     *
     * @param bool|null $test_free test_free
     *
     * @return self
     */
    public function setTestFree($test_free)
    {
        if (is_null($test_free)) {
            throw new \InvalidArgumentException('non-nullable test_free cannot be null');
        }
        $this->container['test_free'] = $test_free;

        return $this;
    }

    /**
     * Gets appointment_time_date_format
     *
     * @return string|null
     */
    public function getAppointmentTimeDateFormat()
    {
        return $this->container['appointment_time_date_format'];
    }

    /**
     * Sets appointment_time_date_format
     *
     * @param string|null $appointment_time_date_format appointment_time_date_format
     *
     * @return self
     */
    public function setAppointmentTimeDateFormat($appointment_time_date_format)
    {
        if (is_null($appointment_time_date_format)) {
            array_push($this->openAPINullablesSetToNull, 'appointment_time_date_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appointment_time_date_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appointment_time_date_format'] = $appointment_time_date_format;

        return $this;
    }

    /**
     * Gets test_center_location_name
     *
     * @return string|null
     */
    public function getTestCenterLocationName()
    {
        return $this->container['test_center_location_name'];
    }

    /**
     * Sets test_center_location_name
     *
     * @param string|null $test_center_location_name test_center_location_name
     *
     * @return self
     */
    public function setTestCenterLocationName($test_center_location_name)
    {
        if (is_null($test_center_location_name)) {
            array_push($this->openAPINullablesSetToNull, 'test_center_location_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_center_location_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_center_location_name'] = $test_center_location_name;

        return $this;
    }

    /**
     * Gets test_center_location_address
     *
     * @return string|null
     */
    public function getTestCenterLocationAddress()
    {
        return $this->container['test_center_location_address'];
    }

    /**
     * Sets test_center_location_address
     *
     * @param string|null $test_center_location_address test_center_location_address
     *
     * @return self
     */
    public function setTestCenterLocationAddress($test_center_location_address)
    {
        if (is_null($test_center_location_address)) {
            array_push($this->openAPINullablesSetToNull, 'test_center_location_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_center_location_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_center_location_address'] = $test_center_location_address;

        return $this;
    }

    /**
     * Gets test_center_location_description
     *
     * @return string|null
     */
    public function getTestCenterLocationDescription()
    {
        return $this->container['test_center_location_description'];
    }

    /**
     * Sets test_center_location_description
     *
     * @param string|null $test_center_location_description test_center_location_description
     *
     * @return self
     */
    public function setTestCenterLocationDescription($test_center_location_description)
    {
        if (is_null($test_center_location_description)) {
            array_push($this->openAPINullablesSetToNull, 'test_center_location_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_center_location_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_center_location_description'] = $test_center_location_description;

        return $this;
    }

    /**
     * Gets sent_result
     *
     * @return bool|null
     */
    public function getSentResult()
    {
        return $this->container['sent_result'];
    }

    /**
     * Sets sent_result
     *
     * @param bool|null $sent_result sent_result
     *
     * @return self
     */
    public function setSentResult($sent_result)
    {
        if (is_null($sent_result)) {
            throw new \InvalidArgumentException('non-nullable sent_result cannot be null');
        }
        $this->container['sent_result'] = $sent_result;

        return $this;
    }

    /**
     * Gets google_maps_url_for_test_location
     *
     * @return string|null
     */
    public function getGoogleMapsUrlForTestLocation()
    {
        return $this->container['google_maps_url_for_test_location'];
    }

    /**
     * Sets google_maps_url_for_test_location
     *
     * @param string|null $google_maps_url_for_test_location google_maps_url_for_test_location
     *
     * @return self
     */
    public function setGoogleMapsUrlForTestLocation($google_maps_url_for_test_location)
    {
        if (is_null($google_maps_url_for_test_location)) {
            array_push($this->openAPINullablesSetToNull, 'google_maps_url_for_test_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('google_maps_url_for_test_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['google_maps_url_for_test_location'] = $google_maps_url_for_test_location;

        return $this;
    }

    /**
     * Gets certificate_downloadable
     *
     * @return bool|null
     */
    public function getCertificateDownloadable()
    {
        return $this->container['certificate_downloadable'];
    }

    /**
     * Sets certificate_downloadable
     *
     * @param bool|null $certificate_downloadable certificate_downloadable
     *
     * @return self
     */
    public function setCertificateDownloadable($certificate_downloadable)
    {
        if (is_null($certificate_downloadable)) {
            throw new \InvalidArgumentException('non-nullable certificate_downloadable cannot be null');
        }
        $this->container['certificate_downloadable'] = $certificate_downloadable;

        return $this;
    }

    /**
     * Gets product_description
     *
     * @return string|null
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param string|null $product_description product_description
     *
     * @return self
     */
    public function setProductDescription($product_description)
    {
        if (is_null($product_description)) {
            array_push($this->openAPINullablesSetToNull, 'product_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_description'] = $product_description;

        return $this;
    }

    /**
     * Gets updated_via_unknown
     *
     * @return bool|null
     */
    public function getUpdatedViaUnknown()
    {
        return $this->container['updated_via_unknown'];
    }

    /**
     * Sets updated_via_unknown
     *
     * @param bool|null $updated_via_unknown updated_via_unknown
     *
     * @return self
     */
    public function setUpdatedViaUnknown($updated_via_unknown)
    {
        if (is_null($updated_via_unknown)) {
            throw new \InvalidArgumentException('non-nullable updated_via_unknown cannot be null');
        }
        $this->container['updated_via_unknown'] = $updated_via_unknown;

        return $this;
    }

    /**
     * Gets not_updated_via_lab_api
     *
     * @return bool|null
     */
    public function getNotUpdatedViaLabApi()
    {
        return $this->container['not_updated_via_lab_api'];
    }

    /**
     * Sets not_updated_via_lab_api
     *
     * @param bool|null $not_updated_via_lab_api not_updated_via_lab_api
     *
     * @return self
     */
    public function setNotUpdatedViaLabApi($not_updated_via_lab_api)
    {
        if (is_null($not_updated_via_lab_api)) {
            throw new \InvalidArgumentException('non-nullable not_updated_via_lab_api cannot be null');
        }
        $this->container['not_updated_via_lab_api'] = $not_updated_via_lab_api;

        return $this;
    }

    /**
     * Gets test_workflow_lab_evaluation_only
     *
     * @return bool|null
     */
    public function getTestWorkflowLabEvaluationOnly()
    {
        return $this->container['test_workflow_lab_evaluation_only'];
    }

    /**
     * Sets test_workflow_lab_evaluation_only
     *
     * @param bool|null $test_workflow_lab_evaluation_only test_workflow_lab_evaluation_only
     *
     * @return self
     */
    public function setTestWorkflowLabEvaluationOnly($test_workflow_lab_evaluation_only)
    {
        if (is_null($test_workflow_lab_evaluation_only)) {
            throw new \InvalidArgumentException('non-nullable test_workflow_lab_evaluation_only cannot be null');
        }
        $this->container['test_workflow_lab_evaluation_only'] = $test_workflow_lab_evaluation_only;

        return $this;
    }

    /**
     * Gets test_workflow_full
     *
     * @return bool|null
     */
    public function getTestWorkflowFull()
    {
        return $this->container['test_workflow_full'];
    }

    /**
     * Sets test_workflow_full
     *
     * @param bool|null $test_workflow_full test_workflow_full
     *
     * @return self
     */
    public function setTestWorkflowFull($test_workflow_full)
    {
        if (is_null($test_workflow_full)) {
            throw new \InvalidArgumentException('non-nullable test_workflow_full cannot be null');
        }
        $this->container['test_workflow_full'] = $test_workflow_full;

        return $this;
    }

    /**
     * Gets laboratory_trait
     *
     * @return mixed|null
     */
    public function getLaboratoryTrait()
    {
        return $this->container['laboratory_trait'];
    }

    /**
     * Sets laboratory_trait
     *
     * @param mixed|null $laboratory_trait Helper functions to easily see of a class has a certain trait. Not optimal, but ok for now.
     *
     * @return self
     */
    public function setLaboratoryTrait($laboratory_trait)
    {
        if (is_null($laboratory_trait)) {
            array_push($this->openAPINullablesSetToNull, 'laboratory_trait');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('laboratory_trait', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['laboratory_trait'] = $laboratory_trait;

        return $this;
    }

    /**
     * Gets external_id_trait
     *
     * @return mixed|null
     */
    public function getExternalIdTrait()
    {
        return $this->container['external_id_trait'];
    }

    /**
     * Sets external_id_trait
     *
     * @param mixed|null $external_id_trait external_id_trait
     *
     * @return self
     */
    public function setExternalIdTrait($external_id_trait)
    {
        if (is_null($external_id_trait)) {
            array_push($this->openAPINullablesSetToNull, 'external_id_trait');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_id_trait', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_id_trait'] = $external_id_trait;

        return $this;
    }

    /**
     * Gets weird_positive_value_trait
     *
     * @return mixed|null
     */
    public function getWeirdPositiveValueTrait()
    {
        return $this->container['weird_positive_value_trait'];
    }

    /**
     * Sets weird_positive_value_trait
     *
     * @param mixed|null $weird_positive_value_trait weird_positive_value_trait
     *
     * @return self
     */
    public function setWeirdPositiveValueTrait($weird_positive_value_trait)
    {
        if (is_null($weird_positive_value_trait)) {
            array_push($this->openAPINullablesSetToNull, 'weird_positive_value_trait');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weird_positive_value_trait', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weird_positive_value_trait'] = $weird_positive_value_trait;

        return $this;
    }

    /**
     * Gets result_trait
     *
     * @return mixed|null
     */
    public function getResultTrait()
    {
        return $this->container['result_trait'];
    }

    /**
     * Sets result_trait
     *
     * @param mixed|null $result_trait result_trait
     *
     * @return self
     */
    public function setResultTrait($result_trait)
    {
        if (is_null($result_trait)) {
            array_push($this->openAPINullablesSetToNull, 'result_trait');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result_trait', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['result_trait'] = $result_trait;

        return $this;
    }

    /**
     * Gets trait
     *
     * @return mixed|null
     */
    public function getTrait()
    {
        return $this->container['trait'];
    }

    /**
     * Sets trait
     *
     * @param mixed|null $trait trait
     *
     * @return self
     */
    public function setTrait($trait)
    {
        if (is_null($trait)) {
            array_push($this->openAPINullablesSetToNull, 'trait');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trait', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trait'] = $trait;

        return $this;
    }

    /**
     * Gets method
     *
     * @return mixed|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param mixed|null $method method
     *
     * @return self
     */
    public function setMethod($method)
    {
        if (is_null($method)) {
            array_push($this->openAPINullablesSetToNull, 'method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets computed_hash_signature
     *
     * @return string|null
     */
    public function getComputedHashSignature()
    {
        return $this->container['computed_hash_signature'];
    }

    /**
     * Sets computed_hash_signature
     *
     * @param string|null $computed_hash_signature computed_hash_signature
     *
     * @return self
     */
    public function setComputedHashSignature($computed_hash_signature)
    {
        if (is_null($computed_hash_signature)) {
            throw new \InvalidArgumentException('non-nullable computed_hash_signature cannot be null');
        }
        $this->container['computed_hash_signature'] = $computed_hash_signature;

        return $this;
    }

    /**
     * Gets probe_identifiers_ids
     *
     * @return string[]|null
     */
    public function getProbeIdentifiersIds()
    {
        return $this->container['probe_identifiers_ids'];
    }

    /**
     * Sets probe_identifiers_ids
     *
     * @param string[]|null $probe_identifiers_ids probe_identifiers_ids
     *
     * @return self
     */
    public function setProbeIdentifiersIds($probe_identifiers_ids)
    {
        if (is_null($probe_identifiers_ids)) {
            throw new \InvalidArgumentException('non-nullable probe_identifiers_ids cannot be null');
        }
        $this->container['probe_identifiers_ids'] = $probe_identifiers_ids;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets salt
     *
     * @return string|null
     */
    public function getSalt()
    {
        return $this->container['salt'];
    }

    /**
     * Sets salt
     *
     * @param string|null $salt salt
     *
     * @return self
     */
    public function setSalt($salt)
    {
        if (is_null($salt)) {
            throw new \InvalidArgumentException('non-nullable salt cannot be null');
        }
        $this->container['salt'] = $salt;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets user_identifier
     *
     * @return string|null
     */
    public function getUserIdentifier()
    {
        return $this->container['user_identifier'];
    }

    /**
     * Sets user_identifier
     *
     * @param string|null $user_identifier user_identifier
     *
     * @return self
     */
    public function setUserIdentifier($user_identifier)
    {
        if (is_null($user_identifier)) {
            throw new \InvalidArgumentException('non-nullable user_identifier cannot be null');
        }
        $this->container['user_identifier'] = $user_identifier;

        return $this;
    }

    /**
     * Gets result_values
     *
     * @return \OpenAPI\Client\Model\ResultValue[]|null
     */
    public function getResultValues()
    {
        return $this->container['result_values'];
    }

    /**
     * Sets result_values
     *
     * @param \OpenAPI\Client\Model\ResultValue[]|null $result_values result_values
     *
     * @return self
     */
    public function setResultValues($result_values)
    {
        if (is_null($result_values)) {
            array_push($this->openAPINullablesSetToNull, 'result_values');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result_values', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['result_values'] = $result_values;

        return $this;
    }

    /**
     * Gets decision_invalid
     *
     * @return bool|null
     */
    public function getDecisionInvalid()
    {
        return $this->container['decision_invalid'];
    }

    /**
     * Sets decision_invalid
     *
     * @param bool|null $decision_invalid Helper functions for decision.
     *
     * @return self
     */
    public function setDecisionInvalid($decision_invalid)
    {
        if (is_null($decision_invalid)) {
            throw new \InvalidArgumentException('non-nullable decision_invalid cannot be null');
        }
        $this->container['decision_invalid'] = $decision_invalid;

        return $this;
    }

    /**
     * Gets decision_ambiguous
     *
     * @return bool|null
     */
    public function getDecisionAmbiguous()
    {
        return $this->container['decision_ambiguous'];
    }

    /**
     * Sets decision_ambiguous
     *
     * @param bool|null $decision_ambiguous decision_ambiguous
     *
     * @return self
     */
    public function setDecisionAmbiguous($decision_ambiguous)
    {
        if (is_null($decision_ambiguous)) {
            throw new \InvalidArgumentException('non-nullable decision_ambiguous cannot be null');
        }
        $this->container['decision_ambiguous'] = $decision_ambiguous;

        return $this;
    }

    /**
     * Gets decision_positive
     *
     * @return bool|null
     */
    public function getDecisionPositive()
    {
        return $this->container['decision_positive'];
    }

    /**
     * Sets decision_positive
     *
     * @param bool|null $decision_positive decision_positive
     *
     * @return self
     */
    public function setDecisionPositive($decision_positive)
    {
        if (is_null($decision_positive)) {
            throw new \InvalidArgumentException('non-nullable decision_positive cannot be null');
        }
        $this->container['decision_positive'] = $decision_positive;

        return $this;
    }

    /**
     * Gets decision_negative
     *
     * @return bool|null
     */
    public function getDecisionNegative()
    {
        return $this->container['decision_negative'];
    }

    /**
     * Sets decision_negative
     *
     * @param bool|null $decision_negative decision_negative
     *
     * @return self
     */
    public function setDecisionNegative($decision_negative)
    {
        if (is_null($decision_negative)) {
            throw new \InvalidArgumentException('non-nullable decision_negative cannot be null');
        }
        $this->container['decision_negative'] = $decision_negative;

        return $this;
    }

    /**
     * Gets decision_unknown
     *
     * @return bool|null
     */
    public function getDecisionUnknown()
    {
        return $this->container['decision_unknown'];
    }

    /**
     * Sets decision_unknown
     *
     * @param bool|null $decision_unknown decision_unknown
     *
     * @return self
     */
    public function setDecisionUnknown($decision_unknown)
    {
        if (is_null($decision_unknown)) {
            throw new \InvalidArgumentException('non-nullable decision_unknown cannot be null');
        }
        $this->container['decision_unknown'] = $decision_unknown;

        return $this;
    }

    /**
     * Gets decision_insufficient
     *
     * @return bool|null
     */
    public function getDecisionInsufficient()
    {
        return $this->container['decision_insufficient'];
    }

    /**
     * Sets decision_insufficient
     *
     * @param bool|null $decision_insufficient decision_insufficient
     *
     * @return self
     */
    public function setDecisionInsufficient($decision_insufficient)
    {
        if (is_null($decision_insufficient)) {
            throw new \InvalidArgumentException('non-nullable decision_insufficient cannot be null');
        }
        $this->container['decision_insufficient'] = $decision_insufficient;

        return $this;
    }

    /**
     * Gets decision_optimal
     *
     * @return bool|null
     */
    public function getDecisionOptimal()
    {
        return $this->container['decision_optimal'];
    }

    /**
     * Sets decision_optimal
     *
     * @param bool|null $decision_optimal decision_optimal
     *
     * @return self
     */
    public function setDecisionOptimal($decision_optimal)
    {
        if (is_null($decision_optimal)) {
            throw new \InvalidArgumentException('non-nullable decision_optimal cannot be null');
        }
        $this->container['decision_optimal'] = $decision_optimal;

        return $this;
    }

    /**
     * Gets decision_oversupply
     *
     * @return bool|null
     */
    public function getDecisionOversupply()
    {
        return $this->container['decision_oversupply'];
    }

    /**
     * Sets decision_oversupply
     *
     * @param bool|null $decision_oversupply decision_oversupply
     *
     * @return self
     */
    public function setDecisionOversupply($decision_oversupply)
    {
        if (is_null($decision_oversupply)) {
            throw new \InvalidArgumentException('non-nullable decision_oversupply cannot be null');
        }
        $this->container['decision_oversupply'] = $decision_oversupply;

        return $this;
    }

    /**
     * Gets result_value
     *
     * @return string|null
     */
    public function getResultValue()
    {
        return $this->container['result_value'];
    }

    /**
     * Sets result_value
     *
     * @param string|null $result_value EO Helper functions to easily see of a class has a certain trait. Not optimal, but ok for now.
     *
     * @return self
     */
    public function setResultValue($result_value)
    {
        if (is_null($result_value)) {
            throw new \InvalidArgumentException('non-nullable result_value cannot be null');
        }
        $this->container['result_value'] = $result_value;

        return $this;
    }

    /**
     * Gets multiple_biomarker_result
     *
     * @return bool|null
     */
    public function getMultipleBiomarkerResult()
    {
        return $this->container['multiple_biomarker_result'];
    }

    /**
     * Sets multiple_biomarker_result
     *
     * @param bool|null $multiple_biomarker_result multiple_biomarker_result
     *
     * @return self
     */
    public function setMultipleBiomarkerResult($multiple_biomarker_result)
    {
        if (is_null($multiple_biomarker_result)) {
            throw new \InvalidArgumentException('non-nullable multiple_biomarker_result cannot be null');
        }
        $this->container['multiple_biomarker_result'] = $multiple_biomarker_result;

        return $this;
    }

    /**
     * Gets decision_from_single_result_value
     *
     * @return \OpenAPI\Client\Model\ResultValue|null
     */
    public function getDecisionFromSingleResultValue()
    {
        return $this->container['decision_from_single_result_value'];
    }

    /**
     * Sets decision_from_single_result_value
     *
     * @param \OpenAPI\Client\Model\ResultValue|null $decision_from_single_result_value decision_from_single_result_value
     *
     * @return self
     */
    public function setDecisionFromSingleResultValue($decision_from_single_result_value)
    {
        if (is_null($decision_from_single_result_value)) {
            array_push($this->openAPINullablesSetToNull, 'decision_from_single_result_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('decision_from_single_result_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['decision_from_single_result_value'] = $decision_from_single_result_value;

        return $this;
    }

    /**
     * Gets status_finished
     *
     * @return bool|null
     */
    public function getStatusFinished()
    {
        return $this->container['status_finished'];
    }

    /**
     * Sets status_finished
     *
     * @param bool|null $status_finished status_finished
     *
     * @return self
     */
    public function setStatusFinished($status_finished)
    {
        if (is_null($status_finished)) {
            throw new \InvalidArgumentException('non-nullable status_finished cannot be null');
        }
        $this->container['status_finished'] = $status_finished;

        return $this;
    }

    /**
     * Gets status_conducted
     *
     * @return bool|null
     */
    public function getStatusConducted()
    {
        return $this->container['status_conducted'];
    }

    /**
     * Sets status_conducted
     *
     * @param bool|null $status_conducted status_conducted
     *
     * @return self
     */
    public function setStatusConducted($status_conducted)
    {
        if (is_null($status_conducted)) {
            throw new \InvalidArgumentException('non-nullable status_conducted cannot be null');
        }
        $this->container['status_conducted'] = $status_conducted;

        return $this;
    }

    /**
     * Gets status_cancelled
     *
     * @return bool|null
     */
    public function getStatusCancelled()
    {
        return $this->container['status_cancelled'];
    }

    /**
     * Sets status_cancelled
     *
     * @param bool|null $status_cancelled status_cancelled
     *
     * @return self
     */
    public function setStatusCancelled($status_cancelled)
    {
        if (is_null($status_cancelled)) {
            throw new \InvalidArgumentException('non-nullable status_cancelled cannot be null');
        }
        $this->container['status_cancelled'] = $status_cancelled;

        return $this;
    }

    /**
     * Gets status_new
     *
     * @return bool|null
     */
    public function getStatusNew()
    {
        return $this->container['status_new'];
    }

    /**
     * Sets status_new
     *
     * @param bool|null $status_new status_new
     *
     * @return self
     */
    public function setStatusNew($status_new)
    {
        if (is_null($status_new)) {
            throw new \InvalidArgumentException('non-nullable status_new cannot be null');
        }
        $this->container['status_new'] = $status_new;

        return $this;
    }

    /**
     * Gets status_draft
     *
     * @return bool|null
     */
    public function getStatusDraft()
    {
        return $this->container['status_draft'];
    }

    /**
     * Sets status_draft
     *
     * @param bool|null $status_draft status_draft
     *
     * @return self
     */
    public function setStatusDraft($status_draft)
    {
        if (is_null($status_draft)) {
            throw new \InvalidArgumentException('non-nullable status_draft cannot be null');
        }
        $this->container['status_draft'] = $status_draft;

        return $this;
    }

    /**
     * Gets status_started
     *
     * @return bool|null
     */
    public function getStatusStarted()
    {
        return $this->container['status_started'];
    }

    /**
     * Sets status_started
     *
     * @param bool|null $status_started status_started
     *
     * @return self
     */
    public function setStatusStarted($status_started)
    {
        if (is_null($status_started)) {
            throw new \InvalidArgumentException('non-nullable status_started cannot be null');
        }
        $this->container['status_started'] = $status_started;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets underage
     *
     * @return bool|null
     */
    public function getUnderage()
    {
        return $this->container['underage'];
    }

    /**
     * Sets underage
     *
     * @param bool|null $underage underage
     *
     * @return self
     */
    public function setUnderage($underage)
    {
        if (is_null($underage)) {
            throw new \InvalidArgumentException('non-nullable underage cannot be null');
        }
        $this->container['underage'] = $underage;

        return $this;
    }

    /**
     * Gets email_address_dummy
     *
     * @return bool|null
     */
    public function getEmailAddressDummy()
    {
        return $this->container['email_address_dummy'];
    }

    /**
     * Sets email_address_dummy
     *
     * @param bool|null $email_address_dummy email_address_dummy
     *
     * @return self
     */
    public function setEmailAddressDummy($email_address_dummy)
    {
        if (is_null($email_address_dummy)) {
            throw new \InvalidArgumentException('non-nullable email_address_dummy cannot be null');
        }
        $this->container['email_address_dummy'] = $email_address_dummy;

        return $this;
    }

    /**
     * Gets full_address
     *
     * @return string|null
     */
    public function getFullAddress()
    {
        return $this->container['full_address'];
    }

    /**
     * Sets full_address
     *
     * @param string|null $full_address full_address
     *
     * @return self
     */
    public function setFullAddress($full_address)
    {
        if (is_null($full_address)) {
            throw new \InvalidArgumentException('non-nullable full_address cannot be null');
        }
        $this->container['full_address'] = $full_address;

        return $this;
    }

    /**
     * Gets personal_string
     *
     * @return string|null
     */
    public function getPersonalString()
    {
        return $this->container['personal_string'];
    }

    /**
     * Sets personal_string
     *
     * @param string|null $personal_string personal_string
     *
     * @return self
     */
    public function setPersonalString($personal_string)
    {
        if (is_null($personal_string)) {
            throw new \InvalidArgumentException('non-nullable personal_string cannot be null');
        }
        $this->container['personal_string'] = $personal_string;

        return $this;
    }

    /**
     * Gets patient_address
     *
     * @return string[]|null
     */
    public function getPatientAddress()
    {
        return $this->container['patient_address'];
    }

    /**
     * Sets patient_address
     *
     * @param string[]|null $patient_address patient_address
     *
     * @return self
     */
    public function setPatientAddress($patient_address)
    {
        if (is_null($patient_address)) {
            throw new \InvalidArgumentException('non-nullable patient_address cannot be null');
        }
        $this->container['patient_address'] = $patient_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


