<?php
/**
 * ProbatixInstanceInstanceRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProbatixInstanceInstanceRead Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProbatixInstanceInstanceRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProbatixInstance-instance.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_url' => 'string',
        'deployment_stage' => 'string',
        'customer_email' => 'string',
        'super_admin_username' => 'string',
        'super_admin_password' => 'string',
        'reporting_api_key' => 'string',
        'response_message' => 'string',
        'redirect_url' => 'string',
        'billing_address_street_and_house_number' => 'string',
        'billing_address_zip_code' => 'string',
        'billing_address_country' => 'string',
        'billing_address_city' => 'string',
        'responsible_person' => 'string',
        'role' => 'string',
        'tenant_uuid' => 'string',
        'prefix' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_url' => null,
        'deployment_stage' => null,
        'customer_email' => null,
        'super_admin_username' => null,
        'super_admin_password' => null,
        'reporting_api_key' => null,
        'response_message' => null,
        'redirect_url' => null,
        'billing_address_street_and_house_number' => null,
        'billing_address_zip_code' => null,
        'billing_address_country' => null,
        'billing_address_city' => null,
        'responsible_person' => null,
        'role' => null,
        'tenant_uuid' => null,
        'prefix' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base_url' => false,
		'deployment_stage' => false,
		'customer_email' => true,
		'super_admin_username' => true,
		'super_admin_password' => true,
		'reporting_api_key' => true,
		'response_message' => true,
		'redirect_url' => true,
		'billing_address_street_and_house_number' => true,
		'billing_address_zip_code' => true,
		'billing_address_country' => true,
		'billing_address_city' => true,
		'responsible_person' => true,
		'role' => true,
		'tenant_uuid' => true,
		'prefix' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_url' => 'baseUrl',
        'deployment_stage' => 'deploymentStage',
        'customer_email' => 'customerEmail',
        'super_admin_username' => 'superAdminUsername',
        'super_admin_password' => 'superAdminPassword',
        'reporting_api_key' => 'reportingApiKey',
        'response_message' => 'responseMessage',
        'redirect_url' => 'redirectUrl',
        'billing_address_street_and_house_number' => 'billingAddressStreetAndHouseNumber',
        'billing_address_zip_code' => 'billingAddressZipCode',
        'billing_address_country' => 'billingAddressCountry',
        'billing_address_city' => 'billingAddressCity',
        'responsible_person' => 'responsiblePerson',
        'role' => 'role',
        'tenant_uuid' => 'tenantUuid',
        'prefix' => 'prefix'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_url' => 'setBaseUrl',
        'deployment_stage' => 'setDeploymentStage',
        'customer_email' => 'setCustomerEmail',
        'super_admin_username' => 'setSuperAdminUsername',
        'super_admin_password' => 'setSuperAdminPassword',
        'reporting_api_key' => 'setReportingApiKey',
        'response_message' => 'setResponseMessage',
        'redirect_url' => 'setRedirectUrl',
        'billing_address_street_and_house_number' => 'setBillingAddressStreetAndHouseNumber',
        'billing_address_zip_code' => 'setBillingAddressZipCode',
        'billing_address_country' => 'setBillingAddressCountry',
        'billing_address_city' => 'setBillingAddressCity',
        'responsible_person' => 'setResponsiblePerson',
        'role' => 'setRole',
        'tenant_uuid' => 'setTenantUuid',
        'prefix' => 'setPrefix'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_url' => 'getBaseUrl',
        'deployment_stage' => 'getDeploymentStage',
        'customer_email' => 'getCustomerEmail',
        'super_admin_username' => 'getSuperAdminUsername',
        'super_admin_password' => 'getSuperAdminPassword',
        'reporting_api_key' => 'getReportingApiKey',
        'response_message' => 'getResponseMessage',
        'redirect_url' => 'getRedirectUrl',
        'billing_address_street_and_house_number' => 'getBillingAddressStreetAndHouseNumber',
        'billing_address_zip_code' => 'getBillingAddressZipCode',
        'billing_address_country' => 'getBillingAddressCountry',
        'billing_address_city' => 'getBillingAddressCity',
        'responsible_person' => 'getResponsiblePerson',
        'role' => 'getRole',
        'tenant_uuid' => 'getTenantUuid',
        'prefix' => 'getPrefix'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('base_url', $data ?? [], null);
        $this->setIfExists('deployment_stage', $data ?? [], null);
        $this->setIfExists('customer_email', $data ?? [], null);
        $this->setIfExists('super_admin_username', $data ?? [], null);
        $this->setIfExists('super_admin_password', $data ?? [], null);
        $this->setIfExists('reporting_api_key', $data ?? [], null);
        $this->setIfExists('response_message', $data ?? [], null);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('billing_address_street_and_house_number', $data ?? [], null);
        $this->setIfExists('billing_address_zip_code', $data ?? [], null);
        $this->setIfExists('billing_address_country', $data ?? [], null);
        $this->setIfExists('billing_address_city', $data ?? [], null);
        $this->setIfExists('responsible_person', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], 'ROLE_ONBOARDING');
        $this->setIfExists('tenant_uuid', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['base_url'] === null) {
            $invalidProperties[] = "'base_url' can't be null";
        }
        if ($this->container['deployment_stage'] === null) {
            $invalidProperties[] = "'deployment_stage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_url
     *
     * @return string
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string $base_url base_url
     *
     * @return self
     */
    public function setBaseUrl($base_url)
    {
        if (is_null($base_url)) {
            throw new \InvalidArgumentException('non-nullable base_url cannot be null');
        }
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets deployment_stage
     *
     * @return string
     */
    public function getDeploymentStage()
    {
        return $this->container['deployment_stage'];
    }

    /**
     * Sets deployment_stage
     *
     * @param string $deployment_stage deployment_stage
     *
     * @return self
     */
    public function setDeploymentStage($deployment_stage)
    {
        if (is_null($deployment_stage)) {
            throw new \InvalidArgumentException('non-nullable deployment_stage cannot be null');
        }
        $this->container['deployment_stage'] = $deployment_stage;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email customer_email
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        if (is_null($customer_email)) {
            array_push($this->openAPINullablesSetToNull, 'customer_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets super_admin_username
     *
     * @return string|null
     */
    public function getSuperAdminUsername()
    {
        return $this->container['super_admin_username'];
    }

    /**
     * Sets super_admin_username
     *
     * @param string|null $super_admin_username super_admin_username
     *
     * @return self
     */
    public function setSuperAdminUsername($super_admin_username)
    {
        if (is_null($super_admin_username)) {
            array_push($this->openAPINullablesSetToNull, 'super_admin_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('super_admin_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['super_admin_username'] = $super_admin_username;

        return $this;
    }

    /**
     * Gets super_admin_password
     *
     * @return string|null
     */
    public function getSuperAdminPassword()
    {
        return $this->container['super_admin_password'];
    }

    /**
     * Sets super_admin_password
     *
     * @param string|null $super_admin_password super_admin_password
     *
     * @return self
     */
    public function setSuperAdminPassword($super_admin_password)
    {
        if (is_null($super_admin_password)) {
            array_push($this->openAPINullablesSetToNull, 'super_admin_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('super_admin_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['super_admin_password'] = $super_admin_password;

        return $this;
    }

    /**
     * Gets reporting_api_key
     *
     * @return string|null
     */
    public function getReportingApiKey()
    {
        return $this->container['reporting_api_key'];
    }

    /**
     * Sets reporting_api_key
     *
     * @param string|null $reporting_api_key reporting_api_key
     *
     * @return self
     */
    public function setReportingApiKey($reporting_api_key)
    {
        if (is_null($reporting_api_key)) {
            array_push($this->openAPINullablesSetToNull, 'reporting_api_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reporting_api_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reporting_api_key'] = $reporting_api_key;

        return $this;
    }

    /**
     * Gets response_message
     *
     * @return string|null
     */
    public function getResponseMessage()
    {
        return $this->container['response_message'];
    }

    /**
     * Sets response_message
     *
     * @param string|null $response_message response_message
     *
     * @return self
     */
    public function setResponseMessage($response_message)
    {
        if (is_null($response_message)) {
            array_push($this->openAPINullablesSetToNull, 'response_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('response_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['response_message'] = $response_message;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string|null $redirect_url redirect_url
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets billing_address_street_and_house_number
     *
     * @return string|null
     */
    public function getBillingAddressStreetAndHouseNumber()
    {
        return $this->container['billing_address_street_and_house_number'];
    }

    /**
     * Sets billing_address_street_and_house_number
     *
     * @param string|null $billing_address_street_and_house_number Customer/Company.
     *
     * @return self
     */
    public function setBillingAddressStreetAndHouseNumber($billing_address_street_and_house_number)
    {
        if (is_null($billing_address_street_and_house_number)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_street_and_house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_street_and_house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_street_and_house_number'] = $billing_address_street_and_house_number;

        return $this;
    }

    /**
     * Gets billing_address_zip_code
     *
     * @return string|null
     */
    public function getBillingAddressZipCode()
    {
        return $this->container['billing_address_zip_code'];
    }

    /**
     * Sets billing_address_zip_code
     *
     * @param string|null $billing_address_zip_code Customer/Company.
     *
     * @return self
     */
    public function setBillingAddressZipCode($billing_address_zip_code)
    {
        if (is_null($billing_address_zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_zip_code'] = $billing_address_zip_code;

        return $this;
    }

    /**
     * Gets billing_address_country
     *
     * @return string|null
     */
    public function getBillingAddressCountry()
    {
        return $this->container['billing_address_country'];
    }

    /**
     * Sets billing_address_country
     *
     * @param string|null $billing_address_country Customer/Company.
     *
     * @return self
     */
    public function setBillingAddressCountry($billing_address_country)
    {
        if (is_null($billing_address_country)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_country'] = $billing_address_country;

        return $this;
    }

    /**
     * Gets billing_address_city
     *
     * @return string|null
     */
    public function getBillingAddressCity()
    {
        return $this->container['billing_address_city'];
    }

    /**
     * Sets billing_address_city
     *
     * @param string|null $billing_address_city Customer/Company.
     *
     * @return self
     */
    public function setBillingAddressCity($billing_address_city)
    {
        if (is_null($billing_address_city)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_city'] = $billing_address_city;

        return $this;
    }

    /**
     * Gets responsible_person
     *
     * @return string|null
     */
    public function getResponsiblePerson()
    {
        return $this->container['responsible_person'];
    }

    /**
     * Sets responsible_person
     *
     * @param string|null $responsible_person Responsible person for this specific instance.
     *
     * @return self
     */
    public function setResponsiblePerson($responsible_person)
    {
        if (is_null($responsible_person)) {
            array_push($this->openAPINullablesSetToNull, 'responsible_person');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responsible_person', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['responsible_person'] = $responsible_person;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            array_push($this->openAPINullablesSetToNull, 'role');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets tenant_uuid
     *
     * @return string|null
     */
    public function getTenantUuid()
    {
        return $this->container['tenant_uuid'];
    }

    /**
     * Sets tenant_uuid
     *
     * @param string|null $tenant_uuid tenant_uuid
     *
     * @return self
     */
    public function setTenantUuid($tenant_uuid)
    {
        if (is_null($tenant_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant_uuid'] = $tenant_uuid;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


