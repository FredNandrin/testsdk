<?php
/**
 * OrderJsonld
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderJsonld Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderJsonld implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order.jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_context' => '\OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext',
        'at_id' => 'string',
        'at_type' => 'string',
        'customer' => 'string',
        'order_code' => 'string',
        'order_status' => 'string',
        'payment_status' => 'string',
        'payment_type' => 'string',
        'payment_comment' => 'string',
        'payment_date' => '\DateTime',
        'payment_provider' => 'string',
        'selected_booking_time' => '\DateTime',
        'invoice_pdf' => 'string',
        'payment_reference' => 'string',
        'invoice_sent_date' => '\DateTime',
        'is_bto_b' => 'bool',
        'booked_by_admin' => 'string',
        'payment_details_changed_by_admin_at' => '\DateTime',
        'refund_code' => 'string',
        'refund_time' => '\DateTime',
        'charge_code' => 'string',
        'selected_product' => 'string',
        'patient_booking_information_array' => 'string[]',
        'is_location_preselected' => 'bool',
        'is_product_preselected' => 'bool',
        'created_from_patient_event_code' => 'string',
        'is_booked_by_admin_full_checkout' => 'bool',
        'location' => 'string',
        'order_vouchers' => 'string[]',
        'order_products' => 'string[]',
        'created_via' => 'string',
        'invoice_code' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'uuid' => 'string',
        'tenant' => 'string',
        'payment_info_updatable' => 'bool',
        'paid' => 'bool',
        'paid_status_open' => 'bool',
        'booking_count' => 'int',
        'patient_booking_information' => 'int',
        'total_gross_amount' => 'int',
        'total_net_amount' => 'int',
        'total_vat_amount' => 'int',
        'invoice_sent' => 'bool',
        'gross_price_per_unit' => 'int',
        'gross_price_per_unit_for_booking' => 'int',
        'vat_per_unit' => 'int',
        'b2_b' => 'bool',
        'b_to_b' => 'bool',
        'total_voucher_gross_amount' => 'int',
        'total_voucher_net_amount' => 'int',
        'total_voucher_vat_amount' => 'int',
        'self_booked' => 'bool',
        'patient_event_count' => 'int',
        'security_check' => 'string',
        'order_free' => 'bool',
        'confirmation_status_over_payment' => 'string',
        'considered_as_paid' => 'bool',
        'total_gross_amount_with_free_test_orders' => 'int',
        'total_vat_amount_with_free_test_orders' => 'int',
        'total_vat_amount_with_free_test_orders_for_order_product' => 'int',
        'payment_type_other' => 'bool',
        'location_preselected' => 'bool',
        'product_preselected' => 'bool',
        'booked_by_admin_full_checkout' => 'bool',
        'refunded' => 'bool',
        'order_cancelled' => 'bool',
        'order_draft' => 'bool',
        'order_voucher' => 'string',
        'order_product' => 'string',
        'patient_events' => 'string[]',
        'first_patient_event' => 'string',
        'total_product_gross_amount' => 'mixed',
        'total_products_net_amount' => 'int',
        'total_products_vat_amount' => 'int',
        'not_cancellable' => 'bool',
        'order_age_in_seconds' => 'int',
        'order_seconds_before_expire_left' => 'int',
        'draft_expired' => 'bool',
        'delete_needed' => 'bool',
        'tests_created' => 'bool',
        'started_tests' => 'bool',
        'valid_payment_status' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_context' => null,
        'at_id' => null,
        'at_type' => null,
        'customer' => 'iri-reference',
        'order_code' => null,
        'order_status' => null,
        'payment_status' => null,
        'payment_type' => null,
        'payment_comment' => null,
        'payment_date' => 'date-time',
        'payment_provider' => null,
        'selected_booking_time' => 'date-time',
        'invoice_pdf' => null,
        'payment_reference' => null,
        'invoice_sent_date' => 'date-time',
        'is_bto_b' => null,
        'booked_by_admin' => null,
        'payment_details_changed_by_admin_at' => 'date-time',
        'refund_code' => null,
        'refund_time' => 'date-time',
        'charge_code' => null,
        'selected_product' => 'iri-reference',
        'patient_booking_information_array' => null,
        'is_location_preselected' => null,
        'is_product_preselected' => null,
        'created_from_patient_event_code' => null,
        'is_booked_by_admin_full_checkout' => null,
        'location' => 'iri-reference',
        'order_vouchers' => 'iri-reference',
        'order_products' => 'iri-reference',
        'created_via' => null,
        'invoice_code' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'uuid' => null,
        'tenant' => 'iri-reference',
        'payment_info_updatable' => null,
        'paid' => null,
        'paid_status_open' => null,
        'booking_count' => null,
        'patient_booking_information' => null,
        'total_gross_amount' => null,
        'total_net_amount' => null,
        'total_vat_amount' => null,
        'invoice_sent' => null,
        'gross_price_per_unit' => null,
        'gross_price_per_unit_for_booking' => null,
        'vat_per_unit' => null,
        'b2_b' => null,
        'b_to_b' => null,
        'total_voucher_gross_amount' => null,
        'total_voucher_net_amount' => null,
        'total_voucher_vat_amount' => null,
        'self_booked' => null,
        'patient_event_count' => null,
        'security_check' => null,
        'order_free' => null,
        'confirmation_status_over_payment' => null,
        'considered_as_paid' => null,
        'total_gross_amount_with_free_test_orders' => null,
        'total_vat_amount_with_free_test_orders' => null,
        'total_vat_amount_with_free_test_orders_for_order_product' => null,
        'payment_type_other' => null,
        'location_preselected' => null,
        'product_preselected' => null,
        'booked_by_admin_full_checkout' => null,
        'refunded' => null,
        'order_cancelled' => null,
        'order_draft' => null,
        'order_voucher' => 'iri-reference',
        'order_product' => 'iri-reference',
        'patient_events' => 'iri-reference',
        'first_patient_event' => 'iri-reference',
        'total_product_gross_amount' => null,
        'total_products_net_amount' => null,
        'total_products_vat_amount' => null,
        'not_cancellable' => null,
        'order_age_in_seconds' => null,
        'order_seconds_before_expire_left' => null,
        'draft_expired' => null,
        'delete_needed' => null,
        'tests_created' => null,
        'started_tests' => null,
        'valid_payment_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_context' => false,
		'at_id' => false,
		'at_type' => false,
		'customer' => true,
		'order_code' => false,
		'order_status' => false,
		'payment_status' => false,
		'payment_type' => true,
		'payment_comment' => true,
		'payment_date' => true,
		'payment_provider' => true,
		'selected_booking_time' => true,
		'invoice_pdf' => true,
		'payment_reference' => true,
		'invoice_sent_date' => true,
		'is_bto_b' => true,
		'booked_by_admin' => true,
		'payment_details_changed_by_admin_at' => true,
		'refund_code' => true,
		'refund_time' => true,
		'charge_code' => true,
		'selected_product' => true,
		'patient_booking_information_array' => true,
		'is_location_preselected' => false,
		'is_product_preselected' => false,
		'created_from_patient_event_code' => true,
		'is_booked_by_admin_full_checkout' => false,
		'location' => true,
		'order_vouchers' => false,
		'order_products' => false,
		'created_via' => true,
		'invoice_code' => true,
		'created_at' => false,
		'updated_at' => true,
		'uuid' => false,
		'tenant' => true,
		'payment_info_updatable' => false,
		'paid' => false,
		'paid_status_open' => false,
		'booking_count' => false,
		'patient_booking_information' => false,
		'total_gross_amount' => false,
		'total_net_amount' => true,
		'total_vat_amount' => true,
		'invoice_sent' => false,
		'gross_price_per_unit' => false,
		'gross_price_per_unit_for_booking' => false,
		'vat_per_unit' => false,
		'b2_b' => true,
		'b_to_b' => true,
		'total_voucher_gross_amount' => true,
		'total_voucher_net_amount' => true,
		'total_voucher_vat_amount' => true,
		'self_booked' => false,
		'patient_event_count' => false,
		'security_check' => false,
		'order_free' => false,
		'confirmation_status_over_payment' => false,
		'considered_as_paid' => false,
		'total_gross_amount_with_free_test_orders' => true,
		'total_vat_amount_with_free_test_orders' => true,
		'total_vat_amount_with_free_test_orders_for_order_product' => false,
		'payment_type_other' => false,
		'location_preselected' => false,
		'product_preselected' => false,
		'booked_by_admin_full_checkout' => false,
		'refunded' => false,
		'order_cancelled' => false,
		'order_draft' => false,
		'order_voucher' => true,
		'order_product' => true,
		'patient_events' => false,
		'first_patient_event' => true,
		'total_product_gross_amount' => true,
		'total_products_net_amount' => false,
		'total_products_vat_amount' => false,
		'not_cancellable' => false,
		'order_age_in_seconds' => false,
		'order_seconds_before_expire_left' => false,
		'draft_expired' => false,
		'delete_needed' => false,
		'tests_created' => false,
		'started_tests' => false,
		'valid_payment_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_context' => '@context',
        'at_id' => '@id',
        'at_type' => '@type',
        'customer' => 'customer',
        'order_code' => 'orderCode',
        'order_status' => 'orderStatus',
        'payment_status' => 'paymentStatus',
        'payment_type' => 'paymentType',
        'payment_comment' => 'paymentComment',
        'payment_date' => 'paymentDate',
        'payment_provider' => 'paymentProvider',
        'selected_booking_time' => 'selectedBookingTime',
        'invoice_pdf' => 'invoicePdf',
        'payment_reference' => 'paymentReference',
        'invoice_sent_date' => 'invoiceSentDate',
        'is_bto_b' => 'isBToB',
        'booked_by_admin' => 'bookedByAdmin',
        'payment_details_changed_by_admin_at' => 'paymentDetailsChangedByAdminAt',
        'refund_code' => 'refundCode',
        'refund_time' => 'refundTime',
        'charge_code' => 'chargeCode',
        'selected_product' => 'selectedProduct',
        'patient_booking_information_array' => 'patientBookingInformationArray',
        'is_location_preselected' => 'isLocationPreselected',
        'is_product_preselected' => 'isProductPreselected',
        'created_from_patient_event_code' => 'createdFromPatientEventCode',
        'is_booked_by_admin_full_checkout' => 'isBookedByAdminFullCheckout',
        'location' => 'location',
        'order_vouchers' => 'orderVouchers',
        'order_products' => 'orderProducts',
        'created_via' => 'createdVia',
        'invoice_code' => 'invoiceCode',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'uuid' => 'uuid',
        'tenant' => 'tenant',
        'payment_info_updatable' => 'paymentInfoUpdatable',
        'paid' => 'paid',
        'paid_status_open' => 'paidStatusOpen',
        'booking_count' => 'bookingCount',
        'patient_booking_information' => 'patientBookingInformation',
        'total_gross_amount' => 'totalGrossAmount',
        'total_net_amount' => 'totalNetAmount',
        'total_vat_amount' => 'totalVatAmount',
        'invoice_sent' => 'invoiceSent',
        'gross_price_per_unit' => 'grossPricePerUnit',
        'gross_price_per_unit_for_booking' => 'grossPricePerUnitForBooking',
        'vat_per_unit' => 'vatPerUnit',
        'b2_b' => 'b2B',
        'b_to_b' => 'bToB',
        'total_voucher_gross_amount' => 'totalVoucherGrossAmount',
        'total_voucher_net_amount' => 'totalVoucherNetAmount',
        'total_voucher_vat_amount' => 'totalVoucherVatAmount',
        'self_booked' => 'selfBooked',
        'patient_event_count' => 'patientEventCount',
        'security_check' => 'securityCheck',
        'order_free' => 'orderFree',
        'confirmation_status_over_payment' => 'confirmationStatusOverPayment',
        'considered_as_paid' => 'consideredAsPaid',
        'total_gross_amount_with_free_test_orders' => 'totalGrossAmountWithFreeTestOrders',
        'total_vat_amount_with_free_test_orders' => 'totalVatAmountWithFreeTestOrders',
        'total_vat_amount_with_free_test_orders_for_order_product' => 'totalVatAmountWithFreeTestOrdersForOrderProduct',
        'payment_type_other' => 'paymentTypeOther',
        'location_preselected' => 'locationPreselected',
        'product_preselected' => 'productPreselected',
        'booked_by_admin_full_checkout' => 'bookedByAdminFullCheckout',
        'refunded' => 'refunded',
        'order_cancelled' => 'orderCancelled',
        'order_draft' => 'orderDraft',
        'order_voucher' => 'orderVoucher',
        'order_product' => 'orderProduct',
        'patient_events' => 'patientEvents',
        'first_patient_event' => 'firstPatientEvent',
        'total_product_gross_amount' => 'totalProductGrossAmount',
        'total_products_net_amount' => 'totalProductsNetAmount',
        'total_products_vat_amount' => 'totalProductsVatAmount',
        'not_cancellable' => 'notCancellable',
        'order_age_in_seconds' => 'orderAgeInSeconds',
        'order_seconds_before_expire_left' => 'orderSecondsBeforeExpireLeft',
        'draft_expired' => 'draftExpired',
        'delete_needed' => 'deleteNeeded',
        'tests_created' => 'testsCreated',
        'started_tests' => 'startedTests',
        'valid_payment_status' => 'validPaymentStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_context' => 'setAtContext',
        'at_id' => 'setAtId',
        'at_type' => 'setAtType',
        'customer' => 'setCustomer',
        'order_code' => 'setOrderCode',
        'order_status' => 'setOrderStatus',
        'payment_status' => 'setPaymentStatus',
        'payment_type' => 'setPaymentType',
        'payment_comment' => 'setPaymentComment',
        'payment_date' => 'setPaymentDate',
        'payment_provider' => 'setPaymentProvider',
        'selected_booking_time' => 'setSelectedBookingTime',
        'invoice_pdf' => 'setInvoicePdf',
        'payment_reference' => 'setPaymentReference',
        'invoice_sent_date' => 'setInvoiceSentDate',
        'is_bto_b' => 'setIsBtoB',
        'booked_by_admin' => 'setBookedByAdmin',
        'payment_details_changed_by_admin_at' => 'setPaymentDetailsChangedByAdminAt',
        'refund_code' => 'setRefundCode',
        'refund_time' => 'setRefundTime',
        'charge_code' => 'setChargeCode',
        'selected_product' => 'setSelectedProduct',
        'patient_booking_information_array' => 'setPatientBookingInformationArray',
        'is_location_preselected' => 'setIsLocationPreselected',
        'is_product_preselected' => 'setIsProductPreselected',
        'created_from_patient_event_code' => 'setCreatedFromPatientEventCode',
        'is_booked_by_admin_full_checkout' => 'setIsBookedByAdminFullCheckout',
        'location' => 'setLocation',
        'order_vouchers' => 'setOrderVouchers',
        'order_products' => 'setOrderProducts',
        'created_via' => 'setCreatedVia',
        'invoice_code' => 'setInvoiceCode',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'uuid' => 'setUuid',
        'tenant' => 'setTenant',
        'payment_info_updatable' => 'setPaymentInfoUpdatable',
        'paid' => 'setPaid',
        'paid_status_open' => 'setPaidStatusOpen',
        'booking_count' => 'setBookingCount',
        'patient_booking_information' => 'setPatientBookingInformation',
        'total_gross_amount' => 'setTotalGrossAmount',
        'total_net_amount' => 'setTotalNetAmount',
        'total_vat_amount' => 'setTotalVatAmount',
        'invoice_sent' => 'setInvoiceSent',
        'gross_price_per_unit' => 'setGrossPricePerUnit',
        'gross_price_per_unit_for_booking' => 'setGrossPricePerUnitForBooking',
        'vat_per_unit' => 'setVatPerUnit',
        'b2_b' => 'setB2B',
        'b_to_b' => 'setBToB',
        'total_voucher_gross_amount' => 'setTotalVoucherGrossAmount',
        'total_voucher_net_amount' => 'setTotalVoucherNetAmount',
        'total_voucher_vat_amount' => 'setTotalVoucherVatAmount',
        'self_booked' => 'setSelfBooked',
        'patient_event_count' => 'setPatientEventCount',
        'security_check' => 'setSecurityCheck',
        'order_free' => 'setOrderFree',
        'confirmation_status_over_payment' => 'setConfirmationStatusOverPayment',
        'considered_as_paid' => 'setConsideredAsPaid',
        'total_gross_amount_with_free_test_orders' => 'setTotalGrossAmountWithFreeTestOrders',
        'total_vat_amount_with_free_test_orders' => 'setTotalVatAmountWithFreeTestOrders',
        'total_vat_amount_with_free_test_orders_for_order_product' => 'setTotalVatAmountWithFreeTestOrdersForOrderProduct',
        'payment_type_other' => 'setPaymentTypeOther',
        'location_preselected' => 'setLocationPreselected',
        'product_preselected' => 'setProductPreselected',
        'booked_by_admin_full_checkout' => 'setBookedByAdminFullCheckout',
        'refunded' => 'setRefunded',
        'order_cancelled' => 'setOrderCancelled',
        'order_draft' => 'setOrderDraft',
        'order_voucher' => 'setOrderVoucher',
        'order_product' => 'setOrderProduct',
        'patient_events' => 'setPatientEvents',
        'first_patient_event' => 'setFirstPatientEvent',
        'total_product_gross_amount' => 'setTotalProductGrossAmount',
        'total_products_net_amount' => 'setTotalProductsNetAmount',
        'total_products_vat_amount' => 'setTotalProductsVatAmount',
        'not_cancellable' => 'setNotCancellable',
        'order_age_in_seconds' => 'setOrderAgeInSeconds',
        'order_seconds_before_expire_left' => 'setOrderSecondsBeforeExpireLeft',
        'draft_expired' => 'setDraftExpired',
        'delete_needed' => 'setDeleteNeeded',
        'tests_created' => 'setTestsCreated',
        'started_tests' => 'setStartedTests',
        'valid_payment_status' => 'setValidPaymentStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_context' => 'getAtContext',
        'at_id' => 'getAtId',
        'at_type' => 'getAtType',
        'customer' => 'getCustomer',
        'order_code' => 'getOrderCode',
        'order_status' => 'getOrderStatus',
        'payment_status' => 'getPaymentStatus',
        'payment_type' => 'getPaymentType',
        'payment_comment' => 'getPaymentComment',
        'payment_date' => 'getPaymentDate',
        'payment_provider' => 'getPaymentProvider',
        'selected_booking_time' => 'getSelectedBookingTime',
        'invoice_pdf' => 'getInvoicePdf',
        'payment_reference' => 'getPaymentReference',
        'invoice_sent_date' => 'getInvoiceSentDate',
        'is_bto_b' => 'getIsBtoB',
        'booked_by_admin' => 'getBookedByAdmin',
        'payment_details_changed_by_admin_at' => 'getPaymentDetailsChangedByAdminAt',
        'refund_code' => 'getRefundCode',
        'refund_time' => 'getRefundTime',
        'charge_code' => 'getChargeCode',
        'selected_product' => 'getSelectedProduct',
        'patient_booking_information_array' => 'getPatientBookingInformationArray',
        'is_location_preselected' => 'getIsLocationPreselected',
        'is_product_preselected' => 'getIsProductPreselected',
        'created_from_patient_event_code' => 'getCreatedFromPatientEventCode',
        'is_booked_by_admin_full_checkout' => 'getIsBookedByAdminFullCheckout',
        'location' => 'getLocation',
        'order_vouchers' => 'getOrderVouchers',
        'order_products' => 'getOrderProducts',
        'created_via' => 'getCreatedVia',
        'invoice_code' => 'getInvoiceCode',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'uuid' => 'getUuid',
        'tenant' => 'getTenant',
        'payment_info_updatable' => 'getPaymentInfoUpdatable',
        'paid' => 'getPaid',
        'paid_status_open' => 'getPaidStatusOpen',
        'booking_count' => 'getBookingCount',
        'patient_booking_information' => 'getPatientBookingInformation',
        'total_gross_amount' => 'getTotalGrossAmount',
        'total_net_amount' => 'getTotalNetAmount',
        'total_vat_amount' => 'getTotalVatAmount',
        'invoice_sent' => 'getInvoiceSent',
        'gross_price_per_unit' => 'getGrossPricePerUnit',
        'gross_price_per_unit_for_booking' => 'getGrossPricePerUnitForBooking',
        'vat_per_unit' => 'getVatPerUnit',
        'b2_b' => 'getB2B',
        'b_to_b' => 'getBToB',
        'total_voucher_gross_amount' => 'getTotalVoucherGrossAmount',
        'total_voucher_net_amount' => 'getTotalVoucherNetAmount',
        'total_voucher_vat_amount' => 'getTotalVoucherVatAmount',
        'self_booked' => 'getSelfBooked',
        'patient_event_count' => 'getPatientEventCount',
        'security_check' => 'getSecurityCheck',
        'order_free' => 'getOrderFree',
        'confirmation_status_over_payment' => 'getConfirmationStatusOverPayment',
        'considered_as_paid' => 'getConsideredAsPaid',
        'total_gross_amount_with_free_test_orders' => 'getTotalGrossAmountWithFreeTestOrders',
        'total_vat_amount_with_free_test_orders' => 'getTotalVatAmountWithFreeTestOrders',
        'total_vat_amount_with_free_test_orders_for_order_product' => 'getTotalVatAmountWithFreeTestOrdersForOrderProduct',
        'payment_type_other' => 'getPaymentTypeOther',
        'location_preselected' => 'getLocationPreselected',
        'product_preselected' => 'getProductPreselected',
        'booked_by_admin_full_checkout' => 'getBookedByAdminFullCheckout',
        'refunded' => 'getRefunded',
        'order_cancelled' => 'getOrderCancelled',
        'order_draft' => 'getOrderDraft',
        'order_voucher' => 'getOrderVoucher',
        'order_product' => 'getOrderProduct',
        'patient_events' => 'getPatientEvents',
        'first_patient_event' => 'getFirstPatientEvent',
        'total_product_gross_amount' => 'getTotalProductGrossAmount',
        'total_products_net_amount' => 'getTotalProductsNetAmount',
        'total_products_vat_amount' => 'getTotalProductsVatAmount',
        'not_cancellable' => 'getNotCancellable',
        'order_age_in_seconds' => 'getOrderAgeInSeconds',
        'order_seconds_before_expire_left' => 'getOrderSecondsBeforeExpireLeft',
        'draft_expired' => 'getDraftExpired',
        'delete_needed' => 'getDeleteNeeded',
        'tests_created' => 'getTestsCreated',
        'started_tests' => 'getStartedTests',
        'valid_payment_status' => 'getValidPaymentStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_context', $data ?? [], null);
        $this->setIfExists('at_id', $data ?? [], null);
        $this->setIfExists('at_type', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('order_code', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], 'draft');
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('payment_comment', $data ?? [], null);
        $this->setIfExists('payment_date', $data ?? [], null);
        $this->setIfExists('payment_provider', $data ?? [], null);
        $this->setIfExists('selected_booking_time', $data ?? [], null);
        $this->setIfExists('invoice_pdf', $data ?? [], null);
        $this->setIfExists('payment_reference', $data ?? [], null);
        $this->setIfExists('invoice_sent_date', $data ?? [], null);
        $this->setIfExists('is_bto_b', $data ?? [], null);
        $this->setIfExists('booked_by_admin', $data ?? [], null);
        $this->setIfExists('payment_details_changed_by_admin_at', $data ?? [], null);
        $this->setIfExists('refund_code', $data ?? [], null);
        $this->setIfExists('refund_time', $data ?? [], null);
        $this->setIfExists('charge_code', $data ?? [], null);
        $this->setIfExists('selected_product', $data ?? [], null);
        $this->setIfExists('patient_booking_information_array', $data ?? [], null);
        $this->setIfExists('is_location_preselected', $data ?? [], null);
        $this->setIfExists('is_product_preselected', $data ?? [], null);
        $this->setIfExists('created_from_patient_event_code', $data ?? [], null);
        $this->setIfExists('is_booked_by_admin_full_checkout', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('order_vouchers', $data ?? [], null);
        $this->setIfExists('order_products', $data ?? [], null);
        $this->setIfExists('created_via', $data ?? [], 'unknown');
        $this->setIfExists('invoice_code', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('tenant', $data ?? [], null);
        $this->setIfExists('payment_info_updatable', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
        $this->setIfExists('paid_status_open', $data ?? [], null);
        $this->setIfExists('booking_count', $data ?? [], null);
        $this->setIfExists('patient_booking_information', $data ?? [], null);
        $this->setIfExists('total_gross_amount', $data ?? [], null);
        $this->setIfExists('total_net_amount', $data ?? [], null);
        $this->setIfExists('total_vat_amount', $data ?? [], null);
        $this->setIfExists('invoice_sent', $data ?? [], null);
        $this->setIfExists('gross_price_per_unit', $data ?? [], null);
        $this->setIfExists('gross_price_per_unit_for_booking', $data ?? [], null);
        $this->setIfExists('vat_per_unit', $data ?? [], null);
        $this->setIfExists('b2_b', $data ?? [], null);
        $this->setIfExists('b_to_b', $data ?? [], null);
        $this->setIfExists('total_voucher_gross_amount', $data ?? [], null);
        $this->setIfExists('total_voucher_net_amount', $data ?? [], null);
        $this->setIfExists('total_voucher_vat_amount', $data ?? [], null);
        $this->setIfExists('self_booked', $data ?? [], null);
        $this->setIfExists('patient_event_count', $data ?? [], null);
        $this->setIfExists('security_check', $data ?? [], null);
        $this->setIfExists('order_free', $data ?? [], null);
        $this->setIfExists('confirmation_status_over_payment', $data ?? [], null);
        $this->setIfExists('considered_as_paid', $data ?? [], null);
        $this->setIfExists('total_gross_amount_with_free_test_orders', $data ?? [], null);
        $this->setIfExists('total_vat_amount_with_free_test_orders', $data ?? [], null);
        $this->setIfExists('total_vat_amount_with_free_test_orders_for_order_product', $data ?? [], null);
        $this->setIfExists('payment_type_other', $data ?? [], null);
        $this->setIfExists('location_preselected', $data ?? [], null);
        $this->setIfExists('product_preselected', $data ?? [], null);
        $this->setIfExists('booked_by_admin_full_checkout', $data ?? [], null);
        $this->setIfExists('refunded', $data ?? [], null);
        $this->setIfExists('order_cancelled', $data ?? [], null);
        $this->setIfExists('order_draft', $data ?? [], null);
        $this->setIfExists('order_voucher', $data ?? [], null);
        $this->setIfExists('order_product', $data ?? [], null);
        $this->setIfExists('patient_events', $data ?? [], null);
        $this->setIfExists('first_patient_event', $data ?? [], null);
        $this->setIfExists('total_product_gross_amount', $data ?? [], null);
        $this->setIfExists('total_products_net_amount', $data ?? [], null);
        $this->setIfExists('total_products_vat_amount', $data ?? [], null);
        $this->setIfExists('not_cancellable', $data ?? [], null);
        $this->setIfExists('order_age_in_seconds', $data ?? [], null);
        $this->setIfExists('order_seconds_before_expire_left', $data ?? [], null);
        $this->setIfExists('draft_expired', $data ?? [], null);
        $this->setIfExists('delete_needed', $data ?? [], null);
        $this->setIfExists('tests_created', $data ?? [], null);
        $this->setIfExists('started_tests', $data ?? [], null);
        $this->setIfExists('valid_payment_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_context
     *
     * @return \OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext|null
     */
    public function getAtContext()
    {
        return $this->container['at_context'];
    }

    /**
     * Sets at_context
     *
     * @param \OpenAPI\Client\Model\AvailabilitiesAvailableDayDtoJsonldContext|null $at_context at_context
     *
     * @return self
     */
    public function setAtContext($at_context)
    {
        if (is_null($at_context)) {
            throw new \InvalidArgumentException('non-nullable at_context cannot be null');
        }
        $this->container['at_context'] = $at_context;

        return $this;
    }

    /**
     * Gets at_id
     *
     * @return string|null
     */
    public function getAtId()
    {
        return $this->container['at_id'];
    }

    /**
     * Sets at_id
     *
     * @param string|null $at_id at_id
     *
     * @return self
     */
    public function setAtId($at_id)
    {
        if (is_null($at_id)) {
            throw new \InvalidArgumentException('non-nullable at_id cannot be null');
        }
        $this->container['at_id'] = $at_id;

        return $this;
    }

    /**
     * Gets at_type
     *
     * @return string|null
     */
    public function getAtType()
    {
        return $this->container['at_type'];
    }

    /**
     * Sets at_type
     *
     * @param string|null $at_type at_type
     *
     * @return self
     */
    public function setAtType($at_type)
    {
        if (is_null($at_type)) {
            throw new \InvalidArgumentException('non-nullable at_type cannot be null');
        }
        $this->container['at_type'] = $at_type;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            array_push($this->openAPINullablesSetToNull, 'customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets order_code
     *
     * @return string|null
     */
    public function getOrderCode()
    {
        return $this->container['order_code'];
    }

    /**
     * Sets order_code
     *
     * @param string|null $order_code order_code
     *
     * @return self
     */
    public function setOrderCode($order_code)
    {
        if (is_null($order_code)) {
            throw new \InvalidArgumentException('non-nullable order_code cannot be null');
        }
        $this->container['order_code'] = $order_code;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string|null $order_status order_status
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status payment_status
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type payment_type
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            array_push($this->openAPINullablesSetToNull, 'payment_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets payment_comment
     *
     * @return string|null
     */
    public function getPaymentComment()
    {
        return $this->container['payment_comment'];
    }

    /**
     * Sets payment_comment
     *
     * @param string|null $payment_comment payment_comment
     *
     * @return self
     */
    public function setPaymentComment($payment_comment)
    {
        if (is_null($payment_comment)) {
            array_push($this->openAPINullablesSetToNull, 'payment_comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_comment'] = $payment_comment;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime|null
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime|null $payment_date payment_date
     *
     * @return self
     */
    public function setPaymentDate($payment_date)
    {
        if (is_null($payment_date)) {
            array_push($this->openAPINullablesSetToNull, 'payment_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets payment_provider
     *
     * @return string|null
     */
    public function getPaymentProvider()
    {
        return $this->container['payment_provider'];
    }

    /**
     * Sets payment_provider
     *
     * @param string|null $payment_provider payment_provider
     *
     * @return self
     */
    public function setPaymentProvider($payment_provider)
    {
        if (is_null($payment_provider)) {
            array_push($this->openAPINullablesSetToNull, 'payment_provider');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_provider', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_provider'] = $payment_provider;

        return $this;
    }

    /**
     * Gets selected_booking_time
     *
     * @return \DateTime|null
     */
    public function getSelectedBookingTime()
    {
        return $this->container['selected_booking_time'];
    }

    /**
     * Sets selected_booking_time
     *
     * @param \DateTime|null $selected_booking_time selected_booking_time
     *
     * @return self
     */
    public function setSelectedBookingTime($selected_booking_time)
    {
        if (is_null($selected_booking_time)) {
            array_push($this->openAPINullablesSetToNull, 'selected_booking_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('selected_booking_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['selected_booking_time'] = $selected_booking_time;

        return $this;
    }

    /**
     * Gets invoice_pdf
     *
     * @return string|null
     */
    public function getInvoicePdf()
    {
        return $this->container['invoice_pdf'];
    }

    /**
     * Sets invoice_pdf
     *
     * @param string|null $invoice_pdf invoice_pdf
     *
     * @return self
     */
    public function setInvoicePdf($invoice_pdf)
    {
        if (is_null($invoice_pdf)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_pdf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_pdf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_pdf'] = $invoice_pdf;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string|null
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string|null $payment_reference payment_reference
     *
     * @return self
     */
    public function setPaymentReference($payment_reference)
    {
        if (is_null($payment_reference)) {
            array_push($this->openAPINullablesSetToNull, 'payment_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets invoice_sent_date
     *
     * @return \DateTime|null
     */
    public function getInvoiceSentDate()
    {
        return $this->container['invoice_sent_date'];
    }

    /**
     * Sets invoice_sent_date
     *
     * @param \DateTime|null $invoice_sent_date invoice_sent_date
     *
     * @return self
     */
    public function setInvoiceSentDate($invoice_sent_date)
    {
        if (is_null($invoice_sent_date)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_sent_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_sent_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_sent_date'] = $invoice_sent_date;

        return $this;
    }

    /**
     * Gets is_bto_b
     *
     * @return bool|null
     */
    public function getIsBtoB()
    {
        return $this->container['is_bto_b'];
    }

    /**
     * Sets is_bto_b
     *
     * @param bool|null $is_bto_b is_bto_b
     *
     * @return self
     */
    public function setIsBtoB($is_bto_b)
    {
        if (is_null($is_bto_b)) {
            array_push($this->openAPINullablesSetToNull, 'is_bto_b');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_bto_b', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_bto_b'] = $is_bto_b;

        return $this;
    }

    /**
     * Gets booked_by_admin
     *
     * @return string|null
     */
    public function getBookedByAdmin()
    {
        return $this->container['booked_by_admin'];
    }

    /**
     * Sets booked_by_admin
     *
     * @param string|null $booked_by_admin booked_by_admin
     *
     * @return self
     */
    public function setBookedByAdmin($booked_by_admin)
    {
        if (is_null($booked_by_admin)) {
            array_push($this->openAPINullablesSetToNull, 'booked_by_admin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('booked_by_admin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['booked_by_admin'] = $booked_by_admin;

        return $this;
    }

    /**
     * Gets payment_details_changed_by_admin_at
     *
     * @return \DateTime|null
     */
    public function getPaymentDetailsChangedByAdminAt()
    {
        return $this->container['payment_details_changed_by_admin_at'];
    }

    /**
     * Sets payment_details_changed_by_admin_at
     *
     * @param \DateTime|null $payment_details_changed_by_admin_at payment_details_changed_by_admin_at
     *
     * @return self
     */
    public function setPaymentDetailsChangedByAdminAt($payment_details_changed_by_admin_at)
    {
        if (is_null($payment_details_changed_by_admin_at)) {
            array_push($this->openAPINullablesSetToNull, 'payment_details_changed_by_admin_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_details_changed_by_admin_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_details_changed_by_admin_at'] = $payment_details_changed_by_admin_at;

        return $this;
    }

    /**
     * Gets refund_code
     *
     * @return string|null
     */
    public function getRefundCode()
    {
        return $this->container['refund_code'];
    }

    /**
     * Sets refund_code
     *
     * @param string|null $refund_code refund_code
     *
     * @return self
     */
    public function setRefundCode($refund_code)
    {
        if (is_null($refund_code)) {
            array_push($this->openAPINullablesSetToNull, 'refund_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_code'] = $refund_code;

        return $this;
    }

    /**
     * Gets refund_time
     *
     * @return \DateTime|null
     */
    public function getRefundTime()
    {
        return $this->container['refund_time'];
    }

    /**
     * Sets refund_time
     *
     * @param \DateTime|null $refund_time refund_time
     *
     * @return self
     */
    public function setRefundTime($refund_time)
    {
        if (is_null($refund_time)) {
            array_push($this->openAPINullablesSetToNull, 'refund_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_time'] = $refund_time;

        return $this;
    }

    /**
     * Gets charge_code
     *
     * @return string|null
     */
    public function getChargeCode()
    {
        return $this->container['charge_code'];
    }

    /**
     * Sets charge_code
     *
     * @param string|null $charge_code stripe: charge id paypal: order id.
     *
     * @return self
     */
    public function setChargeCode($charge_code)
    {
        if (is_null($charge_code)) {
            array_push($this->openAPINullablesSetToNull, 'charge_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('charge_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['charge_code'] = $charge_code;

        return $this;
    }

    /**
     * Gets selected_product
     *
     * @return string|null
     */
    public function getSelectedProduct()
    {
        return $this->container['selected_product'];
    }

    /**
     * Sets selected_product
     *
     * @param string|null $selected_product selected_product
     *
     * @return self
     */
    public function setSelectedProduct($selected_product)
    {
        if (is_null($selected_product)) {
            array_push($this->openAPINullablesSetToNull, 'selected_product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('selected_product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['selected_product'] = $selected_product;

        return $this;
    }

    /**
     * Gets patient_booking_information_array
     *
     * @return string[]|null
     */
    public function getPatientBookingInformationArray()
    {
        return $this->container['patient_booking_information_array'];
    }

    /**
     * Sets patient_booking_information_array
     *
     * @param string[]|null $patient_booking_information_array patient_booking_information_array
     *
     * @return self
     */
    public function setPatientBookingInformationArray($patient_booking_information_array)
    {
        if (is_null($patient_booking_information_array)) {
            array_push($this->openAPINullablesSetToNull, 'patient_booking_information_array');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('patient_booking_information_array', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['patient_booking_information_array'] = $patient_booking_information_array;

        return $this;
    }

    /**
     * Gets is_location_preselected
     *
     * @return bool|null
     */
    public function getIsLocationPreselected()
    {
        return $this->container['is_location_preselected'];
    }

    /**
     * Sets is_location_preselected
     *
     * @param bool|null $is_location_preselected is_location_preselected
     *
     * @return self
     */
    public function setIsLocationPreselected($is_location_preselected)
    {
        if (is_null($is_location_preselected)) {
            throw new \InvalidArgumentException('non-nullable is_location_preselected cannot be null');
        }
        $this->container['is_location_preselected'] = $is_location_preselected;

        return $this;
    }

    /**
     * Gets is_product_preselected
     *
     * @return bool|null
     */
    public function getIsProductPreselected()
    {
        return $this->container['is_product_preselected'];
    }

    /**
     * Sets is_product_preselected
     *
     * @param bool|null $is_product_preselected is_product_preselected
     *
     * @return self
     */
    public function setIsProductPreselected($is_product_preselected)
    {
        if (is_null($is_product_preselected)) {
            throw new \InvalidArgumentException('non-nullable is_product_preselected cannot be null');
        }
        $this->container['is_product_preselected'] = $is_product_preselected;

        return $this;
    }

    /**
     * Gets created_from_patient_event_code
     *
     * @return string|null
     */
    public function getCreatedFromPatientEventCode()
    {
        return $this->container['created_from_patient_event_code'];
    }

    /**
     * Sets created_from_patient_event_code
     *
     * @param string|null $created_from_patient_event_code created_from_patient_event_code
     *
     * @return self
     */
    public function setCreatedFromPatientEventCode($created_from_patient_event_code)
    {
        if (is_null($created_from_patient_event_code)) {
            array_push($this->openAPINullablesSetToNull, 'created_from_patient_event_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_from_patient_event_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_from_patient_event_code'] = $created_from_patient_event_code;

        return $this;
    }

    /**
     * Gets is_booked_by_admin_full_checkout
     *
     * @return bool|null
     */
    public function getIsBookedByAdminFullCheckout()
    {
        return $this->container['is_booked_by_admin_full_checkout'];
    }

    /**
     * Sets is_booked_by_admin_full_checkout
     *
     * @param bool|null $is_booked_by_admin_full_checkout is_booked_by_admin_full_checkout
     *
     * @return self
     */
    public function setIsBookedByAdminFullCheckout($is_booked_by_admin_full_checkout)
    {
        if (is_null($is_booked_by_admin_full_checkout)) {
            throw new \InvalidArgumentException('non-nullable is_booked_by_admin_full_checkout cannot be null');
        }
        $this->container['is_booked_by_admin_full_checkout'] = $is_booked_by_admin_full_checkout;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets order_vouchers
     *
     * @return string[]|null
     */
    public function getOrderVouchers()
    {
        return $this->container['order_vouchers'];
    }

    /**
     * Sets order_vouchers
     *
     * @param string[]|null $order_vouchers order_vouchers
     *
     * @return self
     */
    public function setOrderVouchers($order_vouchers)
    {
        if (is_null($order_vouchers)) {
            throw new \InvalidArgumentException('non-nullable order_vouchers cannot be null');
        }
        $this->container['order_vouchers'] = $order_vouchers;

        return $this;
    }

    /**
     * Gets order_products
     *
     * @return string[]|null
     */
    public function getOrderProducts()
    {
        return $this->container['order_products'];
    }

    /**
     * Sets order_products
     *
     * @param string[]|null $order_products order_products
     *
     * @return self
     */
    public function setOrderProducts($order_products)
    {
        if (is_null($order_products)) {
            throw new \InvalidArgumentException('non-nullable order_products cannot be null');
        }
        $this->container['order_products'] = $order_products;

        return $this;
    }

    /**
     * Gets created_via
     *
     * @return string|null
     */
    public function getCreatedVia()
    {
        return $this->container['created_via'];
    }

    /**
     * Sets created_via
     *
     * @param string|null $created_via created_via
     *
     * @return self
     */
    public function setCreatedVia($created_via)
    {
        if (is_null($created_via)) {
            array_push($this->openAPINullablesSetToNull, 'created_via');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_via', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_via'] = $created_via;

        return $this;
    }

    /**
     * Gets invoice_code
     *
     * @return string|null
     */
    public function getInvoiceCode()
    {
        return $this->container['invoice_code'];
    }

    /**
     * Sets invoice_code
     *
     * @param string|null $invoice_code invoice_code
     *
     * @return self
     */
    public function setInvoiceCode($invoice_code)
    {
        if (is_null($invoice_code)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_code'] = $invoice_code;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return string|null
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param string|null $tenant tenant
     *
     * @return self
     */
    public function setTenant($tenant)
    {
        if (is_null($tenant)) {
            array_push($this->openAPINullablesSetToNull, 'tenant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets payment_info_updatable
     *
     * @return bool|null
     */
    public function getPaymentInfoUpdatable()
    {
        return $this->container['payment_info_updatable'];
    }

    /**
     * Sets payment_info_updatable
     *
     * @param bool|null $payment_info_updatable payment_info_updatable
     *
     * @return self
     */
    public function setPaymentInfoUpdatable($payment_info_updatable)
    {
        if (is_null($payment_info_updatable)) {
            throw new \InvalidArgumentException('non-nullable payment_info_updatable cannot be null');
        }
        $this->container['payment_info_updatable'] = $payment_info_updatable;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool|null
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool|null $paid paid
     *
     * @return self
     */
    public function setPaid($paid)
    {
        if (is_null($paid)) {
            throw new \InvalidArgumentException('non-nullable paid cannot be null');
        }
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets paid_status_open
     *
     * @return bool|null
     */
    public function getPaidStatusOpen()
    {
        return $this->container['paid_status_open'];
    }

    /**
     * Sets paid_status_open
     *
     * @param bool|null $paid_status_open paid_status_open
     *
     * @return self
     */
    public function setPaidStatusOpen($paid_status_open)
    {
        if (is_null($paid_status_open)) {
            throw new \InvalidArgumentException('non-nullable paid_status_open cannot be null');
        }
        $this->container['paid_status_open'] = $paid_status_open;

        return $this;
    }

    /**
     * Gets booking_count
     *
     * @return int|null
     */
    public function getBookingCount()
    {
        return $this->container['booking_count'];
    }

    /**
     * Sets booking_count
     *
     * @param int|null $booking_count booking_count
     *
     * @return self
     */
    public function setBookingCount($booking_count)
    {
        if (is_null($booking_count)) {
            throw new \InvalidArgumentException('non-nullable booking_count cannot be null');
        }
        $this->container['booking_count'] = $booking_count;

        return $this;
    }

    /**
     * Gets patient_booking_information
     *
     * @return int|null
     */
    public function getPatientBookingInformation()
    {
        return $this->container['patient_booking_information'];
    }

    /**
     * Sets patient_booking_information
     *
     * @param int|null $patient_booking_information patient_booking_information
     *
     * @return self
     */
    public function setPatientBookingInformation($patient_booking_information)
    {
        if (is_null($patient_booking_information)) {
            throw new \InvalidArgumentException('non-nullable patient_booking_information cannot be null');
        }
        $this->container['patient_booking_information'] = $patient_booking_information;

        return $this;
    }

    /**
     * Gets total_gross_amount
     *
     * @return int|null
     */
    public function getTotalGrossAmount()
    {
        return $this->container['total_gross_amount'];
    }

    /**
     * Sets total_gross_amount
     *
     * @param int|null $total_gross_amount total_gross_amount
     *
     * @return self
     */
    public function setTotalGrossAmount($total_gross_amount)
    {
        if (is_null($total_gross_amount)) {
            throw new \InvalidArgumentException('non-nullable total_gross_amount cannot be null');
        }
        $this->container['total_gross_amount'] = $total_gross_amount;

        return $this;
    }

    /**
     * Gets total_net_amount
     *
     * @return int|null
     */
    public function getTotalNetAmount()
    {
        return $this->container['total_net_amount'];
    }

    /**
     * Sets total_net_amount
     *
     * @param int|null $total_net_amount total_net_amount
     *
     * @return self
     */
    public function setTotalNetAmount($total_net_amount)
    {
        if (is_null($total_net_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_net_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_net_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_net_amount'] = $total_net_amount;

        return $this;
    }

    /**
     * Gets total_vat_amount
     *
     * @return int|null
     */
    public function getTotalVatAmount()
    {
        return $this->container['total_vat_amount'];
    }

    /**
     * Sets total_vat_amount
     *
     * @param int|null $total_vat_amount total_vat_amount
     *
     * @return self
     */
    public function setTotalVatAmount($total_vat_amount)
    {
        if (is_null($total_vat_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_vat_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_vat_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_vat_amount'] = $total_vat_amount;

        return $this;
    }

    /**
     * Gets invoice_sent
     *
     * @return bool|null
     */
    public function getInvoiceSent()
    {
        return $this->container['invoice_sent'];
    }

    /**
     * Sets invoice_sent
     *
     * @param bool|null $invoice_sent invoice_sent
     *
     * @return self
     */
    public function setInvoiceSent($invoice_sent)
    {
        if (is_null($invoice_sent)) {
            throw new \InvalidArgumentException('non-nullable invoice_sent cannot be null');
        }
        $this->container['invoice_sent'] = $invoice_sent;

        return $this;
    }

    /**
     * Gets gross_price_per_unit
     *
     * @return int|null
     */
    public function getGrossPricePerUnit()
    {
        return $this->container['gross_price_per_unit'];
    }

    /**
     * Sets gross_price_per_unit
     *
     * @param int|null $gross_price_per_unit gross_price_per_unit
     *
     * @return self
     */
    public function setGrossPricePerUnit($gross_price_per_unit)
    {
        if (is_null($gross_price_per_unit)) {
            throw new \InvalidArgumentException('non-nullable gross_price_per_unit cannot be null');
        }
        $this->container['gross_price_per_unit'] = $gross_price_per_unit;

        return $this;
    }

    /**
     * Gets gross_price_per_unit_for_booking
     *
     * @return int|null
     */
    public function getGrossPricePerUnitForBooking()
    {
        return $this->container['gross_price_per_unit_for_booking'];
    }

    /**
     * Sets gross_price_per_unit_for_booking
     *
     * @param int|null $gross_price_per_unit_for_booking gross_price_per_unit_for_booking
     *
     * @return self
     */
    public function setGrossPricePerUnitForBooking($gross_price_per_unit_for_booking)
    {
        if (is_null($gross_price_per_unit_for_booking)) {
            throw new \InvalidArgumentException('non-nullable gross_price_per_unit_for_booking cannot be null');
        }
        $this->container['gross_price_per_unit_for_booking'] = $gross_price_per_unit_for_booking;

        return $this;
    }

    /**
     * Gets vat_per_unit
     *
     * @return int|null
     */
    public function getVatPerUnit()
    {
        return $this->container['vat_per_unit'];
    }

    /**
     * Sets vat_per_unit
     *
     * @param int|null $vat_per_unit vat_per_unit
     *
     * @return self
     */
    public function setVatPerUnit($vat_per_unit)
    {
        if (is_null($vat_per_unit)) {
            throw new \InvalidArgumentException('non-nullable vat_per_unit cannot be null');
        }
        $this->container['vat_per_unit'] = $vat_per_unit;

        return $this;
    }

    /**
     * Gets b2_b
     *
     * @return bool|null
     */
    public function getB2B()
    {
        return $this->container['b2_b'];
    }

    /**
     * Sets b2_b
     *
     * @param bool|null $b2_b b2_b
     *
     * @return self
     */
    public function setB2B($b2_b)
    {
        if (is_null($b2_b)) {
            array_push($this->openAPINullablesSetToNull, 'b2_b');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('b2_b', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['b2_b'] = $b2_b;

        return $this;
    }

    /**
     * Gets b_to_b
     *
     * @return bool|null
     */
    public function getBToB()
    {
        return $this->container['b_to_b'];
    }

    /**
     * Sets b_to_b
     *
     * @param bool|null $b_to_b b_to_b
     *
     * @return self
     */
    public function setBToB($b_to_b)
    {
        if (is_null($b_to_b)) {
            array_push($this->openAPINullablesSetToNull, 'b_to_b');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('b_to_b', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['b_to_b'] = $b_to_b;

        return $this;
    }

    /**
     * Gets total_voucher_gross_amount
     *
     * @return int|null
     */
    public function getTotalVoucherGrossAmount()
    {
        return $this->container['total_voucher_gross_amount'];
    }

    /**
     * Sets total_voucher_gross_amount
     *
     * @param int|null $total_voucher_gross_amount total_voucher_gross_amount
     *
     * @return self
     */
    public function setTotalVoucherGrossAmount($total_voucher_gross_amount)
    {
        if (is_null($total_voucher_gross_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_voucher_gross_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_voucher_gross_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_voucher_gross_amount'] = $total_voucher_gross_amount;

        return $this;
    }

    /**
     * Gets total_voucher_net_amount
     *
     * @return int|null
     */
    public function getTotalVoucherNetAmount()
    {
        return $this->container['total_voucher_net_amount'];
    }

    /**
     * Sets total_voucher_net_amount
     *
     * @param int|null $total_voucher_net_amount total_voucher_net_amount
     *
     * @return self
     */
    public function setTotalVoucherNetAmount($total_voucher_net_amount)
    {
        if (is_null($total_voucher_net_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_voucher_net_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_voucher_net_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_voucher_net_amount'] = $total_voucher_net_amount;

        return $this;
    }

    /**
     * Gets total_voucher_vat_amount
     *
     * @return int|null
     */
    public function getTotalVoucherVatAmount()
    {
        return $this->container['total_voucher_vat_amount'];
    }

    /**
     * Sets total_voucher_vat_amount
     *
     * @param int|null $total_voucher_vat_amount total_voucher_vat_amount
     *
     * @return self
     */
    public function setTotalVoucherVatAmount($total_voucher_vat_amount)
    {
        if (is_null($total_voucher_vat_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_voucher_vat_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_voucher_vat_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_voucher_vat_amount'] = $total_voucher_vat_amount;

        return $this;
    }

    /**
     * Gets self_booked
     *
     * @return bool|null
     */
    public function getSelfBooked()
    {
        return $this->container['self_booked'];
    }

    /**
     * Sets self_booked
     *
     * @param bool|null $self_booked self_booked
     *
     * @return self
     */
    public function setSelfBooked($self_booked)
    {
        if (is_null($self_booked)) {
            throw new \InvalidArgumentException('non-nullable self_booked cannot be null');
        }
        $this->container['self_booked'] = $self_booked;

        return $this;
    }

    /**
     * Gets patient_event_count
     *
     * @return int|null
     */
    public function getPatientEventCount()
    {
        return $this->container['patient_event_count'];
    }

    /**
     * Sets patient_event_count
     *
     * @param int|null $patient_event_count patient_event_count
     *
     * @return self
     */
    public function setPatientEventCount($patient_event_count)
    {
        if (is_null($patient_event_count)) {
            throw new \InvalidArgumentException('non-nullable patient_event_count cannot be null');
        }
        $this->container['patient_event_count'] = $patient_event_count;

        return $this;
    }

    /**
     * Gets security_check
     *
     * @return string|null
     */
    public function getSecurityCheck()
    {
        return $this->container['security_check'];
    }

    /**
     * Sets security_check
     *
     * @param string|null $security_check Create payment check code.
     *
     * @return self
     */
    public function setSecurityCheck($security_check)
    {
        if (is_null($security_check)) {
            throw new \InvalidArgumentException('non-nullable security_check cannot be null');
        }
        $this->container['security_check'] = $security_check;

        return $this;
    }

    /**
     * Gets order_free
     *
     * @return bool|null
     */
    public function getOrderFree()
    {
        return $this->container['order_free'];
    }

    /**
     * Sets order_free
     *
     * @param bool|null $order_free order_free
     *
     * @return self
     */
    public function setOrderFree($order_free)
    {
        if (is_null($order_free)) {
            throw new \InvalidArgumentException('non-nullable order_free cannot be null');
        }
        $this->container['order_free'] = $order_free;

        return $this;
    }

    /**
     * Gets confirmation_status_over_payment
     *
     * @return string|null
     */
    public function getConfirmationStatusOverPayment()
    {
        return $this->container['confirmation_status_over_payment'];
    }

    /**
     * Sets confirmation_status_over_payment
     *
     * @param string|null $confirmation_status_over_payment confirmation_status_over_payment
     *
     * @return self
     */
    public function setConfirmationStatusOverPayment($confirmation_status_over_payment)
    {
        if (is_null($confirmation_status_over_payment)) {
            throw new \InvalidArgumentException('non-nullable confirmation_status_over_payment cannot be null');
        }
        $this->container['confirmation_status_over_payment'] = $confirmation_status_over_payment;

        return $this;
    }

    /**
     * Gets considered_as_paid
     *
     * @return bool|null
     */
    public function getConsideredAsPaid()
    {
        return $this->container['considered_as_paid'];
    }

    /**
     * Sets considered_as_paid
     *
     * @param bool|null $considered_as_paid considered_as_paid
     *
     * @return self
     */
    public function setConsideredAsPaid($considered_as_paid)
    {
        if (is_null($considered_as_paid)) {
            throw new \InvalidArgumentException('non-nullable considered_as_paid cannot be null');
        }
        $this->container['considered_as_paid'] = $considered_as_paid;

        return $this;
    }

    /**
     * Gets total_gross_amount_with_free_test_orders
     *
     * @return int|null
     */
    public function getTotalGrossAmountWithFreeTestOrders()
    {
        return $this->container['total_gross_amount_with_free_test_orders'];
    }

    /**
     * Sets total_gross_amount_with_free_test_orders
     *
     * @param int|null $total_gross_amount_with_free_test_orders total_gross_amount_with_free_test_orders
     *
     * @return self
     */
    public function setTotalGrossAmountWithFreeTestOrders($total_gross_amount_with_free_test_orders)
    {
        if (is_null($total_gross_amount_with_free_test_orders)) {
            array_push($this->openAPINullablesSetToNull, 'total_gross_amount_with_free_test_orders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_gross_amount_with_free_test_orders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_gross_amount_with_free_test_orders'] = $total_gross_amount_with_free_test_orders;

        return $this;
    }

    /**
     * Gets total_vat_amount_with_free_test_orders
     *
     * @return int|null
     */
    public function getTotalVatAmountWithFreeTestOrders()
    {
        return $this->container['total_vat_amount_with_free_test_orders'];
    }

    /**
     * Sets total_vat_amount_with_free_test_orders
     *
     * @param int|null $total_vat_amount_with_free_test_orders total_vat_amount_with_free_test_orders
     *
     * @return self
     */
    public function setTotalVatAmountWithFreeTestOrders($total_vat_amount_with_free_test_orders)
    {
        if (is_null($total_vat_amount_with_free_test_orders)) {
            array_push($this->openAPINullablesSetToNull, 'total_vat_amount_with_free_test_orders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_vat_amount_with_free_test_orders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_vat_amount_with_free_test_orders'] = $total_vat_amount_with_free_test_orders;

        return $this;
    }

    /**
     * Gets total_vat_amount_with_free_test_orders_for_order_product
     *
     * @return int|null
     */
    public function getTotalVatAmountWithFreeTestOrdersForOrderProduct()
    {
        return $this->container['total_vat_amount_with_free_test_orders_for_order_product'];
    }

    /**
     * Sets total_vat_amount_with_free_test_orders_for_order_product
     *
     * @param int|null $total_vat_amount_with_free_test_orders_for_order_product total_vat_amount_with_free_test_orders_for_order_product
     *
     * @return self
     */
    public function setTotalVatAmountWithFreeTestOrdersForOrderProduct($total_vat_amount_with_free_test_orders_for_order_product)
    {
        if (is_null($total_vat_amount_with_free_test_orders_for_order_product)) {
            throw new \InvalidArgumentException('non-nullable total_vat_amount_with_free_test_orders_for_order_product cannot be null');
        }
        $this->container['total_vat_amount_with_free_test_orders_for_order_product'] = $total_vat_amount_with_free_test_orders_for_order_product;

        return $this;
    }

    /**
     * Gets payment_type_other
     *
     * @return bool|null
     */
    public function getPaymentTypeOther()
    {
        return $this->container['payment_type_other'];
    }

    /**
     * Sets payment_type_other
     *
     * @param bool|null $payment_type_other payment_type_other
     *
     * @return self
     */
    public function setPaymentTypeOther($payment_type_other)
    {
        if (is_null($payment_type_other)) {
            throw new \InvalidArgumentException('non-nullable payment_type_other cannot be null');
        }
        $this->container['payment_type_other'] = $payment_type_other;

        return $this;
    }

    /**
     * Gets location_preselected
     *
     * @return bool|null
     */
    public function getLocationPreselected()
    {
        return $this->container['location_preselected'];
    }

    /**
     * Sets location_preselected
     *
     * @param bool|null $location_preselected location_preselected
     *
     * @return self
     */
    public function setLocationPreselected($location_preselected)
    {
        if (is_null($location_preselected)) {
            throw new \InvalidArgumentException('non-nullable location_preselected cannot be null');
        }
        $this->container['location_preselected'] = $location_preselected;

        return $this;
    }

    /**
     * Gets product_preselected
     *
     * @return bool|null
     */
    public function getProductPreselected()
    {
        return $this->container['product_preselected'];
    }

    /**
     * Sets product_preselected
     *
     * @param bool|null $product_preselected product_preselected
     *
     * @return self
     */
    public function setProductPreselected($product_preselected)
    {
        if (is_null($product_preselected)) {
            throw new \InvalidArgumentException('non-nullable product_preselected cannot be null');
        }
        $this->container['product_preselected'] = $product_preselected;

        return $this;
    }

    /**
     * Gets booked_by_admin_full_checkout
     *
     * @return bool|null
     */
    public function getBookedByAdminFullCheckout()
    {
        return $this->container['booked_by_admin_full_checkout'];
    }

    /**
     * Sets booked_by_admin_full_checkout
     *
     * @param bool|null $booked_by_admin_full_checkout booked_by_admin_full_checkout
     *
     * @return self
     */
    public function setBookedByAdminFullCheckout($booked_by_admin_full_checkout)
    {
        if (is_null($booked_by_admin_full_checkout)) {
            throw new \InvalidArgumentException('non-nullable booked_by_admin_full_checkout cannot be null');
        }
        $this->container['booked_by_admin_full_checkout'] = $booked_by_admin_full_checkout;

        return $this;
    }

    /**
     * Gets refunded
     *
     * @return bool|null
     */
    public function getRefunded()
    {
        return $this->container['refunded'];
    }

    /**
     * Sets refunded
     *
     * @param bool|null $refunded refunded
     *
     * @return self
     */
    public function setRefunded($refunded)
    {
        if (is_null($refunded)) {
            throw new \InvalidArgumentException('non-nullable refunded cannot be null');
        }
        $this->container['refunded'] = $refunded;

        return $this;
    }

    /**
     * Gets order_cancelled
     *
     * @return bool|null
     */
    public function getOrderCancelled()
    {
        return $this->container['order_cancelled'];
    }

    /**
     * Sets order_cancelled
     *
     * @param bool|null $order_cancelled order_cancelled
     *
     * @return self
     */
    public function setOrderCancelled($order_cancelled)
    {
        if (is_null($order_cancelled)) {
            throw new \InvalidArgumentException('non-nullable order_cancelled cannot be null');
        }
        $this->container['order_cancelled'] = $order_cancelled;

        return $this;
    }

    /**
     * Gets order_draft
     *
     * @return bool|null
     */
    public function getOrderDraft()
    {
        return $this->container['order_draft'];
    }

    /**
     * Sets order_draft
     *
     * @param bool|null $order_draft order_draft
     *
     * @return self
     */
    public function setOrderDraft($order_draft)
    {
        if (is_null($order_draft)) {
            throw new \InvalidArgumentException('non-nullable order_draft cannot be null');
        }
        $this->container['order_draft'] = $order_draft;

        return $this;
    }

    /**
     * Gets order_voucher
     *
     * @return string|null
     */
    public function getOrderVoucher()
    {
        return $this->container['order_voucher'];
    }

    /**
     * Sets order_voucher
     *
     * @param string|null $order_voucher order_voucher
     *
     * @return self
     */
    public function setOrderVoucher($order_voucher)
    {
        if (is_null($order_voucher)) {
            array_push($this->openAPINullablesSetToNull, 'order_voucher');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_voucher', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_voucher'] = $order_voucher;

        return $this;
    }

    /**
     * Gets order_product
     *
     * @return string|null
     */
    public function getOrderProduct()
    {
        return $this->container['order_product'];
    }

    /**
     * Sets order_product
     *
     * @param string|null $order_product order_product
     *
     * @return self
     */
    public function setOrderProduct($order_product)
    {
        if (is_null($order_product)) {
            array_push($this->openAPINullablesSetToNull, 'order_product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_product'] = $order_product;

        return $this;
    }

    /**
     * Gets patient_events
     *
     * @return string[]|null
     */
    public function getPatientEvents()
    {
        return $this->container['patient_events'];
    }

    /**
     * Sets patient_events
     *
     * @param string[]|null $patient_events patient_events
     *
     * @return self
     */
    public function setPatientEvents($patient_events)
    {
        if (is_null($patient_events)) {
            throw new \InvalidArgumentException('non-nullable patient_events cannot be null');
        }
        $this->container['patient_events'] = $patient_events;

        return $this;
    }

    /**
     * Gets first_patient_event
     *
     * @return string|null
     */
    public function getFirstPatientEvent()
    {
        return $this->container['first_patient_event'];
    }

    /**
     * Sets first_patient_event
     *
     * @param string|null $first_patient_event first_patient_event
     *
     * @return self
     */
    public function setFirstPatientEvent($first_patient_event)
    {
        if (is_null($first_patient_event)) {
            array_push($this->openAPINullablesSetToNull, 'first_patient_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_patient_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_patient_event'] = $first_patient_event;

        return $this;
    }

    /**
     * Gets total_product_gross_amount
     *
     * @return mixed|null
     */
    public function getTotalProductGrossAmount()
    {
        return $this->container['total_product_gross_amount'];
    }

    /**
     * Sets total_product_gross_amount
     *
     * @param mixed|null $total_product_gross_amount total_product_gross_amount
     *
     * @return self
     */
    public function setTotalProductGrossAmount($total_product_gross_amount)
    {
        if (is_null($total_product_gross_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_product_gross_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_product_gross_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_product_gross_amount'] = $total_product_gross_amount;

        return $this;
    }

    /**
     * Gets total_products_net_amount
     *
     * @return int|null
     */
    public function getTotalProductsNetAmount()
    {
        return $this->container['total_products_net_amount'];
    }

    /**
     * Sets total_products_net_amount
     *
     * @param int|null $total_products_net_amount total_products_net_amount
     *
     * @return self
     */
    public function setTotalProductsNetAmount($total_products_net_amount)
    {
        if (is_null($total_products_net_amount)) {
            throw new \InvalidArgumentException('non-nullable total_products_net_amount cannot be null');
        }
        $this->container['total_products_net_amount'] = $total_products_net_amount;

        return $this;
    }

    /**
     * Gets total_products_vat_amount
     *
     * @return int|null
     */
    public function getTotalProductsVatAmount()
    {
        return $this->container['total_products_vat_amount'];
    }

    /**
     * Sets total_products_vat_amount
     *
     * @param int|null $total_products_vat_amount total_products_vat_amount
     *
     * @return self
     */
    public function setTotalProductsVatAmount($total_products_vat_amount)
    {
        if (is_null($total_products_vat_amount)) {
            throw new \InvalidArgumentException('non-nullable total_products_vat_amount cannot be null');
        }
        $this->container['total_products_vat_amount'] = $total_products_vat_amount;

        return $this;
    }

    /**
     * Gets not_cancellable
     *
     * @return bool|null
     */
    public function getNotCancellable()
    {
        return $this->container['not_cancellable'];
    }

    /**
     * Sets not_cancellable
     *
     * @param bool|null $not_cancellable not_cancellable
     *
     * @return self
     */
    public function setNotCancellable($not_cancellable)
    {
        if (is_null($not_cancellable)) {
            throw new \InvalidArgumentException('non-nullable not_cancellable cannot be null');
        }
        $this->container['not_cancellable'] = $not_cancellable;

        return $this;
    }

    /**
     * Gets order_age_in_seconds
     *
     * @return int|null
     */
    public function getOrderAgeInSeconds()
    {
        return $this->container['order_age_in_seconds'];
    }

    /**
     * Sets order_age_in_seconds
     *
     * @param int|null $order_age_in_seconds order_age_in_seconds
     *
     * @return self
     */
    public function setOrderAgeInSeconds($order_age_in_seconds)
    {
        if (is_null($order_age_in_seconds)) {
            throw new \InvalidArgumentException('non-nullable order_age_in_seconds cannot be null');
        }
        $this->container['order_age_in_seconds'] = $order_age_in_seconds;

        return $this;
    }

    /**
     * Gets order_seconds_before_expire_left
     *
     * @return int|null
     */
    public function getOrderSecondsBeforeExpireLeft()
    {
        return $this->container['order_seconds_before_expire_left'];
    }

    /**
     * Sets order_seconds_before_expire_left
     *
     * @param int|null $order_seconds_before_expire_left order_seconds_before_expire_left
     *
     * @return self
     */
    public function setOrderSecondsBeforeExpireLeft($order_seconds_before_expire_left)
    {
        if (is_null($order_seconds_before_expire_left)) {
            throw new \InvalidArgumentException('non-nullable order_seconds_before_expire_left cannot be null');
        }
        $this->container['order_seconds_before_expire_left'] = $order_seconds_before_expire_left;

        return $this;
    }

    /**
     * Gets draft_expired
     *
     * @return bool|null
     */
    public function getDraftExpired()
    {
        return $this->container['draft_expired'];
    }

    /**
     * Sets draft_expired
     *
     * @param bool|null $draft_expired draft_expired
     *
     * @return self
     */
    public function setDraftExpired($draft_expired)
    {
        if (is_null($draft_expired)) {
            throw new \InvalidArgumentException('non-nullable draft_expired cannot be null');
        }
        $this->container['draft_expired'] = $draft_expired;

        return $this;
    }

    /**
     * Gets delete_needed
     *
     * @return bool|null
     */
    public function getDeleteNeeded()
    {
        return $this->container['delete_needed'];
    }

    /**
     * Sets delete_needed
     *
     * @param bool|null $delete_needed delete_needed
     *
     * @return self
     */
    public function setDeleteNeeded($delete_needed)
    {
        if (is_null($delete_needed)) {
            throw new \InvalidArgumentException('non-nullable delete_needed cannot be null');
        }
        $this->container['delete_needed'] = $delete_needed;

        return $this;
    }

    /**
     * Gets tests_created
     *
     * @return bool|null
     */
    public function getTestsCreated()
    {
        return $this->container['tests_created'];
    }

    /**
     * Sets tests_created
     *
     * @param bool|null $tests_created tests_created
     *
     * @return self
     */
    public function setTestsCreated($tests_created)
    {
        if (is_null($tests_created)) {
            throw new \InvalidArgumentException('non-nullable tests_created cannot be null');
        }
        $this->container['tests_created'] = $tests_created;

        return $this;
    }

    /**
     * Gets started_tests
     *
     * @return bool|null
     */
    public function getStartedTests()
    {
        return $this->container['started_tests'];
    }

    /**
     * Sets started_tests
     *
     * @param bool|null $started_tests started_tests
     *
     * @return self
     */
    public function setStartedTests($started_tests)
    {
        if (is_null($started_tests)) {
            throw new \InvalidArgumentException('non-nullable started_tests cannot be null');
        }
        $this->container['started_tests'] = $started_tests;

        return $this;
    }

    /**
     * Gets valid_payment_status
     *
     * @return bool|null
     */
    public function getValidPaymentStatus()
    {
        return $this->container['valid_payment_status'];
    }

    /**
     * Sets valid_payment_status
     *
     * @param bool|null $valid_payment_status valid_payment_status
     *
     * @return self
     */
    public function setValidPaymentStatus($valid_payment_status)
    {
        if (is_null($valid_payment_status)) {
            throw new \InvalidArgumentException('non-nullable valid_payment_status cannot be null');
        }
        $this->container['valid_payment_status'] = $valid_payment_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


