<?php
/**
 * Tenant
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Probatix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Tenant Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Tenant implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tenant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'probatix_customer_id' => 'string',
        'reporting_api_key' => 'string',
        'base_url' => 'string',
        'provider_key' => 'string',
        'deployment_stage' => 'string',
        'url_imprint' => 'string',
        'url_homepage' => 'string',
        'url_privacy' => 'string',
        'provider_name' => 'string',
        'provider_address' => 'string',
        'provider_responsible_contact_name' => 'string',
        'provider_data_privacy_contact' => 'string',
        'provider_data_privacy_additional_information' => 'string',
        'email_sender_address' => 'string',
        'provider_location_name' => 'string',
        'provider_location_registration_id' => 'string',
        'provider_location_address' => 'string',
        'provider_location_phone' => 'string',
        'provider_location_email' => 'string',
        'is_booking_without_payment_allowed' => 'bool',
        'is_stripe_enabled' => 'bool',
        'stripe_payment_methods' => 'string[]',
        'stripe_account_id' => 'string',
        'paypal_environment' => 'string',
        'is_paypal_enabled' => 'bool',
        'paypal_client_id' => 'string',
        'paypal_client_secret' => 'string',
        'provider_test_details' => 'string',
        'provider_device_id_jrc_database' => 'int',
        'privacy_text' => 'string',
        'is_invoicing_enabled' => 'bool',
        'provider_url_logo' => 'string',
        'general_terms_text' => 'string',
        'background_image_path' => 'string',
        'logo_path' => 'string',
        'primary_color' => 'string',
        'secondary_color' => 'string',
        'font_family' => 'string',
        'header_font_family' => 'string',
        'background_image_file' => '\SplFileObject',
        'logo_file' => '\SplFileObject',
        'updated_at' => '\DateTime',
        'punchline' => 'string',
        'button_color' => 'string',
        'show_company_field_for_customers' => 'bool',
        'attach_test_result' => 'bool',
        'list_of_companies_for_company_field_for_customers' => 'string[]',
        'list_of_zip_codes_for_customers' => 'string[]',
        'enable_availability_locations' => 'bool',
        'mobile_scanning_enabled' => 'bool',
        'force_booking_slot_selection' => 'bool',
        'time_slot_duration' => 'int',
        'duration_of_day_pass_validity' => 'int',
        'max_bookings_per_slot' => 'int',
        'opening_time' => 'int',
        'closing_time' => 'int',
        'is_copy_availability_from_previous_week' => 'bool',
        'advance_booking_time_in_minutes' => 'int',
        'editable_days' => 'int',
        'my_probatix_enabled' => 'bool',
        'my_probatix_client_id' => 'string',
        'my_probatix_client_secret' => 'string',
        'internal_code_base' => 'string',
        'bsnr' => 'string',
        'tenant_selection_options' => 'string[]',
        'send_invoice_automatically' => 'bool',
        'test_producer' => 'string',
        'provider_street_and_house_number' => 'string',
        'provider_city' => 'string',
        'provider_zip_code' => 'string',
        'provider_location_street_and_house_number' => 'string',
        'provider_location_city' => 'string',
        'provider_location_zip_code' => 'string',
        'onboarding_step' => 'string',
        'printer_type' => 'string',
        'show_test_paid_confirmation' => 'bool',
        'status' => 'string',
        'feature_flag_strategies' => '\OpenAPI\Client\Model\FeatureFlagStrategy[]',
        'show_available_slots' => 'bool',
        'address_components' => 'string[]',
        'prefix' => 'string',
        'send_full_data_in_report_api' => 'bool',
        'is_availability_set_up' => 'bool',
        'is_instance_cleared' => 'bool',
        'available_product_types' => 'string[]',
        'locations' => 'string[]',
        'users' => 'string[]',
        'uuid' => 'string',
        'lab_id' => 'string',
        'stripe_enabled' => 'bool',
        'paypal_enabled' => 'bool',
        'booking_without_payment_allowed' => 'bool',
        'invoicing_enabled' => 'bool',
        'copy_availability_from_previous_week' => 'bool',
        'google_maps_url_for_provider_address' => 'string',
        'full_provider_address' => 'string',
        'full_provider_location_address' => 'string',
        'onboarding_step_test_center' => 'bool',
        'onboarding_step_login' => 'bool',
        'status_active' => 'bool',
        'status_paused' => 'bool',
        'status_deactivated' => 'bool',
        'active' => 'bool',
        'availability_set_up' => 'bool',
        'instance_cleared' => 'bool',
        'subdomain' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'probatix_customer_id' => null,
        'reporting_api_key' => null,
        'base_url' => null,
        'provider_key' => null,
        'deployment_stage' => null,
        'url_imprint' => null,
        'url_homepage' => 'uri',
        'url_privacy' => null,
        'provider_name' => null,
        'provider_address' => null,
        'provider_responsible_contact_name' => null,
        'provider_data_privacy_contact' => null,
        'provider_data_privacy_additional_information' => null,
        'email_sender_address' => null,
        'provider_location_name' => null,
        'provider_location_registration_id' => null,
        'provider_location_address' => null,
        'provider_location_phone' => null,
        'provider_location_email' => null,
        'is_booking_without_payment_allowed' => null,
        'is_stripe_enabled' => null,
        'stripe_payment_methods' => null,
        'stripe_account_id' => null,
        'paypal_environment' => null,
        'is_paypal_enabled' => null,
        'paypal_client_id' => null,
        'paypal_client_secret' => null,
        'provider_test_details' => null,
        'provider_device_id_jrc_database' => null,
        'privacy_text' => null,
        'is_invoicing_enabled' => null,
        'provider_url_logo' => null,
        'general_terms_text' => null,
        'background_image_path' => null,
        'logo_path' => null,
        'primary_color' => null,
        'secondary_color' => null,
        'font_family' => null,
        'header_font_family' => null,
        'background_image_file' => 'binary',
        'logo_file' => 'binary',
        'updated_at' => 'date-time',
        'punchline' => null,
        'button_color' => null,
        'show_company_field_for_customers' => null,
        'attach_test_result' => null,
        'list_of_companies_for_company_field_for_customers' => null,
        'list_of_zip_codes_for_customers' => null,
        'enable_availability_locations' => null,
        'mobile_scanning_enabled' => null,
        'force_booking_slot_selection' => null,
        'time_slot_duration' => null,
        'duration_of_day_pass_validity' => null,
        'max_bookings_per_slot' => null,
        'opening_time' => null,
        'closing_time' => null,
        'is_copy_availability_from_previous_week' => null,
        'advance_booking_time_in_minutes' => null,
        'editable_days' => null,
        'my_probatix_enabled' => null,
        'my_probatix_client_id' => null,
        'my_probatix_client_secret' => null,
        'internal_code_base' => null,
        'bsnr' => null,
        'tenant_selection_options' => null,
        'send_invoice_automatically' => null,
        'test_producer' => null,
        'provider_street_and_house_number' => null,
        'provider_city' => null,
        'provider_zip_code' => null,
        'provider_location_street_and_house_number' => null,
        'provider_location_city' => null,
        'provider_location_zip_code' => null,
        'onboarding_step' => null,
        'printer_type' => null,
        'show_test_paid_confirmation' => null,
        'status' => null,
        'feature_flag_strategies' => null,
        'show_available_slots' => null,
        'address_components' => null,
        'prefix' => null,
        'send_full_data_in_report_api' => null,
        'is_availability_set_up' => null,
        'is_instance_cleared' => null,
        'available_product_types' => null,
        'locations' => 'iri-reference',
        'users' => 'iri-reference',
        'uuid' => null,
        'lab_id' => null,
        'stripe_enabled' => null,
        'paypal_enabled' => null,
        'booking_without_payment_allowed' => null,
        'invoicing_enabled' => null,
        'copy_availability_from_previous_week' => null,
        'google_maps_url_for_provider_address' => null,
        'full_provider_address' => null,
        'full_provider_location_address' => null,
        'onboarding_step_test_center' => null,
        'onboarding_step_login' => null,
        'status_active' => null,
        'status_paused' => null,
        'status_deactivated' => null,
        'active' => null,
        'availability_set_up' => null,
        'instance_cleared' => null,
        'subdomain' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'probatix_customer_id' => false,
		'reporting_api_key' => false,
		'base_url' => false,
		'provider_key' => false,
		'deployment_stage' => false,
		'url_imprint' => false,
		'url_homepage' => false,
		'url_privacy' => false,
		'provider_name' => false,
		'provider_address' => false,
		'provider_responsible_contact_name' => true,
		'provider_data_privacy_contact' => true,
		'provider_data_privacy_additional_information' => true,
		'email_sender_address' => false,
		'provider_location_name' => false,
		'provider_location_registration_id' => true,
		'provider_location_address' => false,
		'provider_location_phone' => true,
		'provider_location_email' => true,
		'is_booking_without_payment_allowed' => false,
		'is_stripe_enabled' => false,
		'stripe_payment_methods' => true,
		'stripe_account_id' => true,
		'paypal_environment' => false,
		'is_paypal_enabled' => false,
		'paypal_client_id' => true,
		'paypal_client_secret' => true,
		'provider_test_details' => true,
		'provider_device_id_jrc_database' => true,
		'privacy_text' => true,
		'is_invoicing_enabled' => false,
		'provider_url_logo' => true,
		'general_terms_text' => true,
		'background_image_path' => true,
		'logo_path' => true,
		'primary_color' => true,
		'secondary_color' => true,
		'font_family' => true,
		'header_font_family' => true,
		'background_image_file' => true,
		'logo_file' => true,
		'updated_at' => true,
		'punchline' => true,
		'button_color' => true,
		'show_company_field_for_customers' => false,
		'attach_test_result' => false,
		'list_of_companies_for_company_field_for_customers' => true,
		'list_of_zip_codes_for_customers' => true,
		'enable_availability_locations' => false,
		'mobile_scanning_enabled' => false,
		'force_booking_slot_selection' => false,
		'time_slot_duration' => false,
		'duration_of_day_pass_validity' => false,
		'max_bookings_per_slot' => false,
		'opening_time' => false,
		'closing_time' => false,
		'is_copy_availability_from_previous_week' => false,
		'advance_booking_time_in_minutes' => false,
		'editable_days' => false,
		'my_probatix_enabled' => false,
		'my_probatix_client_id' => true,
		'my_probatix_client_secret' => true,
		'internal_code_base' => true,
		'bsnr' => true,
		'tenant_selection_options' => false,
		'send_invoice_automatically' => true,
		'test_producer' => true,
		'provider_street_and_house_number' => true,
		'provider_city' => true,
		'provider_zip_code' => true,
		'provider_location_street_and_house_number' => true,
		'provider_location_city' => true,
		'provider_location_zip_code' => true,
		'onboarding_step' => true,
		'printer_type' => true,
		'show_test_paid_confirmation' => false,
		'status' => true,
		'feature_flag_strategies' => false,
		'show_available_slots' => false,
		'address_components' => true,
		'prefix' => true,
		'send_full_data_in_report_api' => false,
		'is_availability_set_up' => false,
		'is_instance_cleared' => false,
		'available_product_types' => false,
		'locations' => false,
		'users' => false,
		'uuid' => false,
		'lab_id' => false,
		'stripe_enabled' => false,
		'paypal_enabled' => false,
		'booking_without_payment_allowed' => false,
		'invoicing_enabled' => false,
		'copy_availability_from_previous_week' => false,
		'google_maps_url_for_provider_address' => false,
		'full_provider_address' => false,
		'full_provider_location_address' => false,
		'onboarding_step_test_center' => false,
		'onboarding_step_login' => false,
		'status_active' => false,
		'status_paused' => false,
		'status_deactivated' => false,
		'active' => false,
		'availability_set_up' => false,
		'instance_cleared' => false,
		'subdomain' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'probatix_customer_id' => 'probatixCustomerId',
        'reporting_api_key' => 'reportingApiKey',
        'base_url' => 'baseUrl',
        'provider_key' => 'providerKey',
        'deployment_stage' => 'deploymentStage',
        'url_imprint' => 'urlImprint',
        'url_homepage' => 'urlHomepage',
        'url_privacy' => 'urlPrivacy',
        'provider_name' => 'providerName',
        'provider_address' => 'providerAddress',
        'provider_responsible_contact_name' => 'providerResponsibleContactName',
        'provider_data_privacy_contact' => 'providerDataPrivacyContact',
        'provider_data_privacy_additional_information' => 'providerDataPrivacyAdditionalInformation',
        'email_sender_address' => 'emailSenderAddress',
        'provider_location_name' => 'providerLocationName',
        'provider_location_registration_id' => 'providerLocationRegistrationId',
        'provider_location_address' => 'providerLocationAddress',
        'provider_location_phone' => 'providerLocationPhone',
        'provider_location_email' => 'providerLocationEmail',
        'is_booking_without_payment_allowed' => 'isBookingWithoutPaymentAllowed',
        'is_stripe_enabled' => 'isStripeEnabled',
        'stripe_payment_methods' => 'stripePaymentMethods',
        'stripe_account_id' => 'stripeAccountId',
        'paypal_environment' => 'paypalEnvironment',
        'is_paypal_enabled' => 'isPaypalEnabled',
        'paypal_client_id' => 'paypalClientId',
        'paypal_client_secret' => 'paypalClientSecret',
        'provider_test_details' => 'providerTestDetails',
        'provider_device_id_jrc_database' => 'providerDeviceIdJrcDatabase',
        'privacy_text' => 'privacyText',
        'is_invoicing_enabled' => 'isInvoicingEnabled',
        'provider_url_logo' => 'providerUrlLogo',
        'general_terms_text' => 'generalTermsText',
        'background_image_path' => 'backgroundImagePath',
        'logo_path' => 'logoPath',
        'primary_color' => 'primaryColor',
        'secondary_color' => 'secondaryColor',
        'font_family' => 'fontFamily',
        'header_font_family' => 'headerFontFamily',
        'background_image_file' => 'backgroundImageFile',
        'logo_file' => 'logoFile',
        'updated_at' => 'updatedAt',
        'punchline' => 'punchline',
        'button_color' => 'buttonColor',
        'show_company_field_for_customers' => 'showCompanyFieldForCustomers',
        'attach_test_result' => 'attachTestResult',
        'list_of_companies_for_company_field_for_customers' => 'listOfCompaniesForCompanyFieldForCustomers',
        'list_of_zip_codes_for_customers' => 'listOfZipCodesForCustomers',
        'enable_availability_locations' => 'enableAvailabilityLocations',
        'mobile_scanning_enabled' => 'mobileScanningEnabled',
        'force_booking_slot_selection' => 'forceBookingSlotSelection',
        'time_slot_duration' => 'timeSlotDuration',
        'duration_of_day_pass_validity' => 'durationOfDayPassValidity',
        'max_bookings_per_slot' => 'maxBookingsPerSlot',
        'opening_time' => 'openingTime',
        'closing_time' => 'closingTime',
        'is_copy_availability_from_previous_week' => 'isCopyAvailabilityFromPreviousWeek',
        'advance_booking_time_in_minutes' => 'advanceBookingTimeInMinutes',
        'editable_days' => 'editableDays',
        'my_probatix_enabled' => 'myProbatixEnabled',
        'my_probatix_client_id' => 'myProbatixClientId',
        'my_probatix_client_secret' => 'myProbatixClientSecret',
        'internal_code_base' => 'internalCodeBase',
        'bsnr' => 'bsnr',
        'tenant_selection_options' => 'tenantSelectionOptions',
        'send_invoice_automatically' => 'sendInvoiceAutomatically',
        'test_producer' => 'testProducer',
        'provider_street_and_house_number' => 'providerStreetAndHouseNumber',
        'provider_city' => 'providerCity',
        'provider_zip_code' => 'providerZipCode',
        'provider_location_street_and_house_number' => 'providerLocationStreetAndHouseNumber',
        'provider_location_city' => 'providerLocationCity',
        'provider_location_zip_code' => 'providerLocationZipCode',
        'onboarding_step' => 'onboardingStep',
        'printer_type' => 'printerType',
        'show_test_paid_confirmation' => 'showTestPaidConfirmation',
        'status' => 'status',
        'feature_flag_strategies' => 'featureFlagStrategies',
        'show_available_slots' => 'showAvailableSlots',
        'address_components' => 'addressComponents',
        'prefix' => 'prefix',
        'send_full_data_in_report_api' => 'sendFullDataInReportApi',
        'is_availability_set_up' => 'isAvailabilitySetUp',
        'is_instance_cleared' => 'isInstanceCleared',
        'available_product_types' => 'availableProductTypes',
        'locations' => 'locations',
        'users' => 'users',
        'uuid' => 'uuid',
        'lab_id' => 'labId',
        'stripe_enabled' => 'stripeEnabled',
        'paypal_enabled' => 'paypalEnabled',
        'booking_without_payment_allowed' => 'bookingWithoutPaymentAllowed',
        'invoicing_enabled' => 'invoicingEnabled',
        'copy_availability_from_previous_week' => 'copyAvailabilityFromPreviousWeek',
        'google_maps_url_for_provider_address' => 'googleMapsUrlForProviderAddress',
        'full_provider_address' => 'fullProviderAddress',
        'full_provider_location_address' => 'fullProviderLocationAddress',
        'onboarding_step_test_center' => 'onboardingStepTestCenter',
        'onboarding_step_login' => 'onboardingStepLogin',
        'status_active' => 'statusActive',
        'status_paused' => 'statusPaused',
        'status_deactivated' => 'statusDeactivated',
        'active' => 'active',
        'availability_set_up' => 'availabilitySetUp',
        'instance_cleared' => 'instanceCleared',
        'subdomain' => 'subdomain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'probatix_customer_id' => 'setProbatixCustomerId',
        'reporting_api_key' => 'setReportingApiKey',
        'base_url' => 'setBaseUrl',
        'provider_key' => 'setProviderKey',
        'deployment_stage' => 'setDeploymentStage',
        'url_imprint' => 'setUrlImprint',
        'url_homepage' => 'setUrlHomepage',
        'url_privacy' => 'setUrlPrivacy',
        'provider_name' => 'setProviderName',
        'provider_address' => 'setProviderAddress',
        'provider_responsible_contact_name' => 'setProviderResponsibleContactName',
        'provider_data_privacy_contact' => 'setProviderDataPrivacyContact',
        'provider_data_privacy_additional_information' => 'setProviderDataPrivacyAdditionalInformation',
        'email_sender_address' => 'setEmailSenderAddress',
        'provider_location_name' => 'setProviderLocationName',
        'provider_location_registration_id' => 'setProviderLocationRegistrationId',
        'provider_location_address' => 'setProviderLocationAddress',
        'provider_location_phone' => 'setProviderLocationPhone',
        'provider_location_email' => 'setProviderLocationEmail',
        'is_booking_without_payment_allowed' => 'setIsBookingWithoutPaymentAllowed',
        'is_stripe_enabled' => 'setIsStripeEnabled',
        'stripe_payment_methods' => 'setStripePaymentMethods',
        'stripe_account_id' => 'setStripeAccountId',
        'paypal_environment' => 'setPaypalEnvironment',
        'is_paypal_enabled' => 'setIsPaypalEnabled',
        'paypal_client_id' => 'setPaypalClientId',
        'paypal_client_secret' => 'setPaypalClientSecret',
        'provider_test_details' => 'setProviderTestDetails',
        'provider_device_id_jrc_database' => 'setProviderDeviceIdJrcDatabase',
        'privacy_text' => 'setPrivacyText',
        'is_invoicing_enabled' => 'setIsInvoicingEnabled',
        'provider_url_logo' => 'setProviderUrlLogo',
        'general_terms_text' => 'setGeneralTermsText',
        'background_image_path' => 'setBackgroundImagePath',
        'logo_path' => 'setLogoPath',
        'primary_color' => 'setPrimaryColor',
        'secondary_color' => 'setSecondaryColor',
        'font_family' => 'setFontFamily',
        'header_font_family' => 'setHeaderFontFamily',
        'background_image_file' => 'setBackgroundImageFile',
        'logo_file' => 'setLogoFile',
        'updated_at' => 'setUpdatedAt',
        'punchline' => 'setPunchline',
        'button_color' => 'setButtonColor',
        'show_company_field_for_customers' => 'setShowCompanyFieldForCustomers',
        'attach_test_result' => 'setAttachTestResult',
        'list_of_companies_for_company_field_for_customers' => 'setListOfCompaniesForCompanyFieldForCustomers',
        'list_of_zip_codes_for_customers' => 'setListOfZipCodesForCustomers',
        'enable_availability_locations' => 'setEnableAvailabilityLocations',
        'mobile_scanning_enabled' => 'setMobileScanningEnabled',
        'force_booking_slot_selection' => 'setForceBookingSlotSelection',
        'time_slot_duration' => 'setTimeSlotDuration',
        'duration_of_day_pass_validity' => 'setDurationOfDayPassValidity',
        'max_bookings_per_slot' => 'setMaxBookingsPerSlot',
        'opening_time' => 'setOpeningTime',
        'closing_time' => 'setClosingTime',
        'is_copy_availability_from_previous_week' => 'setIsCopyAvailabilityFromPreviousWeek',
        'advance_booking_time_in_minutes' => 'setAdvanceBookingTimeInMinutes',
        'editable_days' => 'setEditableDays',
        'my_probatix_enabled' => 'setMyProbatixEnabled',
        'my_probatix_client_id' => 'setMyProbatixClientId',
        'my_probatix_client_secret' => 'setMyProbatixClientSecret',
        'internal_code_base' => 'setInternalCodeBase',
        'bsnr' => 'setBsnr',
        'tenant_selection_options' => 'setTenantSelectionOptions',
        'send_invoice_automatically' => 'setSendInvoiceAutomatically',
        'test_producer' => 'setTestProducer',
        'provider_street_and_house_number' => 'setProviderStreetAndHouseNumber',
        'provider_city' => 'setProviderCity',
        'provider_zip_code' => 'setProviderZipCode',
        'provider_location_street_and_house_number' => 'setProviderLocationStreetAndHouseNumber',
        'provider_location_city' => 'setProviderLocationCity',
        'provider_location_zip_code' => 'setProviderLocationZipCode',
        'onboarding_step' => 'setOnboardingStep',
        'printer_type' => 'setPrinterType',
        'show_test_paid_confirmation' => 'setShowTestPaidConfirmation',
        'status' => 'setStatus',
        'feature_flag_strategies' => 'setFeatureFlagStrategies',
        'show_available_slots' => 'setShowAvailableSlots',
        'address_components' => 'setAddressComponents',
        'prefix' => 'setPrefix',
        'send_full_data_in_report_api' => 'setSendFullDataInReportApi',
        'is_availability_set_up' => 'setIsAvailabilitySetUp',
        'is_instance_cleared' => 'setIsInstanceCleared',
        'available_product_types' => 'setAvailableProductTypes',
        'locations' => 'setLocations',
        'users' => 'setUsers',
        'uuid' => 'setUuid',
        'lab_id' => 'setLabId',
        'stripe_enabled' => 'setStripeEnabled',
        'paypal_enabled' => 'setPaypalEnabled',
        'booking_without_payment_allowed' => 'setBookingWithoutPaymentAllowed',
        'invoicing_enabled' => 'setInvoicingEnabled',
        'copy_availability_from_previous_week' => 'setCopyAvailabilityFromPreviousWeek',
        'google_maps_url_for_provider_address' => 'setGoogleMapsUrlForProviderAddress',
        'full_provider_address' => 'setFullProviderAddress',
        'full_provider_location_address' => 'setFullProviderLocationAddress',
        'onboarding_step_test_center' => 'setOnboardingStepTestCenter',
        'onboarding_step_login' => 'setOnboardingStepLogin',
        'status_active' => 'setStatusActive',
        'status_paused' => 'setStatusPaused',
        'status_deactivated' => 'setStatusDeactivated',
        'active' => 'setActive',
        'availability_set_up' => 'setAvailabilitySetUp',
        'instance_cleared' => 'setInstanceCleared',
        'subdomain' => 'setSubdomain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'probatix_customer_id' => 'getProbatixCustomerId',
        'reporting_api_key' => 'getReportingApiKey',
        'base_url' => 'getBaseUrl',
        'provider_key' => 'getProviderKey',
        'deployment_stage' => 'getDeploymentStage',
        'url_imprint' => 'getUrlImprint',
        'url_homepage' => 'getUrlHomepage',
        'url_privacy' => 'getUrlPrivacy',
        'provider_name' => 'getProviderName',
        'provider_address' => 'getProviderAddress',
        'provider_responsible_contact_name' => 'getProviderResponsibleContactName',
        'provider_data_privacy_contact' => 'getProviderDataPrivacyContact',
        'provider_data_privacy_additional_information' => 'getProviderDataPrivacyAdditionalInformation',
        'email_sender_address' => 'getEmailSenderAddress',
        'provider_location_name' => 'getProviderLocationName',
        'provider_location_registration_id' => 'getProviderLocationRegistrationId',
        'provider_location_address' => 'getProviderLocationAddress',
        'provider_location_phone' => 'getProviderLocationPhone',
        'provider_location_email' => 'getProviderLocationEmail',
        'is_booking_without_payment_allowed' => 'getIsBookingWithoutPaymentAllowed',
        'is_stripe_enabled' => 'getIsStripeEnabled',
        'stripe_payment_methods' => 'getStripePaymentMethods',
        'stripe_account_id' => 'getStripeAccountId',
        'paypal_environment' => 'getPaypalEnvironment',
        'is_paypal_enabled' => 'getIsPaypalEnabled',
        'paypal_client_id' => 'getPaypalClientId',
        'paypal_client_secret' => 'getPaypalClientSecret',
        'provider_test_details' => 'getProviderTestDetails',
        'provider_device_id_jrc_database' => 'getProviderDeviceIdJrcDatabase',
        'privacy_text' => 'getPrivacyText',
        'is_invoicing_enabled' => 'getIsInvoicingEnabled',
        'provider_url_logo' => 'getProviderUrlLogo',
        'general_terms_text' => 'getGeneralTermsText',
        'background_image_path' => 'getBackgroundImagePath',
        'logo_path' => 'getLogoPath',
        'primary_color' => 'getPrimaryColor',
        'secondary_color' => 'getSecondaryColor',
        'font_family' => 'getFontFamily',
        'header_font_family' => 'getHeaderFontFamily',
        'background_image_file' => 'getBackgroundImageFile',
        'logo_file' => 'getLogoFile',
        'updated_at' => 'getUpdatedAt',
        'punchline' => 'getPunchline',
        'button_color' => 'getButtonColor',
        'show_company_field_for_customers' => 'getShowCompanyFieldForCustomers',
        'attach_test_result' => 'getAttachTestResult',
        'list_of_companies_for_company_field_for_customers' => 'getListOfCompaniesForCompanyFieldForCustomers',
        'list_of_zip_codes_for_customers' => 'getListOfZipCodesForCustomers',
        'enable_availability_locations' => 'getEnableAvailabilityLocations',
        'mobile_scanning_enabled' => 'getMobileScanningEnabled',
        'force_booking_slot_selection' => 'getForceBookingSlotSelection',
        'time_slot_duration' => 'getTimeSlotDuration',
        'duration_of_day_pass_validity' => 'getDurationOfDayPassValidity',
        'max_bookings_per_slot' => 'getMaxBookingsPerSlot',
        'opening_time' => 'getOpeningTime',
        'closing_time' => 'getClosingTime',
        'is_copy_availability_from_previous_week' => 'getIsCopyAvailabilityFromPreviousWeek',
        'advance_booking_time_in_minutes' => 'getAdvanceBookingTimeInMinutes',
        'editable_days' => 'getEditableDays',
        'my_probatix_enabled' => 'getMyProbatixEnabled',
        'my_probatix_client_id' => 'getMyProbatixClientId',
        'my_probatix_client_secret' => 'getMyProbatixClientSecret',
        'internal_code_base' => 'getInternalCodeBase',
        'bsnr' => 'getBsnr',
        'tenant_selection_options' => 'getTenantSelectionOptions',
        'send_invoice_automatically' => 'getSendInvoiceAutomatically',
        'test_producer' => 'getTestProducer',
        'provider_street_and_house_number' => 'getProviderStreetAndHouseNumber',
        'provider_city' => 'getProviderCity',
        'provider_zip_code' => 'getProviderZipCode',
        'provider_location_street_and_house_number' => 'getProviderLocationStreetAndHouseNumber',
        'provider_location_city' => 'getProviderLocationCity',
        'provider_location_zip_code' => 'getProviderLocationZipCode',
        'onboarding_step' => 'getOnboardingStep',
        'printer_type' => 'getPrinterType',
        'show_test_paid_confirmation' => 'getShowTestPaidConfirmation',
        'status' => 'getStatus',
        'feature_flag_strategies' => 'getFeatureFlagStrategies',
        'show_available_slots' => 'getShowAvailableSlots',
        'address_components' => 'getAddressComponents',
        'prefix' => 'getPrefix',
        'send_full_data_in_report_api' => 'getSendFullDataInReportApi',
        'is_availability_set_up' => 'getIsAvailabilitySetUp',
        'is_instance_cleared' => 'getIsInstanceCleared',
        'available_product_types' => 'getAvailableProductTypes',
        'locations' => 'getLocations',
        'users' => 'getUsers',
        'uuid' => 'getUuid',
        'lab_id' => 'getLabId',
        'stripe_enabled' => 'getStripeEnabled',
        'paypal_enabled' => 'getPaypalEnabled',
        'booking_without_payment_allowed' => 'getBookingWithoutPaymentAllowed',
        'invoicing_enabled' => 'getInvoicingEnabled',
        'copy_availability_from_previous_week' => 'getCopyAvailabilityFromPreviousWeek',
        'google_maps_url_for_provider_address' => 'getGoogleMapsUrlForProviderAddress',
        'full_provider_address' => 'getFullProviderAddress',
        'full_provider_location_address' => 'getFullProviderLocationAddress',
        'onboarding_step_test_center' => 'getOnboardingStepTestCenter',
        'onboarding_step_login' => 'getOnboardingStepLogin',
        'status_active' => 'getStatusActive',
        'status_paused' => 'getStatusPaused',
        'status_deactivated' => 'getStatusDeactivated',
        'active' => 'getActive',
        'availability_set_up' => 'getAvailabilitySetUp',
        'instance_cleared' => 'getInstanceCleared',
        'subdomain' => 'getSubdomain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ACTIVE = 'active';
    public const STATUS_DEACTIVATED = 'deactivated';
    public const STATUS_PAUSED = 'paused';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_DEACTIVATED,
            self::STATUS_PAUSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('probatix_customer_id', $data ?? [], 'unknown');
        $this->setIfExists('reporting_api_key', $data ?? [], 'RLu7T7ay7C9TnMwk5e3fZu6FYYFsJLjW');
        $this->setIfExists('base_url', $data ?? [], 'booking.probatix.de');
        $this->setIfExists('provider_key', $data ?? [], null);
        $this->setIfExists('deployment_stage', $data ?? [], 'production');
        $this->setIfExists('url_imprint', $data ?? [], 'https://probatix.de/rechtliches/impressum/');
        $this->setIfExists('url_homepage', $data ?? [], 'https://probatix.de');
        $this->setIfExists('url_privacy', $data ?? [], 'https://probatix.de/rechtliches/datenschutz/');
        $this->setIfExists('provider_name', $data ?? [], null);
        $this->setIfExists('provider_address', $data ?? [], null);
        $this->setIfExists('provider_responsible_contact_name', $data ?? [], null);
        $this->setIfExists('provider_data_privacy_contact', $data ?? [], null);
        $this->setIfExists('provider_data_privacy_additional_information', $data ?? [], null);
        $this->setIfExists('email_sender_address', $data ?? [], null);
        $this->setIfExists('provider_location_name', $data ?? [], null);
        $this->setIfExists('provider_location_registration_id', $data ?? [], null);
        $this->setIfExists('provider_location_address', $data ?? [], null);
        $this->setIfExists('provider_location_phone', $data ?? [], null);
        $this->setIfExists('provider_location_email', $data ?? [], null);
        $this->setIfExists('is_booking_without_payment_allowed', $data ?? [], true);
        $this->setIfExists('is_stripe_enabled', $data ?? [], null);
        $this->setIfExists('stripe_payment_methods', $data ?? [], null);
        $this->setIfExists('stripe_account_id', $data ?? [], null);
        $this->setIfExists('paypal_environment', $data ?? [], null);
        $this->setIfExists('is_paypal_enabled', $data ?? [], null);
        $this->setIfExists('paypal_client_id', $data ?? [], null);
        $this->setIfExists('paypal_client_secret', $data ?? [], null);
        $this->setIfExists('provider_test_details', $data ?? [], null);
        $this->setIfExists('provider_device_id_jrc_database', $data ?? [], null);
        $this->setIfExists('privacy_text', $data ?? [], null);
        $this->setIfExists('is_invoicing_enabled', $data ?? [], true);
        $this->setIfExists('provider_url_logo', $data ?? [], null);
        $this->setIfExists('general_terms_text', $data ?? [], null);
        $this->setIfExists('background_image_path', $data ?? [], null);
        $this->setIfExists('logo_path', $data ?? [], null);
        $this->setIfExists('primary_color', $data ?? [], null);
        $this->setIfExists('secondary_color', $data ?? [], null);
        $this->setIfExists('font_family', $data ?? [], null);
        $this->setIfExists('header_font_family', $data ?? [], null);
        $this->setIfExists('background_image_file', $data ?? [], null);
        $this->setIfExists('logo_file', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('punchline', $data ?? [], null);
        $this->setIfExists('button_color', $data ?? [], '#232e3c');
        $this->setIfExists('show_company_field_for_customers', $data ?? [], null);
        $this->setIfExists('attach_test_result', $data ?? [], true);
        $this->setIfExists('list_of_companies_for_company_field_for_customers', $data ?? [], null);
        $this->setIfExists('list_of_zip_codes_for_customers', $data ?? [], null);
        $this->setIfExists('enable_availability_locations', $data ?? [], true);
        $this->setIfExists('mobile_scanning_enabled', $data ?? [], null);
        $this->setIfExists('force_booking_slot_selection', $data ?? [], null);
        $this->setIfExists('time_slot_duration', $data ?? [], 5);
        $this->setIfExists('duration_of_day_pass_validity', $data ?? [], 24);
        $this->setIfExists('max_bookings_per_slot', $data ?? [], 2);
        $this->setIfExists('opening_time', $data ?? [], 8);
        $this->setIfExists('closing_time', $data ?? [], 20);
        $this->setIfExists('is_copy_availability_from_previous_week', $data ?? [], true);
        $this->setIfExists('advance_booking_time_in_minutes', $data ?? [], null);
        $this->setIfExists('editable_days', $data ?? [], 60);
        $this->setIfExists('my_probatix_enabled', $data ?? [], null);
        $this->setIfExists('my_probatix_client_id', $data ?? [], null);
        $this->setIfExists('my_probatix_client_secret', $data ?? [], null);
        $this->setIfExists('internal_code_base', $data ?? [], '1000000000');
        $this->setIfExists('bsnr', $data ?? [], null);
        $this->setIfExists('tenant_selection_options', $data ?? [], null);
        $this->setIfExists('send_invoice_automatically', $data ?? [], true);
        $this->setIfExists('test_producer', $data ?? [], null);
        $this->setIfExists('provider_street_and_house_number', $data ?? [], null);
        $this->setIfExists('provider_city', $data ?? [], null);
        $this->setIfExists('provider_zip_code', $data ?? [], null);
        $this->setIfExists('provider_location_street_and_house_number', $data ?? [], null);
        $this->setIfExists('provider_location_city', $data ?? [], null);
        $this->setIfExists('provider_location_zip_code', $data ?? [], null);
        $this->setIfExists('onboarding_step', $data ?? [], 'onboarding_step_login');
        $this->setIfExists('printer_type', $data ?? [], 'dymo');
        $this->setIfExists('show_test_paid_confirmation', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], 'active');
        $this->setIfExists('feature_flag_strategies', $data ?? [], null);
        $this->setIfExists('show_available_slots', $data ?? [], null);
        $this->setIfExists('address_components', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('send_full_data_in_report_api', $data ?? [], null);
        $this->setIfExists('is_availability_set_up', $data ?? [], null);
        $this->setIfExists('is_instance_cleared', $data ?? [], null);
        $this->setIfExists('available_product_types', $data ?? [], null);
        $this->setIfExists('locations', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('lab_id', $data ?? [], null);
        $this->setIfExists('stripe_enabled', $data ?? [], null);
        $this->setIfExists('paypal_enabled', $data ?? [], null);
        $this->setIfExists('booking_without_payment_allowed', $data ?? [], null);
        $this->setIfExists('invoicing_enabled', $data ?? [], null);
        $this->setIfExists('copy_availability_from_previous_week', $data ?? [], null);
        $this->setIfExists('google_maps_url_for_provider_address', $data ?? [], null);
        $this->setIfExists('full_provider_address', $data ?? [], null);
        $this->setIfExists('full_provider_location_address', $data ?? [], null);
        $this->setIfExists('onboarding_step_test_center', $data ?? [], null);
        $this->setIfExists('onboarding_step_login', $data ?? [], null);
        $this->setIfExists('status_active', $data ?? [], null);
        $this->setIfExists('status_paused', $data ?? [], null);
        $this->setIfExists('status_deactivated', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('availability_set_up', $data ?? [], null);
        $this->setIfExists('instance_cleared', $data ?? [], null);
        $this->setIfExists('subdomain', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url_imprint'] === null) {
            $invalidProperties[] = "'url_imprint' can't be null";
        }
        if ($this->container['url_homepage'] === null) {
            $invalidProperties[] = "'url_homepage' can't be null";
        }
        if ($this->container['url_privacy'] === null) {
            $invalidProperties[] = "'url_privacy' can't be null";
        }
        if (!is_null($this->container['provider_device_id_jrc_database']) && ($this->container['provider_device_id_jrc_database'] >= 100000)) {
            $invalidProperties[] = "invalid value for 'provider_device_id_jrc_database', must be smaller than 100000.";
        }

        if (!is_null($this->container['provider_device_id_jrc_database']) && ($this->container['provider_device_id_jrc_database'] <= 0)) {
            $invalidProperties[] = "invalid value for 'provider_device_id_jrc_database', must be bigger than 0.";
        }

        if (!is_null($this->container['editable_days']) && ($this->container['editable_days'] > 90)) {
            $invalidProperties[] = "invalid value for 'editable_days', must be smaller than or equal to 90.";
        }

        if (!is_null($this->container['editable_days']) && ($this->container['editable_days'] <= 0)) {
            $invalidProperties[] = "invalid value for 'editable_days', must be bigger than 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets probatix_customer_id
     *
     * @return string|null
     */
    public function getProbatixCustomerId()
    {
        return $this->container['probatix_customer_id'];
    }

    /**
     * Sets probatix_customer_id
     *
     * @param string|null $probatix_customer_id The customer number of the client that owns (and pays for) the tenant.
     *
     * @return self
     */
    public function setProbatixCustomerId($probatix_customer_id)
    {
        if (is_null($probatix_customer_id)) {
            throw new \InvalidArgumentException('non-nullable probatix_customer_id cannot be null');
        }
        $this->container['probatix_customer_id'] = $probatix_customer_id;

        return $this;
    }

    /**
     * Gets reporting_api_key
     *
     * @return string|null
     */
    public function getReportingApiKey()
    {
        return $this->container['reporting_api_key'];
    }

    /**
     * Sets reporting_api_key
     *
     * @param string|null $reporting_api_key reporting_api_key
     *
     * @return self
     */
    public function setReportingApiKey($reporting_api_key)
    {
        if (is_null($reporting_api_key)) {
            throw new \InvalidArgumentException('non-nullable reporting_api_key cannot be null');
        }
        $this->container['reporting_api_key'] = $reporting_api_key;

        return $this;
    }

    /**
     * Gets base_url
     *
     * @return string|null
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string|null $base_url base_url
     *
     * @return self
     */
    public function setBaseUrl($base_url)
    {
        if (is_null($base_url)) {
            throw new \InvalidArgumentException('non-nullable base_url cannot be null');
        }
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets provider_key
     *
     * @return string|null
     */
    public function getProviderKey()
    {
        return $this->container['provider_key'];
    }

    /**
     * Sets provider_key
     *
     * @param string|null $provider_key provider_key
     *
     * @return self
     */
    public function setProviderKey($provider_key)
    {
        if (is_null($provider_key)) {
            throw new \InvalidArgumentException('non-nullable provider_key cannot be null');
        }
        $this->container['provider_key'] = $provider_key;

        return $this;
    }

    /**
     * Gets deployment_stage
     *
     * @return string|null
     */
    public function getDeploymentStage()
    {
        return $this->container['deployment_stage'];
    }

    /**
     * Sets deployment_stage
     *
     * @param string|null $deployment_stage deployment_stage
     *
     * @return self
     */
    public function setDeploymentStage($deployment_stage)
    {
        if (is_null($deployment_stage)) {
            throw new \InvalidArgumentException('non-nullable deployment_stage cannot be null');
        }
        $this->container['deployment_stage'] = $deployment_stage;

        return $this;
    }

    /**
     * Gets url_imprint
     *
     * @return string
     */
    public function getUrlImprint()
    {
        return $this->container['url_imprint'];
    }

    /**
     * Sets url_imprint
     *
     * @param string $url_imprint url_imprint
     *
     * @return self
     */
    public function setUrlImprint($url_imprint)
    {
        if (is_null($url_imprint)) {
            throw new \InvalidArgumentException('non-nullable url_imprint cannot be null');
        }
        $this->container['url_imprint'] = $url_imprint;

        return $this;
    }

    /**
     * Gets url_homepage
     *
     * @return string
     */
    public function getUrlHomepage()
    {
        return $this->container['url_homepage'];
    }

    /**
     * Sets url_homepage
     *
     * @param string $url_homepage url_homepage
     *
     * @return self
     */
    public function setUrlHomepage($url_homepage)
    {
        if (is_null($url_homepage)) {
            throw new \InvalidArgumentException('non-nullable url_homepage cannot be null');
        }
        $this->container['url_homepage'] = $url_homepage;

        return $this;
    }

    /**
     * Gets url_privacy
     *
     * @return string
     */
    public function getUrlPrivacy()
    {
        return $this->container['url_privacy'];
    }

    /**
     * Sets url_privacy
     *
     * @param string $url_privacy url_privacy
     *
     * @return self
     */
    public function setUrlPrivacy($url_privacy)
    {
        if (is_null($url_privacy)) {
            throw new \InvalidArgumentException('non-nullable url_privacy cannot be null');
        }
        $this->container['url_privacy'] = $url_privacy;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string|null
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string|null $provider_name provider_name
     *
     * @return self
     */
    public function setProviderName($provider_name)
    {
        if (is_null($provider_name)) {
            throw new \InvalidArgumentException('non-nullable provider_name cannot be null');
        }
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets provider_address
     *
     * @return string|null
     */
    public function getProviderAddress()
    {
        return $this->container['provider_address'];
    }

    /**
     * Sets provider_address
     *
     * @param string|null $provider_address provider_address
     *
     * @return self
     */
    public function setProviderAddress($provider_address)
    {
        if (is_null($provider_address)) {
            throw new \InvalidArgumentException('non-nullable provider_address cannot be null');
        }
        $this->container['provider_address'] = $provider_address;

        return $this;
    }

    /**
     * Gets provider_responsible_contact_name
     *
     * @return string|null
     */
    public function getProviderResponsibleContactName()
    {
        return $this->container['provider_responsible_contact_name'];
    }

    /**
     * Sets provider_responsible_contact_name
     *
     * @param string|null $provider_responsible_contact_name provider_responsible_contact_name
     *
     * @return self
     */
    public function setProviderResponsibleContactName($provider_responsible_contact_name)
    {
        if (is_null($provider_responsible_contact_name)) {
            array_push($this->openAPINullablesSetToNull, 'provider_responsible_contact_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_responsible_contact_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_responsible_contact_name'] = $provider_responsible_contact_name;

        return $this;
    }

    /**
     * Gets provider_data_privacy_contact
     *
     * @return string|null
     */
    public function getProviderDataPrivacyContact()
    {
        return $this->container['provider_data_privacy_contact'];
    }

    /**
     * Sets provider_data_privacy_contact
     *
     * @param string|null $provider_data_privacy_contact provider_data_privacy_contact
     *
     * @return self
     */
    public function setProviderDataPrivacyContact($provider_data_privacy_contact)
    {
        if (is_null($provider_data_privacy_contact)) {
            array_push($this->openAPINullablesSetToNull, 'provider_data_privacy_contact');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_data_privacy_contact', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_data_privacy_contact'] = $provider_data_privacy_contact;

        return $this;
    }

    /**
     * Gets provider_data_privacy_additional_information
     *
     * @return string|null
     */
    public function getProviderDataPrivacyAdditionalInformation()
    {
        return $this->container['provider_data_privacy_additional_information'];
    }

    /**
     * Sets provider_data_privacy_additional_information
     *
     * @param string|null $provider_data_privacy_additional_information provider_data_privacy_additional_information
     *
     * @return self
     */
    public function setProviderDataPrivacyAdditionalInformation($provider_data_privacy_additional_information)
    {
        if (is_null($provider_data_privacy_additional_information)) {
            array_push($this->openAPINullablesSetToNull, 'provider_data_privacy_additional_information');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_data_privacy_additional_information', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_data_privacy_additional_information'] = $provider_data_privacy_additional_information;

        return $this;
    }

    /**
     * Gets email_sender_address
     *
     * @return string|null
     */
    public function getEmailSenderAddress()
    {
        return $this->container['email_sender_address'];
    }

    /**
     * Sets email_sender_address
     *
     * @param string|null $email_sender_address email_sender_address
     *
     * @return self
     */
    public function setEmailSenderAddress($email_sender_address)
    {
        if (is_null($email_sender_address)) {
            throw new \InvalidArgumentException('non-nullable email_sender_address cannot be null');
        }
        $this->container['email_sender_address'] = $email_sender_address;

        return $this;
    }

    /**
     * Gets provider_location_name
     *
     * @return string|null
     */
    public function getProviderLocationName()
    {
        return $this->container['provider_location_name'];
    }

    /**
     * Sets provider_location_name
     *
     * @param string|null $provider_location_name provider_location_name
     *
     * @return self
     */
    public function setProviderLocationName($provider_location_name)
    {
        if (is_null($provider_location_name)) {
            throw new \InvalidArgumentException('non-nullable provider_location_name cannot be null');
        }
        $this->container['provider_location_name'] = $provider_location_name;

        return $this;
    }

    /**
     * Gets provider_location_registration_id
     *
     * @return string|null
     */
    public function getProviderLocationRegistrationId()
    {
        return $this->container['provider_location_registration_id'];
    }

    /**
     * Sets provider_location_registration_id
     *
     * @param string|null $provider_location_registration_id provider_location_registration_id
     *
     * @return self
     */
    public function setProviderLocationRegistrationId($provider_location_registration_id)
    {
        if (is_null($provider_location_registration_id)) {
            array_push($this->openAPINullablesSetToNull, 'provider_location_registration_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_location_registration_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_location_registration_id'] = $provider_location_registration_id;

        return $this;
    }

    /**
     * Gets provider_location_address
     *
     * @return string|null
     */
    public function getProviderLocationAddress()
    {
        return $this->container['provider_location_address'];
    }

    /**
     * Sets provider_location_address
     *
     * @param string|null $provider_location_address provider_location_address
     *
     * @return self
     */
    public function setProviderLocationAddress($provider_location_address)
    {
        if (is_null($provider_location_address)) {
            throw new \InvalidArgumentException('non-nullable provider_location_address cannot be null');
        }
        $this->container['provider_location_address'] = $provider_location_address;

        return $this;
    }

    /**
     * Gets provider_location_phone
     *
     * @return string|null
     */
    public function getProviderLocationPhone()
    {
        return $this->container['provider_location_phone'];
    }

    /**
     * Sets provider_location_phone
     *
     * @param string|null $provider_location_phone provider_location_phone
     *
     * @return self
     */
    public function setProviderLocationPhone($provider_location_phone)
    {
        if (is_null($provider_location_phone)) {
            array_push($this->openAPINullablesSetToNull, 'provider_location_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_location_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_location_phone'] = $provider_location_phone;

        return $this;
    }

    /**
     * Gets provider_location_email
     *
     * @return string|null
     */
    public function getProviderLocationEmail()
    {
        return $this->container['provider_location_email'];
    }

    /**
     * Sets provider_location_email
     *
     * @param string|null $provider_location_email provider_location_email
     *
     * @return self
     */
    public function setProviderLocationEmail($provider_location_email)
    {
        if (is_null($provider_location_email)) {
            array_push($this->openAPINullablesSetToNull, 'provider_location_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_location_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_location_email'] = $provider_location_email;

        return $this;
    }

    /**
     * Gets is_booking_without_payment_allowed
     *
     * @return bool|null
     */
    public function getIsBookingWithoutPaymentAllowed()
    {
        return $this->container['is_booking_without_payment_allowed'];
    }

    /**
     * Sets is_booking_without_payment_allowed
     *
     * @param bool|null $is_booking_without_payment_allowed is_booking_without_payment_allowed
     *
     * @return self
     */
    public function setIsBookingWithoutPaymentAllowed($is_booking_without_payment_allowed)
    {
        if (is_null($is_booking_without_payment_allowed)) {
            throw new \InvalidArgumentException('non-nullable is_booking_without_payment_allowed cannot be null');
        }
        $this->container['is_booking_without_payment_allowed'] = $is_booking_without_payment_allowed;

        return $this;
    }

    /**
     * Gets is_stripe_enabled
     *
     * @return bool|null
     */
    public function getIsStripeEnabled()
    {
        return $this->container['is_stripe_enabled'];
    }

    /**
     * Sets is_stripe_enabled
     *
     * @param bool|null $is_stripe_enabled is_stripe_enabled
     *
     * @return self
     */
    public function setIsStripeEnabled($is_stripe_enabled)
    {
        if (is_null($is_stripe_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_stripe_enabled cannot be null');
        }
        $this->container['is_stripe_enabled'] = $is_stripe_enabled;

        return $this;
    }

    /**
     * Gets stripe_payment_methods
     *
     * @return string[]|null
     */
    public function getStripePaymentMethods()
    {
        return $this->container['stripe_payment_methods'];
    }

    /**
     * Sets stripe_payment_methods
     *
     * @param string[]|null $stripe_payment_methods stripe_payment_methods
     *
     * @return self
     */
    public function setStripePaymentMethods($stripe_payment_methods)
    {
        if (is_null($stripe_payment_methods)) {
            array_push($this->openAPINullablesSetToNull, 'stripe_payment_methods');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stripe_payment_methods', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stripe_payment_methods'] = $stripe_payment_methods;

        return $this;
    }

    /**
     * Gets stripe_account_id
     *
     * @return string|null
     */
    public function getStripeAccountId()
    {
        return $this->container['stripe_account_id'];
    }

    /**
     * Sets stripe_account_id
     *
     * @param string|null $stripe_account_id stripe_account_id
     *
     * @return self
     */
    public function setStripeAccountId($stripe_account_id)
    {
        if (is_null($stripe_account_id)) {
            array_push($this->openAPINullablesSetToNull, 'stripe_account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stripe_account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stripe_account_id'] = $stripe_account_id;

        return $this;
    }

    /**
     * Gets paypal_environment
     *
     * @return string|null
     */
    public function getPaypalEnvironment()
    {
        return $this->container['paypal_environment'];
    }

    /**
     * Sets paypal_environment
     *
     * @param string|null $paypal_environment paypal_environment
     *
     * @return self
     */
    public function setPaypalEnvironment($paypal_environment)
    {
        if (is_null($paypal_environment)) {
            throw new \InvalidArgumentException('non-nullable paypal_environment cannot be null');
        }
        $this->container['paypal_environment'] = $paypal_environment;

        return $this;
    }

    /**
     * Gets is_paypal_enabled
     *
     * @return bool|null
     */
    public function getIsPaypalEnabled()
    {
        return $this->container['is_paypal_enabled'];
    }

    /**
     * Sets is_paypal_enabled
     *
     * @param bool|null $is_paypal_enabled is_paypal_enabled
     *
     * @return self
     */
    public function setIsPaypalEnabled($is_paypal_enabled)
    {
        if (is_null($is_paypal_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_paypal_enabled cannot be null');
        }
        $this->container['is_paypal_enabled'] = $is_paypal_enabled;

        return $this;
    }

    /**
     * Gets paypal_client_id
     *
     * @return string|null
     */
    public function getPaypalClientId()
    {
        return $this->container['paypal_client_id'];
    }

    /**
     * Sets paypal_client_id
     *
     * @param string|null $paypal_client_id paypal_client_id
     *
     * @return self
     */
    public function setPaypalClientId($paypal_client_id)
    {
        if (is_null($paypal_client_id)) {
            array_push($this->openAPINullablesSetToNull, 'paypal_client_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paypal_client_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paypal_client_id'] = $paypal_client_id;

        return $this;
    }

    /**
     * Gets paypal_client_secret
     *
     * @return string|null
     */
    public function getPaypalClientSecret()
    {
        return $this->container['paypal_client_secret'];
    }

    /**
     * Sets paypal_client_secret
     *
     * @param string|null $paypal_client_secret paypal_client_secret
     *
     * @return self
     */
    public function setPaypalClientSecret($paypal_client_secret)
    {
        if (is_null($paypal_client_secret)) {
            array_push($this->openAPINullablesSetToNull, 'paypal_client_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paypal_client_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paypal_client_secret'] = $paypal_client_secret;

        return $this;
    }

    /**
     * Gets provider_test_details
     *
     * @return string|null
     */
    public function getProviderTestDetails()
    {
        return $this->container['provider_test_details'];
    }

    /**
     * Sets provider_test_details
     *
     * @param string|null $provider_test_details provider_test_details
     *
     * @return self
     */
    public function setProviderTestDetails($provider_test_details)
    {
        if (is_null($provider_test_details)) {
            array_push($this->openAPINullablesSetToNull, 'provider_test_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_test_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_test_details'] = $provider_test_details;

        return $this;
    }

    /**
     * Gets provider_device_id_jrc_database
     *
     * @return int|null
     */
    public function getProviderDeviceIdJrcDatabase()
    {
        return $this->container['provider_device_id_jrc_database'];
    }

    /**
     * Sets provider_device_id_jrc_database
     *
     * @param int|null $provider_device_id_jrc_database provider_device_id_jrc_database
     *
     * @return self
     */
    public function setProviderDeviceIdJrcDatabase($provider_device_id_jrc_database)
    {
        if (is_null($provider_device_id_jrc_database)) {
            array_push($this->openAPINullablesSetToNull, 'provider_device_id_jrc_database');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_device_id_jrc_database', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($provider_device_id_jrc_database) && ($provider_device_id_jrc_database >= 100000)) {
            throw new \InvalidArgumentException('invalid value for $provider_device_id_jrc_database when calling Tenant., must be smaller than 100000.');
        }
        if (!is_null($provider_device_id_jrc_database) && ($provider_device_id_jrc_database <= 0)) {
            throw new \InvalidArgumentException('invalid value for $provider_device_id_jrc_database when calling Tenant., must be bigger than 0.');
        }

        $this->container['provider_device_id_jrc_database'] = $provider_device_id_jrc_database;

        return $this;
    }

    /**
     * Gets privacy_text
     *
     * @return string|null
     */
    public function getPrivacyText()
    {
        return $this->container['privacy_text'];
    }

    /**
     * Sets privacy_text
     *
     * @param string|null $privacy_text privacy_text
     *
     * @return self
     */
    public function setPrivacyText($privacy_text)
    {
        if (is_null($privacy_text)) {
            array_push($this->openAPINullablesSetToNull, 'privacy_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('privacy_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['privacy_text'] = $privacy_text;

        return $this;
    }

    /**
     * Gets is_invoicing_enabled
     *
     * @return bool|null
     */
    public function getIsInvoicingEnabled()
    {
        return $this->container['is_invoicing_enabled'];
    }

    /**
     * Sets is_invoicing_enabled
     *
     * @param bool|null $is_invoicing_enabled is_invoicing_enabled
     *
     * @return self
     */
    public function setIsInvoicingEnabled($is_invoicing_enabled)
    {
        if (is_null($is_invoicing_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_invoicing_enabled cannot be null');
        }
        $this->container['is_invoicing_enabled'] = $is_invoicing_enabled;

        return $this;
    }

    /**
     * Gets provider_url_logo
     *
     * @return string|null
     */
    public function getProviderUrlLogo()
    {
        return $this->container['provider_url_logo'];
    }

    /**
     * Sets provider_url_logo
     *
     * @param string|null $provider_url_logo provider_url_logo
     *
     * @return self
     */
    public function setProviderUrlLogo($provider_url_logo)
    {
        if (is_null($provider_url_logo)) {
            array_push($this->openAPINullablesSetToNull, 'provider_url_logo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_url_logo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_url_logo'] = $provider_url_logo;

        return $this;
    }

    /**
     * Gets general_terms_text
     *
     * @return string|null
     */
    public function getGeneralTermsText()
    {
        return $this->container['general_terms_text'];
    }

    /**
     * Sets general_terms_text
     *
     * @param string|null $general_terms_text general_terms_text
     *
     * @return self
     */
    public function setGeneralTermsText($general_terms_text)
    {
        if (is_null($general_terms_text)) {
            array_push($this->openAPINullablesSetToNull, 'general_terms_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('general_terms_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['general_terms_text'] = $general_terms_text;

        return $this;
    }

    /**
     * Gets background_image_path
     *
     * @return string|null
     */
    public function getBackgroundImagePath()
    {
        return $this->container['background_image_path'];
    }

    /**
     * Sets background_image_path
     *
     * @param string|null $background_image_path background_image_path
     *
     * @return self
     */
    public function setBackgroundImagePath($background_image_path)
    {
        if (is_null($background_image_path)) {
            array_push($this->openAPINullablesSetToNull, 'background_image_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_image_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_image_path'] = $background_image_path;

        return $this;
    }

    /**
     * Gets logo_path
     *
     * @return string|null
     */
    public function getLogoPath()
    {
        return $this->container['logo_path'];
    }

    /**
     * Sets logo_path
     *
     * @param string|null $logo_path logo_path
     *
     * @return self
     */
    public function setLogoPath($logo_path)
    {
        if (is_null($logo_path)) {
            array_push($this->openAPINullablesSetToNull, 'logo_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo_path'] = $logo_path;

        return $this;
    }

    /**
     * Gets primary_color
     *
     * @return string|null
     */
    public function getPrimaryColor()
    {
        return $this->container['primary_color'];
    }

    /**
     * Sets primary_color
     *
     * @param string|null $primary_color primary_color
     *
     * @return self
     */
    public function setPrimaryColor($primary_color)
    {
        if (is_null($primary_color)) {
            array_push($this->openAPINullablesSetToNull, 'primary_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_color'] = $primary_color;

        return $this;
    }

    /**
     * Gets secondary_color
     *
     * @return string|null
     */
    public function getSecondaryColor()
    {
        return $this->container['secondary_color'];
    }

    /**
     * Sets secondary_color
     *
     * @param string|null $secondary_color secondary_color
     *
     * @return self
     */
    public function setSecondaryColor($secondary_color)
    {
        if (is_null($secondary_color)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondary_color'] = $secondary_color;

        return $this;
    }

    /**
     * Gets font_family
     *
     * @return string|null
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     *
     * @param string|null $font_family font_family
     *
     * @return self
     */
    public function setFontFamily($font_family)
    {
        if (is_null($font_family)) {
            array_push($this->openAPINullablesSetToNull, 'font_family');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('font_family', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets header_font_family
     *
     * @return string|null
     */
    public function getHeaderFontFamily()
    {
        return $this->container['header_font_family'];
    }

    /**
     * Sets header_font_family
     *
     * @param string|null $header_font_family header_font_family
     *
     * @return self
     */
    public function setHeaderFontFamily($header_font_family)
    {
        if (is_null($header_font_family)) {
            array_push($this->openAPINullablesSetToNull, 'header_font_family');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_font_family', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['header_font_family'] = $header_font_family;

        return $this;
    }

    /**
     * Gets background_image_file
     *
     * @return \SplFileObject|null
     */
    public function getBackgroundImageFile()
    {
        return $this->container['background_image_file'];
    }

    /**
     * Sets background_image_file
     *
     * @param \SplFileObject|null $background_image_file background_image_file
     *
     * @return self
     */
    public function setBackgroundImageFile($background_image_file)
    {
        if (is_null($background_image_file)) {
            array_push($this->openAPINullablesSetToNull, 'background_image_file');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_image_file', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_image_file'] = $background_image_file;

        return $this;
    }

    /**
     * Gets logo_file
     *
     * @return \SplFileObject|null
     */
    public function getLogoFile()
    {
        return $this->container['logo_file'];
    }

    /**
     * Sets logo_file
     *
     * @param \SplFileObject|null $logo_file logo_file
     *
     * @return self
     */
    public function setLogoFile($logo_file)
    {
        if (is_null($logo_file)) {
            array_push($this->openAPINullablesSetToNull, 'logo_file');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo_file', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo_file'] = $logo_file;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets punchline
     *
     * @return string|null
     */
    public function getPunchline()
    {
        return $this->container['punchline'];
    }

    /**
     * Sets punchline
     *
     * @param string|null $punchline punchline
     *
     * @return self
     */
    public function setPunchline($punchline)
    {
        if (is_null($punchline)) {
            array_push($this->openAPINullablesSetToNull, 'punchline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('punchline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['punchline'] = $punchline;

        return $this;
    }

    /**
     * Gets button_color
     *
     * @return string|null
     */
    public function getButtonColor()
    {
        return $this->container['button_color'];
    }

    /**
     * Sets button_color
     *
     * @param string|null $button_color button_color
     *
     * @return self
     */
    public function setButtonColor($button_color)
    {
        if (is_null($button_color)) {
            array_push($this->openAPINullablesSetToNull, 'button_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('button_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['button_color'] = $button_color;

        return $this;
    }

    /**
     * Gets show_company_field_for_customers
     *
     * @return bool|null
     */
    public function getShowCompanyFieldForCustomers()
    {
        return $this->container['show_company_field_for_customers'];
    }

    /**
     * Sets show_company_field_for_customers
     *
     * @param bool|null $show_company_field_for_customers show_company_field_for_customers
     *
     * @return self
     */
    public function setShowCompanyFieldForCustomers($show_company_field_for_customers)
    {
        if (is_null($show_company_field_for_customers)) {
            throw new \InvalidArgumentException('non-nullable show_company_field_for_customers cannot be null');
        }
        $this->container['show_company_field_for_customers'] = $show_company_field_for_customers;

        return $this;
    }

    /**
     * Gets attach_test_result
     *
     * @return bool|null
     */
    public function getAttachTestResult()
    {
        return $this->container['attach_test_result'];
    }

    /**
     * Sets attach_test_result
     *
     * @param bool|null $attach_test_result attach_test_result
     *
     * @return self
     */
    public function setAttachTestResult($attach_test_result)
    {
        if (is_null($attach_test_result)) {
            throw new \InvalidArgumentException('non-nullable attach_test_result cannot be null');
        }
        $this->container['attach_test_result'] = $attach_test_result;

        return $this;
    }

    /**
     * Gets list_of_companies_for_company_field_for_customers
     *
     * @return string[]|null
     */
    public function getListOfCompaniesForCompanyFieldForCustomers()
    {
        return $this->container['list_of_companies_for_company_field_for_customers'];
    }

    /**
     * Sets list_of_companies_for_company_field_for_customers
     *
     * @param string[]|null $list_of_companies_for_company_field_for_customers list_of_companies_for_company_field_for_customers
     *
     * @return self
     */
    public function setListOfCompaniesForCompanyFieldForCustomers($list_of_companies_for_company_field_for_customers)
    {
        if (is_null($list_of_companies_for_company_field_for_customers)) {
            array_push($this->openAPINullablesSetToNull, 'list_of_companies_for_company_field_for_customers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('list_of_companies_for_company_field_for_customers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['list_of_companies_for_company_field_for_customers'] = $list_of_companies_for_company_field_for_customers;

        return $this;
    }

    /**
     * Gets list_of_zip_codes_for_customers
     *
     * @return string[]|null
     */
    public function getListOfZipCodesForCustomers()
    {
        return $this->container['list_of_zip_codes_for_customers'];
    }

    /**
     * Sets list_of_zip_codes_for_customers
     *
     * @param string[]|null $list_of_zip_codes_for_customers list_of_zip_codes_for_customers
     *
     * @return self
     */
    public function setListOfZipCodesForCustomers($list_of_zip_codes_for_customers)
    {
        if (is_null($list_of_zip_codes_for_customers)) {
            array_push($this->openAPINullablesSetToNull, 'list_of_zip_codes_for_customers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('list_of_zip_codes_for_customers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['list_of_zip_codes_for_customers'] = $list_of_zip_codes_for_customers;

        return $this;
    }

    /**
     * Gets enable_availability_locations
     *
     * @return bool|null
     */
    public function getEnableAvailabilityLocations()
    {
        return $this->container['enable_availability_locations'];
    }

    /**
     * Sets enable_availability_locations
     *
     * @param bool|null $enable_availability_locations enable_availability_locations
     *
     * @return self
     */
    public function setEnableAvailabilityLocations($enable_availability_locations)
    {
        if (is_null($enable_availability_locations)) {
            throw new \InvalidArgumentException('non-nullable enable_availability_locations cannot be null');
        }
        $this->container['enable_availability_locations'] = $enable_availability_locations;

        return $this;
    }

    /**
     * Gets mobile_scanning_enabled
     *
     * @return bool|null
     */
    public function getMobileScanningEnabled()
    {
        return $this->container['mobile_scanning_enabled'];
    }

    /**
     * Sets mobile_scanning_enabled
     *
     * @param bool|null $mobile_scanning_enabled mobile_scanning_enabled
     *
     * @return self
     */
    public function setMobileScanningEnabled($mobile_scanning_enabled)
    {
        if (is_null($mobile_scanning_enabled)) {
            throw new \InvalidArgumentException('non-nullable mobile_scanning_enabled cannot be null');
        }
        $this->container['mobile_scanning_enabled'] = $mobile_scanning_enabled;

        return $this;
    }

    /**
     * Gets force_booking_slot_selection
     *
     * @return bool|null
     */
    public function getForceBookingSlotSelection()
    {
        return $this->container['force_booking_slot_selection'];
    }

    /**
     * Sets force_booking_slot_selection
     *
     * @param bool|null $force_booking_slot_selection Does not distribute the bookings on the next available slots, but instead forces them to be booked all on the slot initially selected. Exactly like in the admin booking.
     *
     * @return self
     */
    public function setForceBookingSlotSelection($force_booking_slot_selection)
    {
        if (is_null($force_booking_slot_selection)) {
            throw new \InvalidArgumentException('non-nullable force_booking_slot_selection cannot be null');
        }
        $this->container['force_booking_slot_selection'] = $force_booking_slot_selection;

        return $this;
    }

    /**
     * Gets time_slot_duration
     *
     * @return int|null
     */
    public function getTimeSlotDuration()
    {
        return $this->container['time_slot_duration'];
    }

    /**
     * Sets time_slot_duration
     *
     * @param int|null $time_slot_duration time_slot_duration
     *
     * @return self
     */
    public function setTimeSlotDuration($time_slot_duration)
    {
        if (is_null($time_slot_duration)) {
            throw new \InvalidArgumentException('non-nullable time_slot_duration cannot be null');
        }
        $this->container['time_slot_duration'] = $time_slot_duration;

        return $this;
    }

    /**
     * Gets duration_of_day_pass_validity
     *
     * @return int|null
     */
    public function getDurationOfDayPassValidity()
    {
        return $this->container['duration_of_day_pass_validity'];
    }

    /**
     * Sets duration_of_day_pass_validity
     *
     * @param int|null $duration_of_day_pass_validity duration_of_day_pass_validity
     *
     * @return self
     */
    public function setDurationOfDayPassValidity($duration_of_day_pass_validity)
    {
        if (is_null($duration_of_day_pass_validity)) {
            throw new \InvalidArgumentException('non-nullable duration_of_day_pass_validity cannot be null');
        }
        $this->container['duration_of_day_pass_validity'] = $duration_of_day_pass_validity;

        return $this;
    }

    /**
     * Gets max_bookings_per_slot
     *
     * @return int|null
     */
    public function getMaxBookingsPerSlot()
    {
        return $this->container['max_bookings_per_slot'];
    }

    /**
     * Sets max_bookings_per_slot
     *
     * @param int|null $max_bookings_per_slot max_bookings_per_slot
     *
     * @return self
     */
    public function setMaxBookingsPerSlot($max_bookings_per_slot)
    {
        if (is_null($max_bookings_per_slot)) {
            throw new \InvalidArgumentException('non-nullable max_bookings_per_slot cannot be null');
        }
        $this->container['max_bookings_per_slot'] = $max_bookings_per_slot;

        return $this;
    }

    /**
     * Gets opening_time
     *
     * @return int|null
     */
    public function getOpeningTime()
    {
        return $this->container['opening_time'];
    }

    /**
     * Sets opening_time
     *
     * @param int|null $opening_time opening_time
     *
     * @return self
     */
    public function setOpeningTime($opening_time)
    {
        if (is_null($opening_time)) {
            throw new \InvalidArgumentException('non-nullable opening_time cannot be null');
        }
        $this->container['opening_time'] = $opening_time;

        return $this;
    }

    /**
     * Gets closing_time
     *
     * @return int|null
     */
    public function getClosingTime()
    {
        return $this->container['closing_time'];
    }

    /**
     * Sets closing_time
     *
     * @param int|null $closing_time closing_time
     *
     * @return self
     */
    public function setClosingTime($closing_time)
    {
        if (is_null($closing_time)) {
            throw new \InvalidArgumentException('non-nullable closing_time cannot be null');
        }
        $this->container['closing_time'] = $closing_time;

        return $this;
    }

    /**
     * Gets is_copy_availability_from_previous_week
     *
     * @return bool|null
     */
    public function getIsCopyAvailabilityFromPreviousWeek()
    {
        return $this->container['is_copy_availability_from_previous_week'];
    }

    /**
     * Sets is_copy_availability_from_previous_week
     *
     * @param bool|null $is_copy_availability_from_previous_week is_copy_availability_from_previous_week
     *
     * @return self
     */
    public function setIsCopyAvailabilityFromPreviousWeek($is_copy_availability_from_previous_week)
    {
        if (is_null($is_copy_availability_from_previous_week)) {
            throw new \InvalidArgumentException('non-nullable is_copy_availability_from_previous_week cannot be null');
        }
        $this->container['is_copy_availability_from_previous_week'] = $is_copy_availability_from_previous_week;

        return $this;
    }

    /**
     * Gets advance_booking_time_in_minutes
     *
     * @return int|null
     */
    public function getAdvanceBookingTimeInMinutes()
    {
        return $this->container['advance_booking_time_in_minutes'];
    }

    /**
     * Sets advance_booking_time_in_minutes
     *
     * @param int|null $advance_booking_time_in_minutes advance_booking_time_in_minutes
     *
     * @return self
     */
    public function setAdvanceBookingTimeInMinutes($advance_booking_time_in_minutes)
    {
        if (is_null($advance_booking_time_in_minutes)) {
            throw new \InvalidArgumentException('non-nullable advance_booking_time_in_minutes cannot be null');
        }
        $this->container['advance_booking_time_in_minutes'] = $advance_booking_time_in_minutes;

        return $this;
    }

    /**
     * Gets editable_days
     *
     * @return int|null
     */
    public function getEditableDays()
    {
        return $this->container['editable_days'];
    }

    /**
     * Sets editable_days
     *
     * @param int|null $editable_days editable_days
     *
     * @return self
     */
    public function setEditableDays($editable_days)
    {
        if (is_null($editable_days)) {
            throw new \InvalidArgumentException('non-nullable editable_days cannot be null');
        }

        if (($editable_days > 90)) {
            throw new \InvalidArgumentException('invalid value for $editable_days when calling Tenant., must be smaller than or equal to 90.');
        }
        if (($editable_days <= 0)) {
            throw new \InvalidArgumentException('invalid value for $editable_days when calling Tenant., must be bigger than 0.');
        }

        $this->container['editable_days'] = $editable_days;

        return $this;
    }

    /**
     * Gets my_probatix_enabled
     *
     * @return bool|null
     */
    public function getMyProbatixEnabled()
    {
        return $this->container['my_probatix_enabled'];
    }

    /**
     * Sets my_probatix_enabled
     *
     * @param bool|null $my_probatix_enabled my_probatix_enabled
     *
     * @return self
     */
    public function setMyProbatixEnabled($my_probatix_enabled)
    {
        if (is_null($my_probatix_enabled)) {
            throw new \InvalidArgumentException('non-nullable my_probatix_enabled cannot be null');
        }
        $this->container['my_probatix_enabled'] = $my_probatix_enabled;

        return $this;
    }

    /**
     * Gets my_probatix_client_id
     *
     * @return string|null
     */
    public function getMyProbatixClientId()
    {
        return $this->container['my_probatix_client_id'];
    }

    /**
     * Sets my_probatix_client_id
     *
     * @param string|null $my_probatix_client_id my_probatix_client_id
     *
     * @return self
     */
    public function setMyProbatixClientId($my_probatix_client_id)
    {
        if (is_null($my_probatix_client_id)) {
            array_push($this->openAPINullablesSetToNull, 'my_probatix_client_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('my_probatix_client_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['my_probatix_client_id'] = $my_probatix_client_id;

        return $this;
    }

    /**
     * Gets my_probatix_client_secret
     *
     * @return string|null
     */
    public function getMyProbatixClientSecret()
    {
        return $this->container['my_probatix_client_secret'];
    }

    /**
     * Sets my_probatix_client_secret
     *
     * @param string|null $my_probatix_client_secret my_probatix_client_secret
     *
     * @return self
     */
    public function setMyProbatixClientSecret($my_probatix_client_secret)
    {
        if (is_null($my_probatix_client_secret)) {
            array_push($this->openAPINullablesSetToNull, 'my_probatix_client_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('my_probatix_client_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['my_probatix_client_secret'] = $my_probatix_client_secret;

        return $this;
    }

    /**
     * Gets internal_code_base
     *
     * @return string|null
     */
    public function getInternalCodeBase()
    {
        return $this->container['internal_code_base'];
    }

    /**
     * Sets internal_code_base
     *
     * @param string|null $internal_code_base internal_code_base
     *
     * @return self
     */
    public function setInternalCodeBase($internal_code_base)
    {
        if (is_null($internal_code_base)) {
            array_push($this->openAPINullablesSetToNull, 'internal_code_base');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_code_base', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_code_base'] = $internal_code_base;

        return $this;
    }

    /**
     * Gets bsnr
     *
     * @return string|null
     */
    public function getBsnr()
    {
        return $this->container['bsnr'];
    }

    /**
     * Sets bsnr
     *
     * @param string|null $bsnr bsnr
     *
     * @return self
     */
    public function setBsnr($bsnr)
    {
        if (is_null($bsnr)) {
            array_push($this->openAPINullablesSetToNull, 'bsnr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bsnr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bsnr'] = $bsnr;

        return $this;
    }

    /**
     * Gets tenant_selection_options
     *
     * @return string[]|null
     */
    public function getTenantSelectionOptions()
    {
        return $this->container['tenant_selection_options'];
    }

    /**
     * Sets tenant_selection_options
     *
     * @param string[]|null $tenant_selection_options tenant_selection_options
     *
     * @return self
     */
    public function setTenantSelectionOptions($tenant_selection_options)
    {
        if (is_null($tenant_selection_options)) {
            throw new \InvalidArgumentException('non-nullable tenant_selection_options cannot be null');
        }
        $this->container['tenant_selection_options'] = $tenant_selection_options;

        return $this;
    }

    /**
     * Gets send_invoice_automatically
     *
     * @return bool|null
     */
    public function getSendInvoiceAutomatically()
    {
        return $this->container['send_invoice_automatically'];
    }

    /**
     * Sets send_invoice_automatically
     *
     * @param bool|null $send_invoice_automatically send_invoice_automatically
     *
     * @return self
     */
    public function setSendInvoiceAutomatically($send_invoice_automatically)
    {
        if (is_null($send_invoice_automatically)) {
            array_push($this->openAPINullablesSetToNull, 'send_invoice_automatically');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('send_invoice_automatically', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['send_invoice_automatically'] = $send_invoice_automatically;

        return $this;
    }

    /**
     * Gets test_producer
     *
     * @return string|null
     */
    public function getTestProducer()
    {
        return $this->container['test_producer'];
    }

    /**
     * Sets test_producer
     *
     * @param string|null $test_producer test_producer
     *
     * @return self
     */
    public function setTestProducer($test_producer)
    {
        if (is_null($test_producer)) {
            array_push($this->openAPINullablesSetToNull, 'test_producer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_producer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_producer'] = $test_producer;

        return $this;
    }

    /**
     * Gets provider_street_and_house_number
     *
     * @return string|null
     */
    public function getProviderStreetAndHouseNumber()
    {
        return $this->container['provider_street_and_house_number'];
    }

    /**
     * Sets provider_street_and_house_number
     *
     * @param string|null $provider_street_and_house_number provider_street_and_house_number
     *
     * @return self
     */
    public function setProviderStreetAndHouseNumber($provider_street_and_house_number)
    {
        if (is_null($provider_street_and_house_number)) {
            array_push($this->openAPINullablesSetToNull, 'provider_street_and_house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_street_and_house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_street_and_house_number'] = $provider_street_and_house_number;

        return $this;
    }

    /**
     * Gets provider_city
     *
     * @return string|null
     */
    public function getProviderCity()
    {
        return $this->container['provider_city'];
    }

    /**
     * Sets provider_city
     *
     * @param string|null $provider_city provider_city
     *
     * @return self
     */
    public function setProviderCity($provider_city)
    {
        if (is_null($provider_city)) {
            array_push($this->openAPINullablesSetToNull, 'provider_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_city'] = $provider_city;

        return $this;
    }

    /**
     * Gets provider_zip_code
     *
     * @return string|null
     */
    public function getProviderZipCode()
    {
        return $this->container['provider_zip_code'];
    }

    /**
     * Sets provider_zip_code
     *
     * @param string|null $provider_zip_code provider_zip_code
     *
     * @return self
     */
    public function setProviderZipCode($provider_zip_code)
    {
        if (is_null($provider_zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'provider_zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_zip_code'] = $provider_zip_code;

        return $this;
    }

    /**
     * Gets provider_location_street_and_house_number
     *
     * @return string|null
     */
    public function getProviderLocationStreetAndHouseNumber()
    {
        return $this->container['provider_location_street_and_house_number'];
    }

    /**
     * Sets provider_location_street_and_house_number
     *
     * @param string|null $provider_location_street_and_house_number provider_location_street_and_house_number
     *
     * @return self
     */
    public function setProviderLocationStreetAndHouseNumber($provider_location_street_and_house_number)
    {
        if (is_null($provider_location_street_and_house_number)) {
            array_push($this->openAPINullablesSetToNull, 'provider_location_street_and_house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_location_street_and_house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_location_street_and_house_number'] = $provider_location_street_and_house_number;

        return $this;
    }

    /**
     * Gets provider_location_city
     *
     * @return string|null
     */
    public function getProviderLocationCity()
    {
        return $this->container['provider_location_city'];
    }

    /**
     * Sets provider_location_city
     *
     * @param string|null $provider_location_city provider_location_city
     *
     * @return self
     */
    public function setProviderLocationCity($provider_location_city)
    {
        if (is_null($provider_location_city)) {
            array_push($this->openAPINullablesSetToNull, 'provider_location_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_location_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_location_city'] = $provider_location_city;

        return $this;
    }

    /**
     * Gets provider_location_zip_code
     *
     * @return string|null
     */
    public function getProviderLocationZipCode()
    {
        return $this->container['provider_location_zip_code'];
    }

    /**
     * Sets provider_location_zip_code
     *
     * @param string|null $provider_location_zip_code provider_location_zip_code
     *
     * @return self
     */
    public function setProviderLocationZipCode($provider_location_zip_code)
    {
        if (is_null($provider_location_zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'provider_location_zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_location_zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provider_location_zip_code'] = $provider_location_zip_code;

        return $this;
    }

    /**
     * Gets onboarding_step
     *
     * @return string|null
     */
    public function getOnboardingStep()
    {
        return $this->container['onboarding_step'];
    }

    /**
     * Sets onboarding_step
     *
     * @param string|null $onboarding_step onboarding_step
     *
     * @return self
     */
    public function setOnboardingStep($onboarding_step)
    {
        if (is_null($onboarding_step)) {
            array_push($this->openAPINullablesSetToNull, 'onboarding_step');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('onboarding_step', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['onboarding_step'] = $onboarding_step;

        return $this;
    }

    /**
     * Gets printer_type
     *
     * @return string|null
     */
    public function getPrinterType()
    {
        return $this->container['printer_type'];
    }

    /**
     * Sets printer_type
     *
     * @param string|null $printer_type printer_type
     *
     * @return self
     */
    public function setPrinterType($printer_type)
    {
        if (is_null($printer_type)) {
            array_push($this->openAPINullablesSetToNull, 'printer_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('printer_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['printer_type'] = $printer_type;

        return $this;
    }

    /**
     * Gets show_test_paid_confirmation
     *
     * @return bool|null
     */
    public function getShowTestPaidConfirmation()
    {
        return $this->container['show_test_paid_confirmation'];
    }

    /**
     * Sets show_test_paid_confirmation
     *
     * @param bool|null $show_test_paid_confirmation show_test_paid_confirmation
     *
     * @return self
     */
    public function setShowTestPaidConfirmation($show_test_paid_confirmation)
    {
        if (is_null($show_test_paid_confirmation)) {
            throw new \InvalidArgumentException('non-nullable show_test_paid_confirmation cannot be null');
        }
        $this->container['show_test_paid_confirmation'] = $show_test_paid_confirmation;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Values: active, paused, deactivated.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets feature_flag_strategies
     *
     * @return \OpenAPI\Client\Model\FeatureFlagStrategy[]|null
     */
    public function getFeatureFlagStrategies()
    {
        return $this->container['feature_flag_strategies'];
    }

    /**
     * Sets feature_flag_strategies
     *
     * @param \OpenAPI\Client\Model\FeatureFlagStrategy[]|null $feature_flag_strategies feature_flag_strategies
     *
     * @return self
     */
    public function setFeatureFlagStrategies($feature_flag_strategies)
    {
        if (is_null($feature_flag_strategies)) {
            throw new \InvalidArgumentException('non-nullable feature_flag_strategies cannot be null');
        }
        $this->container['feature_flag_strategies'] = $feature_flag_strategies;

        return $this;
    }

    /**
     * Gets show_available_slots
     *
     * @return bool|null
     */
    public function getShowAvailableSlots()
    {
        return $this->container['show_available_slots'];
    }

    /**
     * Sets show_available_slots
     *
     * @param bool|null $show_available_slots show_available_slots
     *
     * @return self
     */
    public function setShowAvailableSlots($show_available_slots)
    {
        if (is_null($show_available_slots)) {
            throw new \InvalidArgumentException('non-nullable show_available_slots cannot be null');
        }
        $this->container['show_available_slots'] = $show_available_slots;

        return $this;
    }

    /**
     * Gets address_components
     *
     * @return string[]|null
     */
    public function getAddressComponents()
    {
        return $this->container['address_components'];
    }

    /**
     * Sets address_components
     *
     * @param string[]|null $address_components address_components
     *
     * @return self
     */
    public function setAddressComponents($address_components)
    {
        if (is_null($address_components)) {
            array_push($this->openAPINullablesSetToNull, 'address_components');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_components', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_components'] = $address_components;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets send_full_data_in_report_api
     *
     * @return bool|null
     */
    public function getSendFullDataInReportApi()
    {
        return $this->container['send_full_data_in_report_api'];
    }

    /**
     * Sets send_full_data_in_report_api
     *
     * @param bool|null $send_full_data_in_report_api send_full_data_in_report_api
     *
     * @return self
     */
    public function setSendFullDataInReportApi($send_full_data_in_report_api)
    {
        if (is_null($send_full_data_in_report_api)) {
            throw new \InvalidArgumentException('non-nullable send_full_data_in_report_api cannot be null');
        }
        $this->container['send_full_data_in_report_api'] = $send_full_data_in_report_api;

        return $this;
    }

    /**
     * Gets is_availability_set_up
     *
     * @return bool|null
     */
    public function getIsAvailabilitySetUp()
    {
        return $this->container['is_availability_set_up'];
    }

    /**
     * Sets is_availability_set_up
     *
     * @param bool|null $is_availability_set_up is_availability_set_up
     *
     * @return self
     */
    public function setIsAvailabilitySetUp($is_availability_set_up)
    {
        if (is_null($is_availability_set_up)) {
            throw new \InvalidArgumentException('non-nullable is_availability_set_up cannot be null');
        }
        $this->container['is_availability_set_up'] = $is_availability_set_up;

        return $this;
    }

    /**
     * Gets is_instance_cleared
     *
     * @return bool|null
     */
    public function getIsInstanceCleared()
    {
        return $this->container['is_instance_cleared'];
    }

    /**
     * Sets is_instance_cleared
     *
     * @param bool|null $is_instance_cleared is_instance_cleared
     *
     * @return self
     */
    public function setIsInstanceCleared($is_instance_cleared)
    {
        if (is_null($is_instance_cleared)) {
            throw new \InvalidArgumentException('non-nullable is_instance_cleared cannot be null');
        }
        $this->container['is_instance_cleared'] = $is_instance_cleared;

        return $this;
    }

    /**
     * Gets available_product_types
     *
     * @return string[]|null
     */
    public function getAvailableProductTypes()
    {
        return $this->container['available_product_types'];
    }

    /**
     * Sets available_product_types
     *
     * @param string[]|null $available_product_types available_product_types
     *
     * @return self
     */
    public function setAvailableProductTypes($available_product_types)
    {
        if (is_null($available_product_types)) {
            throw new \InvalidArgumentException('non-nullable available_product_types cannot be null');
        }
        $this->container['available_product_types'] = $available_product_types;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return string[]|null
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param string[]|null $locations locations
     *
     * @return self
     */
    public function setLocations($locations)
    {
        if (is_null($locations)) {
            throw new \InvalidArgumentException('non-nullable locations cannot be null');
        }
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets users
     *
     * @return string[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param string[]|null $users users
     *
     * @return self
     */
    public function setUsers($users)
    {
        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets lab_id
     *
     * @return string|null
     */
    public function getLabId()
    {
        return $this->container['lab_id'];
    }

    /**
     * Sets lab_id
     *
     * @param string|null $lab_id lab_id
     *
     * @return self
     */
    public function setLabId($lab_id)
    {
        if (is_null($lab_id)) {
            throw new \InvalidArgumentException('non-nullable lab_id cannot be null');
        }
        $this->container['lab_id'] = $lab_id;

        return $this;
    }

    /**
     * Gets stripe_enabled
     *
     * @return bool|null
     */
    public function getStripeEnabled()
    {
        return $this->container['stripe_enabled'];
    }

    /**
     * Sets stripe_enabled
     *
     * @param bool|null $stripe_enabled stripe_enabled
     *
     * @return self
     */
    public function setStripeEnabled($stripe_enabled)
    {
        if (is_null($stripe_enabled)) {
            throw new \InvalidArgumentException('non-nullable stripe_enabled cannot be null');
        }
        $this->container['stripe_enabled'] = $stripe_enabled;

        return $this;
    }

    /**
     * Gets paypal_enabled
     *
     * @return bool|null
     */
    public function getPaypalEnabled()
    {
        return $this->container['paypal_enabled'];
    }

    /**
     * Sets paypal_enabled
     *
     * @param bool|null $paypal_enabled paypal_enabled
     *
     * @return self
     */
    public function setPaypalEnabled($paypal_enabled)
    {
        if (is_null($paypal_enabled)) {
            throw new \InvalidArgumentException('non-nullable paypal_enabled cannot be null');
        }
        $this->container['paypal_enabled'] = $paypal_enabled;

        return $this;
    }

    /**
     * Gets booking_without_payment_allowed
     *
     * @return bool|null
     */
    public function getBookingWithoutPaymentAllowed()
    {
        return $this->container['booking_without_payment_allowed'];
    }

    /**
     * Sets booking_without_payment_allowed
     *
     * @param bool|null $booking_without_payment_allowed booking_without_payment_allowed
     *
     * @return self
     */
    public function setBookingWithoutPaymentAllowed($booking_without_payment_allowed)
    {
        if (is_null($booking_without_payment_allowed)) {
            throw new \InvalidArgumentException('non-nullable booking_without_payment_allowed cannot be null');
        }
        $this->container['booking_without_payment_allowed'] = $booking_without_payment_allowed;

        return $this;
    }

    /**
     * Gets invoicing_enabled
     *
     * @return bool|null
     */
    public function getInvoicingEnabled()
    {
        return $this->container['invoicing_enabled'];
    }

    /**
     * Sets invoicing_enabled
     *
     * @param bool|null $invoicing_enabled invoicing_enabled
     *
     * @return self
     */
    public function setInvoicingEnabled($invoicing_enabled)
    {
        if (is_null($invoicing_enabled)) {
            throw new \InvalidArgumentException('non-nullable invoicing_enabled cannot be null');
        }
        $this->container['invoicing_enabled'] = $invoicing_enabled;

        return $this;
    }

    /**
     * Gets copy_availability_from_previous_week
     *
     * @return bool|null
     */
    public function getCopyAvailabilityFromPreviousWeek()
    {
        return $this->container['copy_availability_from_previous_week'];
    }

    /**
     * Sets copy_availability_from_previous_week
     *
     * @param bool|null $copy_availability_from_previous_week copy_availability_from_previous_week
     *
     * @return self
     */
    public function setCopyAvailabilityFromPreviousWeek($copy_availability_from_previous_week)
    {
        if (is_null($copy_availability_from_previous_week)) {
            throw new \InvalidArgumentException('non-nullable copy_availability_from_previous_week cannot be null');
        }
        $this->container['copy_availability_from_previous_week'] = $copy_availability_from_previous_week;

        return $this;
    }

    /**
     * Gets google_maps_url_for_provider_address
     *
     * @return string|null
     */
    public function getGoogleMapsUrlForProviderAddress()
    {
        return $this->container['google_maps_url_for_provider_address'];
    }

    /**
     * Sets google_maps_url_for_provider_address
     *
     * @param string|null $google_maps_url_for_provider_address google_maps_url_for_provider_address
     *
     * @return self
     */
    public function setGoogleMapsUrlForProviderAddress($google_maps_url_for_provider_address)
    {
        if (is_null($google_maps_url_for_provider_address)) {
            throw new \InvalidArgumentException('non-nullable google_maps_url_for_provider_address cannot be null');
        }
        $this->container['google_maps_url_for_provider_address'] = $google_maps_url_for_provider_address;

        return $this;
    }

    /**
     * Gets full_provider_address
     *
     * @return string|null
     */
    public function getFullProviderAddress()
    {
        return $this->container['full_provider_address'];
    }

    /**
     * Sets full_provider_address
     *
     * @param string|null $full_provider_address full_provider_address
     *
     * @return self
     */
    public function setFullProviderAddress($full_provider_address)
    {
        if (is_null($full_provider_address)) {
            throw new \InvalidArgumentException('non-nullable full_provider_address cannot be null');
        }
        $this->container['full_provider_address'] = $full_provider_address;

        return $this;
    }

    /**
     * Gets full_provider_location_address
     *
     * @return string|null
     */
    public function getFullProviderLocationAddress()
    {
        return $this->container['full_provider_location_address'];
    }

    /**
     * Sets full_provider_location_address
     *
     * @param string|null $full_provider_location_address full_provider_location_address
     *
     * @return self
     */
    public function setFullProviderLocationAddress($full_provider_location_address)
    {
        if (is_null($full_provider_location_address)) {
            throw new \InvalidArgumentException('non-nullable full_provider_location_address cannot be null');
        }
        $this->container['full_provider_location_address'] = $full_provider_location_address;

        return $this;
    }

    /**
     * Gets onboarding_step_test_center
     *
     * @return bool|null
     */
    public function getOnboardingStepTestCenter()
    {
        return $this->container['onboarding_step_test_center'];
    }

    /**
     * Sets onboarding_step_test_center
     *
     * @param bool|null $onboarding_step_test_center onboarding_step_test_center
     *
     * @return self
     */
    public function setOnboardingStepTestCenter($onboarding_step_test_center)
    {
        if (is_null($onboarding_step_test_center)) {
            throw new \InvalidArgumentException('non-nullable onboarding_step_test_center cannot be null');
        }
        $this->container['onboarding_step_test_center'] = $onboarding_step_test_center;

        return $this;
    }

    /**
     * Gets onboarding_step_login
     *
     * @return bool|null
     */
    public function getOnboardingStepLogin()
    {
        return $this->container['onboarding_step_login'];
    }

    /**
     * Sets onboarding_step_login
     *
     * @param bool|null $onboarding_step_login onboarding_step_login
     *
     * @return self
     */
    public function setOnboardingStepLogin($onboarding_step_login)
    {
        if (is_null($onboarding_step_login)) {
            throw new \InvalidArgumentException('non-nullable onboarding_step_login cannot be null');
        }
        $this->container['onboarding_step_login'] = $onboarding_step_login;

        return $this;
    }

    /**
     * Gets status_active
     *
     * @return bool|null
     */
    public function getStatusActive()
    {
        return $this->container['status_active'];
    }

    /**
     * Sets status_active
     *
     * @param bool|null $status_active status_active
     *
     * @return self
     */
    public function setStatusActive($status_active)
    {
        if (is_null($status_active)) {
            throw new \InvalidArgumentException('non-nullable status_active cannot be null');
        }
        $this->container['status_active'] = $status_active;

        return $this;
    }

    /**
     * Gets status_paused
     *
     * @return bool|null
     */
    public function getStatusPaused()
    {
        return $this->container['status_paused'];
    }

    /**
     * Sets status_paused
     *
     * @param bool|null $status_paused status_paused
     *
     * @return self
     */
    public function setStatusPaused($status_paused)
    {
        if (is_null($status_paused)) {
            throw new \InvalidArgumentException('non-nullable status_paused cannot be null');
        }
        $this->container['status_paused'] = $status_paused;

        return $this;
    }

    /**
     * Gets status_deactivated
     *
     * @return bool|null
     */
    public function getStatusDeactivated()
    {
        return $this->container['status_deactivated'];
    }

    /**
     * Sets status_deactivated
     *
     * @param bool|null $status_deactivated status_deactivated
     *
     * @return self
     */
    public function setStatusDeactivated($status_deactivated)
    {
        if (is_null($status_deactivated)) {
            throw new \InvalidArgumentException('non-nullable status_deactivated cannot be null');
        }
        $this->container['status_deactivated'] = $status_deactivated;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets availability_set_up
     *
     * @return bool|null
     */
    public function getAvailabilitySetUp()
    {
        return $this->container['availability_set_up'];
    }

    /**
     * Sets availability_set_up
     *
     * @param bool|null $availability_set_up availability_set_up
     *
     * @return self
     */
    public function setAvailabilitySetUp($availability_set_up)
    {
        if (is_null($availability_set_up)) {
            throw new \InvalidArgumentException('non-nullable availability_set_up cannot be null');
        }
        $this->container['availability_set_up'] = $availability_set_up;

        return $this;
    }

    /**
     * Gets instance_cleared
     *
     * @return bool|null
     */
    public function getInstanceCleared()
    {
        return $this->container['instance_cleared'];
    }

    /**
     * Sets instance_cleared
     *
     * @param bool|null $instance_cleared instance_cleared
     *
     * @return self
     */
    public function setInstanceCleared($instance_cleared)
    {
        if (is_null($instance_cleared)) {
            throw new \InvalidArgumentException('non-nullable instance_cleared cannot be null');
        }
        $this->container['instance_cleared'] = $instance_cleared;

        return $this;
    }

    /**
     * Gets subdomain
     *
     * @return string|null
     */
    public function getSubdomain()
    {
        return $this->container['subdomain'];
    }

    /**
     * Sets subdomain
     *
     * @param string|null $subdomain subdomain
     *
     * @return self
     */
    public function setSubdomain($subdomain)
    {
        if (is_null($subdomain)) {
            throw new \InvalidArgumentException('non-nullable subdomain cannot be null');
        }
        $this->container['subdomain'] = $subdomain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


